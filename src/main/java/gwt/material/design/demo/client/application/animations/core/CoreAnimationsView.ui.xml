<!--
  #%L
  GwtMaterial
  %%
  Copyright (C) 2015 - 2016 GwtMaterialDesign
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->
<!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent">
<ui:UiBinder xmlns:ui="urn:ui:com.google.gwt.uibinder"
             xmlns:m="urn:import:gwt.material.design.client.ui"
             xmlns:demo="urn:import:gwt.material.design.demo.client.ui">

    <ui:with field='res' type='gwt.material.design.client.resources.MaterialResources' />

    <ui:style>
        .block{
            display: block;
        }
        .icon i{
            font-size: 4em;
        }
    </ui:style>
    <m:MaterialPanel>
        <m:MaterialPanel addStyleNames="code">
            <m:MaterialTitle title="Usage" description="You can easily apply animation by calling MaterialAnimator.animate(Transition, Widget, Delay);"/>
            <m:MaterialRow>
                <m:MaterialColumn grid="s12 l6">
                    <demo:PrettyPre addStyleNames="lang-java">
                        MaterialAnimator.animate(Transition.BOUNCE, card, 300);
                    </demo:PrettyPre>
                    <m:MaterialCard ui:field="card">
                        <m:MaterialCardContent textColor="WHITE">
                            <m:MaterialCardTitle textColor="BLACK" text="Sample" iconType="POLYMER" iconPosition="RIGHT"/>
                            <m:MaterialLabel textColor="BLACK" text="I am a very simple card. I am good at containing small bits of information. I am convenient because I require little markup to use effectively." />
                        </m:MaterialCardContent>
                        <m:MaterialCardAction>
                            <m:MaterialLink text="Link 1" />
                            <m:MaterialLink text="Link 1" />
                        </m:MaterialCardAction>
                    </m:MaterialCard>
                    <m:MaterialListBox ui:field="lstAnimations" old="true" />
                    <m:MaterialButton ui:field="btnAnimate" text="Animate" textColor="WHITE"/>
                </m:MaterialColumn>
            </m:MaterialRow>
        </m:MaterialPanel>
    
        <m:MaterialPanel addStyleNames="code">
            <m:MaterialTitle title="Infinite" description="You can easily set the animation infinite."/>
            <m:MaterialRow>
                <m:MaterialColumn grid="s12 l6">
                    <demo:PrettyPre addStyleNames="lang-java">
                        // Play Infinite Animation<br/>
                        MaterialAnimator.animate(Transition.PULSE, heart, 1000, true);<br/>
                        // Stop Infinite Animation <br/>
                        MaterialAnimator.stopAnimation(heart);<br/>
                    </demo:PrettyPre>
                    <m:MaterialButton ui:field="iconHeart" width="100px" height="100px" addStyleNames="{style.icon}" type="FLOATING" size="LARGE" iconType="FAVORITE" backgroundColor="PINK" />
                </m:MaterialColumn>
            </m:MaterialRow>
            <m:MaterialButton ui:field="btnAnimateInfinite" text="Infinite Animation" textColor="WHITE"/>
            <m:MaterialButton ui:field="btnStopAnimation" text="Stop Animation" type="FLAT" />
        </m:MaterialPanel>
    
        <m:MaterialPanel addStyleNames="code">
            <m:MaterialTitle title="Callback" description="Setting the callback after animation" />
            <m:MaterialRow>
                <m:MaterialColumn grid="s12 l6">
                    <demo:PrettyPre addStyleNames="lang-java">
                        &emsp;Runnable callback = new Runnable() {<br/>
                        &emsp;@Override<br/>
                        &emsp;public void run() {<br/>
                        &emsp;&emsp;MaterialToast.fireToast("Animation is finished");<br/>
                        &emsp;}<br/>
                        };<br/>
                        MaterialAnimator.animate(Transition.FLIPINX, iconCallback, 200, callback);
                    </demo:PrettyPre>
                    <m:MaterialButton ui:field="iconCallback" width="100px" height="100px" addStyleNames="{style.icon}" type="FLOATING" size="LARGE" iconType="DIRECTIONS_BIKE" />
                </m:MaterialColumn>
            </m:MaterialRow>
            <m:MaterialButton ui:field="btnAnimateCallback" text="Animate with Callback" textColor="WHITE"/>
        </m:MaterialPanel>
    
        <m:MaterialPanel addStyleNames="code">
            <m:MaterialTitle title="Stateful Animation" description="Stateful object holding animation details. Default behaviour is a bounce transition for 800ms." />
            <m:MaterialRow>
                <m:MaterialColumn grid="s12 l6">
                    <demo:PrettyPre addStyleNames="lang-java">
                        &emsp;new MaterialAnimation().durationMillis(1000)<br/>
                        &emsp;.delayMillis(100)<br/>
                        &emsp;.transition(Transition.WOBBLE)<br/>
                        &emsp;.animate(iconState);
                    </demo:PrettyPre>
                    <m:MaterialButton ui:field="iconState" width="100px" height="100px" addStyleNames="{style.icon}" type="FLOATING" size="LARGE" iconType="POLYMER" backgroundColor="PURPLE" />
                </m:MaterialColumn>
            </m:MaterialRow>
            <m:MaterialButton ui:field="btnAnimateStateful" text="Animate" textColor="WHITE"/>
        </m:MaterialPanel>
    </m:MaterialPanel>
</ui:UiBinder>
