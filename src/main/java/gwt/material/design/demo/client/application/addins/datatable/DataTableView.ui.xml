<!--
  #%L
  GwtMaterial
  %%
  Copyright (C) 2015 - 2016 GwtMaterialDesign
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->
<!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent">
<ui:UiBinder xmlns:ui="urn:ui:com.google.gwt.uibinder"
             xmlns:m="urn:import:gwt.material.design.client.ui"
             xmlns:ma="urn:import:gwt.material.design.addins.client"
             xmlns:table="urn:import:gwt.material.design.demo.client.application.addins.datatable.table"
             xmlns:demo="urn:import:gwt.material.design.demo.client.ui"
             xmlns:g="urn:import:com.google.gwt.user.client.ui">
    <m:MaterialRow>

        <m:MaterialColumn grid="l9 s12 m12">
            <m:MaterialRow addStyleNames="code">
            <m:MaterialTitle scrollspy="datatable_usage" title="Usage" />
                <demo:PrettyPre addStyleNames="lang-xml">
                    &emsp;&lt;-- UiBinder Import --> <br/>
                    xmlns:m.table='urn:import:gwt.material.design.client.ui.table'<br/>
                    &lt;!-- Sample Code --> <br/>
                    &lt;m.table:MaterialDataTable ui:field="table"<br/>
                    height="calc(100vh - 131px)"<br/>
                    useStickyHeader="true"<br/>
                    useCategories="true"<br/>
                    useRowExpansion="true"<br/>
                    selectionType="SINGLE"/>
                </demo:PrettyPre>
            </m:MaterialRow>
    
            <m:MaterialRow addStyleNames="code">
                <m:MaterialTitle scrollspy="datatable_resources" title="Resources" description="Here are the lists of resource links for code snippet of how to use Data Table" />
                <m:MaterialLink iconType="LINK" href="https://github.com/GwtMaterialDesign/gwt-material-demo/tree/release_2.0/src/main/java/gwt/material/design/demo/client/application/addins/datatable/table" target="_blank" text="Code Resource" />
            </m:MaterialRow>
    
            <m:MaterialRow addStyleNames="code">
                <m:MaterialTitle scrollspy="standard_table" title="Standard Table" description="You can filter any options below." />
                <m:MaterialPanel ui:field="standardTablePanel" />
            </m:MaterialRow>
    
            <m:MaterialRow addStyleNames="code">
                <m:MaterialTitle scrollspy="basic_properties" title="Basic properties" />
                <g:HTMLPanel>
                    <blockquote>
                        <p><b>height - </b> sets the height of the datatable</p>
                        <p><b>useStickyHeader - </b> Enable the use of sticky table header bar.</p>
                        <p><b>useCategories - </b> Allow the data view to generate categories, or use added categories for row data. </p>
                        <p><b>selectionType - </b> Set the data views row selection type.</p>
                        <p><b>useLoadOverlay - </b> Use the loading overlay mask.</p>
                        <p><b>useRowExpansion - </b> Use row expansion functionality, giving the user a way to expand rows for extra information.</p>
                    </blockquote>
                </g:HTMLPanel>
            </m:MaterialRow>
    
            <m:MaterialRow addStyleNames="code">
                <m:MaterialTitle scrollspy="datatable_events" title="DataTable Events" />
                <g:HTMLPanel>
                    <blockquote>
                        <p><b>Row Select Event - </b>Add a row select handler, called when a user selects a row.</p>
                        <p><b>Sort Column Event - </b>Add a sort column handler, called when a user sorts a column.</p>
                        <p><b>Row Count Change Event - </b>Add a row count change handler, called when the row count changes.</p>
                        <p><b>Category Opened Event - </b>Add category opened handler, called when a category is opened.</p>
                        <p><b>Category Closed Event - </b>Add category closed handler, called when a category is closed.</p>
                        <p><b>Row Double Click Event - </b>Add a row double click handler, called when a row is double clicked.</p>
                        <p><b>Select All Event - </b>Add a select all handler, called when all rows were selected</p>
                        <p><b>Row Long Press Event - </b>Add a row long press handler, called when a row is long pressed.</p>
                        <p><b>Row Short Press Event - </b>Add a row short press handler, called when a row is short pressed.</p>
                        <p><b>Selection Event - </b>Add a selection handler, called when a row is selected</p>
                        <p><b>Row Context Menu - </b>Add a row context menu handler, called when user right click a row to open context menu.</p>
                    </blockquote>
                </g:HTMLPanel>
            </m:MaterialRow>
    
            <m:MaterialRow addStyleNames="code">
                <m:MaterialTitle scrollspy="row_factory" title="Row Factory" description="We will define our own person row factory to generate the category name. This can be used to generate your own RowComponent's too, if custom functionality is required." />
                <demo:PrettyPre addStyleNames="lang-java">
                    &emsp;table.setRowFactory(new PersonRowFactory());
                </demo:PrettyPre>
                <m:MaterialLink iconType="LINK" href="https://github.com/GwtMaterialDesign/gwt-material-table-sample/blob/master/src/main/java/gwt/material/design/sample/client/ui/factory/PersonRowFactory.java" target="_blank" text="Link to Person Row Factory" />
            </m:MaterialRow>
    
            <m:MaterialRow addStyleNames="code">
                <m:MaterialTitle scrollspy="category_factory" title="Category Factory" description="If we want to generate all our categories using CustomCategoryComponent We can define our own CategoryComponentFactory. There we can define our own CategoryComponent implementations." />
                <demo:PrettyPre addStyleNames="lang-java">
                    &emsp;table.setCategoryFactory(new CustomCategoryFactory());
                </demo:PrettyPre>
                <m:MaterialLink iconType="LINK" href="https://github.com/GwtMaterialDesign/gwt-material-table-sample/blob/master/src/main/java/gwt/material/design/sample/client/ui/factory/CustomCategoryFactory.java" target="_blank" text="Link to Category Factory" />
            </m:MaterialRow>
    
            <m:MaterialRow addStyleNames="code">
                <m:MaterialTitle scrollspy="renderer" title="Renderer" description="It is possible to create your own custom renderer per table When you use the BaseRenderer you can override certain draw methods to create elements the way you would like." />
                <demo:PrettyPre addStyleNames="lang-java">
                    &emsp;table.setRenderer(new CustomRenderer&lt;>());
                </demo:PrettyPre>
                <m:MaterialLink iconType="LINK" href="https://github.com/GwtMaterialDesign/gwt-material-table-sample/blob/master/src/main/java/gwt/material/design/sample/client/ui/renderer/CustomRenderer.java" target="_blank" text="Link to Renderer" />
            </m:MaterialRow>
    
            <m:MaterialRow addStyleNames="code">
                <m:MaterialTitle scrollspy="adding_columns" title="Adding columns" description="You can easily add data table columns by calling table.addColumn(). Also you can setup the sort comparator on each column." />
                <demo:PrettyPre addStyleNames="lang-java">
                    &emsp;table.addColumn(new TextColumn&lt;Person>() {<br/>
                    &emsp;@Override<br/>
                    &emsp;public Comparator&lt;? super RowComponent&lt;Person>> getSortComparator() {<br/>
                    &emsp;&emsp;return (o1, o2) -> o1.getData().getFirstName().compareToIgnoreCase(o2.getData().getFirstName());<br/>
                    &emsp;}<br/>
                    &emsp;@Override<br/>
                    &emsp;public String getValue(Person object) {<br/>
                    &emsp;&emsp;return object.getFirstName();<br/>
                    &emsp;}<br/>
                    }, "First Name");
                </demo:PrettyPre>
            </m:MaterialRow>
    
            <m:MaterialRow addStyleNames="code">
                <m:MaterialTitle scrollspy="columns_material" title="Adding column material widget" description="You can easily add any Material Design widget column." />
                <demo:PrettyPre addStyleNames="lang-java">
                    &emsp;table.addColumn(new WidgetColumn&lt;Person, MaterialImage>() {<br/>
                    &emsp;@Override<br/>
                    &emsp;public MaterialImage getValue(Person object) {<br/>
                    &emsp;&emsp;MaterialImage profile = new MaterialImage();<br/>
                    &emsp;&emsp;profile.setUrl(object.getPicture());<br/>
                    &emsp;&emsp;profile.setWidth("40px");<br/>
                    &emsp;&emsp;profile.setHeight("40px");<br/>
                    &emsp;&emsp;profile.setPadding(4);<br/>
                    &emsp;&emsp;profile.setMarginTop(8);<br/>
                    &emsp;&emsp;profile.setBackgroundColor("grey lighten-2");<br/>
                    &emsp;&emsp;profile.setCircle(true);<br/>
                    &emsp;&emsp;return profile;<br/>
                    &emsp;}<br/>
                    });
                </demo:PrettyPre>
            </m:MaterialRow>
    
            <m:MaterialRow addStyleNames="code">
                <m:MaterialTitle scrollspy="visible_range" title="Set Visible Range" description="Set the visible range of the table for  pager." />
                <demo:PrettyPre addStyleNames="lang-java">
                    &emsp;table.setVisibleRange(0, 2001);
                </demo:PrettyPre>
            </m:MaterialRow>
    
            <m:MaterialRow addStyleNames="code">
                <m:MaterialTitle scrollspy="set_row_data" title="Set Row Data" description="Set the row data bound to datatable." />
                <demo:PrettyPre addStyleNames="lang-java">
                    &emsp;table.setRowData(0, people);
                </demo:PrettyPre>
            </m:MaterialRow>
    
            <m:MaterialRow addStyleNames="code">
                <m:MaterialTitle scrollspy="field_updater" title="Field Updater" description="Same with GWT CellTable / DataTable we also have implemented on how to setFieldUpdater easily."/>
                <demo:PrettyPre addStyleNames="lang-java">
                    &emsp;textColumn.setFieldUpdater(new FieldUpdater() { <br/>
                    &emsp;@Override<br/>
                    &emsp;public void update(int i, Object o, Object o2) {<br/>
                    &emsp;&emsp;// Some updates here<br/>
                    &emsp;}<br/>
                    });
                </demo:PrettyPre>
            </m:MaterialRow>
    
            <m:MaterialRow addStyleNames="code">
                <m:MaterialTitle scrollspy="refresh_redraw" title="Refreshing and Redrawing the table" description="When Updating fields (Specially when using textbox) on DataTable you can refresh the datable easily." />
                <demo:PrettyPre addStyleNames="lang-java">
                    &emsp;table.setRedraw(true); <br/>
                    table.refreshView();
                </demo:PrettyPre>
            </m:MaterialRow>
    
            <m:MaterialRow addStyleNames="code">
                <m:MaterialTitle scrollspy="custom_table" title="Customize your data table" description="You can adjust table's header, rows, columns etc. easily by altering some css and pre built in scaffolding." />
                <m:MaterialPanel ui:field="customTablePanel" marginBottom="40"/>
                <demo:PrettyPre addStyleNames="lang-java">
                    &emsp;// Setting table title <br/>
                    table.getTableTitle().setText("My Custom Table");<br/><br/>
    
                    //Adding / removing table toolpanel action buttons / icons<br/>
                    Panel panel = table.getScaffolding().getToolPanel();<br/>
                    panel.clear();<br/>
                    // Add two buttons<br/>
                    panel.add(new MaterialIcon(IconType.FAVORITE));<br/>
                    panel.add(new MaterialIcon(IconType.DELETE));<br/>
                    panel.add(new MaterialIcon(IconType.MESSAGE));
                </demo:PrettyPre>
                <demo:PrettyPre addStyleNames="lang-css">
                    &emsp;/** Top Panel **/ <br/>
                    #customTable .top-panel { <br/>
                    &emsp;background-color: white; <br/>
                    &emsp;color: black; <br/>
                    }
                </demo:PrettyPre>
                <demo:PrettyPre addStyleNames="lang-css">
                    &emsp;/** Tool Panel icons **/ <br/>
                    #customTable .top-panel .tool-panel i { <br/>
                    &emsp;color: #e91e63; <br/>
                    }
                </demo:PrettyPre>
                <demo:PrettyPre addStyleNames="lang-css">
                    &emsp;/** Hovering rows **/ <br/>
                    #customTable table tbody tr.data-row:hover { <br/>
                    &emsp;background: rgba(33, 150, 243, 0.27); <br/>
                    &emsp;color: #3f3f3f; <br/>
                    }
                </demo:PrettyPre>
                <demo:PrettyPre addStyleNames="lang-css">
                    &emsp;/** Columns **/ <br/>
                    #customTable table tbody td:nth-child(3) { <br/>
                    &emsp;background: #2196f3 !important; <br/>
                    &emsp;color: #fff; <br/>
                    &emsp;border-bottom: 2px solid #1976d2; <br/>
                    }
                </demo:PrettyPre>
                <demo:PrettyPre addStyleNames="lang-css">
                    &emsp;/** Table Headers **/ <br/>
                    #customTable table thead tr th { <br/>
                    &emsp;color: #1976d2; <br/>
                    }
                </demo:PrettyPre>
            </m:MaterialRow>
    
            <m:MaterialRow addStyleNames="code">
                <m:MaterialTitle scrollspy="infinite_table" title="Infinite Data Table" description="" />
                <m:MaterialPanel ui:field="infiniteTablePanel" />
            </m:MaterialRow>
    
            <m:MaterialRow addStyleNames="code">
                <m:MaterialTitle scrollspy="data_source" title="Data Source" description="To start with building an infinite data table. You will need to provide a data source for infinite loading of data sets thru RPC Service." />
                <demo:PrettyPre addStyleNames="lang-java">
                    &emsp;table = new MaterialInfiniteDataTable&lt;>(20, <br/>
                    InfiniteDataView.DYNAMIC_VIEW, new PersonDataSource(personService));
                </demo:PrettyPre>
                <m:MaterialRow marginBottom="0">
                    <m:MaterialLink iconType="LINK" href="https://github.com/GwtMaterialDesign/gwt-material-demo/tree/release_2.0/src/main/java/gwt/material/design/demo/client/application/addins/datatable/table/datasource" display="BLOCK" target="_blank" text="Link to Person Data Source Code" />
                </m:MaterialRow>
                <m:MaterialRow marginBottom="0">
                    <m:MaterialLink iconType="LINK" href="https://github.com/GwtMaterialDesign/gwt-material-demo/tree/release_2.0/src/main/java/gwt/material/design/demo/client/application/addins/datatable/table/service" display="BLOCK" target="_blank" text="Link to PersonService" />
                </m:MaterialRow>
            </m:MaterialRow>
    
            <m:MaterialRow addStyleNames="code">
                <m:MaterialTitle scrollspy="row_selection" title="Row Selection Design" description="With Row Selection, you can easily track how many rows have you selected into the datatable. See the infinite view and select rows for a demo."/>
                <demo:PrettyPre addStyleNames="lang-java">
                    &emsp;// Setup table row selection handler then call updateSelectedRows(). <br/>
                    table.addRowSelectHandler((e, model, elem, selected) -> { <br/>
                    &emsp;updateSelectedRows(table.getSelectedRowModels(false).size()); <br/>
                    &emsp;GWT.log(model.getId() + ": " + selected); <br/>
                    &emsp;return true; <br/>
                    });
                </demo:PrettyPre>
                
                <demo:PrettyPre addStyleNames="lang-java">
                    &emsp;private void updateSelectedRows(int size) { <br/>
                    &emsp;String word = " item "; <br/>
                    &emsp;if(size > 1) { <br/>
                    &emsp;&emsp;word = " items "; <br/>
                    &emsp;} <br/>
                    &emsp;if(size &lt;= 0) { <br/>
                    &emsp;&emsp;table.getTableTitle().setText("Table Title"); <br/>
                    &emsp;&emsp;table.getScaffolding().getTopPanel().removeStyleName("active-header"); <br/>
                    &emsp;}else { <br/>
                    &emsp;&emsp;table.getScaffolding().getTopPanel().addStyleName("active-header"); <br/>
                    &emsp;&emsp;table.getTableTitle().setText(size + word + "selected "); <br/>
                    &emsp;} <br/>
                    }
                </demo:PrettyPre>
            </m:MaterialRow>
    
            <m:MaterialRow addStyleNames="code">
                <m:MaterialTitle scrollspy="data_pager" title="Pager" description="We developed a pager embeded component to data table to provide a better pagination into your data set." />
                <m:MaterialPanel ui:field="pagedTable" />
                <g:HTMLPanel>
                    <blockquote>
                        <p><b>getCurrentPage() - </b>Get the current page.</p>
                        <p><b>getNumPages() - </b>Get Total number of pages</p>
                        <p><b>next() - </b>Go to next page</p>
                        <p><b>previous() - </b>Go to Previos page</p>
                        <p><b>firstPage() - </b>Go to First page</p>
                        <p><b>lastPage() - </b>Go to Last page</p>
                        <p><b>useRowCountOptions="false" - </b>Disable the number of rows selection</p>
                        <p><b></b></p>
                        <p><b></b></p>
                        <p><b></b></p>
                    </blockquote>
                </g:HTMLPanel>
                <demo:PrettyPre marginTop="40" addStyleNames="lang-java">
                    &emsp;// Declare your Pager <br/>
                    private MaterialDataPager pager; <br/>
                    // Set how many visible rows will contain the datatable. <br/>
                    table.setVisibleRange(1, 10); <br/>
                    // Pass your data table and your datasource ( List&lt;Person> ) <br/>
                    pager = new MaterialDataPager&lt;>(table, dataSource); <br/>
                    // Pager will build a selection of choices on how many number of rows should be displayed on the table <br/>
                    pager.setRowCountOptions(5, 10, 15, 20); <br/>
                    // Then add your pager into your data table <br/>
                    table.add(pager);
                </demo:PrettyPre>
            </m:MaterialRow>
    
            <m:MaterialRow addStyleNames="code">
                <m:MaterialTitle scrollspy="context_menu" title="Context Menu" description="Using the addin component PopupMenu, we can easily integrate it to our MaterialDataTable." />
                <m:MaterialPanel ui:field="contextMenuTable" />
                <demo:PrettyPre marginTop="40" addStyleNames="lang-xml">
                    &emsp;&lt;!-- Declaration of Popupmenu Addins--><br/>
                    &lt;ma:popupmenu.MaterialPopupMenu ui:field="popupMenu"><br/>
                    &emsp;&lt;m:MaterialLink padding="12" display="BLOCK" text="Copy" iconType="CONTENT_COPY" textColor="black"/><br/>
                    &emsp;&lt;m:MaterialLink padding="12" display="BLOCK" text="Paste" iconType="CONTENT_PASTE" textColor="black"/><br/>
                    &emsp;&lt;m:MaterialLink padding="12" display="BLOCK" text="Rename" iconType="EDIT" textColor="black"/><br/><br/>
    
                    &emsp;&lt;!-- Second level --><br/>
                    &emsp;&lt;m:MaterialLink activates="moveTo" padding="12" display="BLOCK" text="Move To ..." iconType="MOVE_TO_INBOX" textColor="black" ><br/>
                    &emsp;&emsp;&lt;m:MaterialDropDown activator="moveTo" hover="true" belowOrigin="true"><br/>
                    &emsp;&emsp;&emsp;&lt;m:MaterialLink padding="12" display="BLOCK" text="Private" iconType="CONTENT_COPY" textColor="black"/><br/>
                    &emsp;&emsp;&emsp;&lt;m:MaterialLink padding="12" display="BLOCK" text="Public" iconType="CONTENT_PASTE" textColor="black"/><br/>
                    &emsp;&emsp;&emsp;&lt;m:MaterialLink padding="12" display="BLOCK" text="Shared" iconType="EDIT" textColor="black"/><br/><br/>
    
                    &emsp;&emsp;&emsp;&emsp;&lt;!-- Third level --><br/>
                    &emsp;&emsp;&emsp;&emsp;&lt;m:MaterialLink activates="others" padding="12" display="BLOCK" text="Others" iconType="DEVICES_OTHER" textColor="black" ><br/>
                    &emsp;&emsp;&emsp;&emsp;&emsp;&lt;m:MaterialDropDown activator="others" hover="true" belowOrigin="true"><br/>
                    &emsp;&emsp;&emsp;&emsp;&emsp;&lt;m:MaterialLink padding="12" display="BLOCK" iconColor="purple" text="Phone" iconType="PHONE" textColor="black"/><br/>
                    &emsp;&emsp;&emsp;&emsp;&emsp;&lt;m:MaterialLink padding="12" display="BLOCK" iconColor="green" text="Tablet" iconType="TABLET" textColor="black"/><br/>
                    &emsp;&emsp;&emsp;&emsp;&emsp;&lt;m:MaterialLink padding="12" display="BLOCK" iconColor="blue" text="Laptop" iconType="LAPTOP" textColor="black"/><br/>
                    &emsp;&emsp;&emsp;&emsp;&lt;/m:MaterialDropDown><br/>
                    &emsp;&emsp;&emsp;&lt;/m:MaterialLink><br/><br/>
    
                    &emsp;&emsp;&lt;/m:MaterialDropDown><br/>
                    &emsp;&lt;/m:MaterialLink><br/>
                    &lt;/ma:popupmenu.MaterialPopupMenu><br/>
                </demo:PrettyPre>
                
                <demo:PrettyPre addStyleNames="lang-java">
                    table.addRowContextMenuHandler((e, mouseEvent, model, row) -> { <br/>
                        &emsp;// Firing Row Context will automatically select the row where it was right clicked <br/>
                        table.selectRow($(row).asElement(), true); <br/>
                        popupMenu.setSelected(model); <br/>
                        // Get the PageX and getPageY to set the popupmenu position <br/>
                        popupMenu.setPopupPosition(mouseEvent.getPageX(), mouseEvent.getPageY()); <br/>
                        popupMenu.open(); <br/>
                        return true; <br/>
                    });
                </demo:PrettyPre>
            </m:MaterialRow>
        </m:MaterialColumn>
        <m:MaterialColumn ui:field="menuPanel" grid="s3" />
    </m:MaterialRow>
</ui:UiBinder>
