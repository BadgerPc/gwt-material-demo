$wnd.gwtmaterialdemo.runAsyncCallback3("var $intern_120 = 1.5707963267948966;\nfunction $setFontSize_0(this$static){\n  $setFontSize_2((!this$static.fontSizeMixin_0 && (this$static.fontSizeMixin_0 = new FontSizeMixin(this$static)) , this$static.fontSizeMixin_0), '2em');\n}\n\nfunction $clinit_MaterialCircularProgress(){\n  $clinit_MaterialCircularProgress = emptyMethod;\n  !startupState && (startupState = new StartupState$DebugState);\n  if (startupState) {\n    $clinit_MaterialDesignBase();\n    injectJs(($clinit_MaterialCircularProgressDebugClientBundle_default_InlineClientBundleGenerator$circularProgressDebugJsInitializer() , circularProgressDebugJs), false, true);\n    injectCss(($clinit_MaterialCircularProgressDebugClientBundle_default_InlineClientBundleGenerator$circularProgressDebugCssInitializer() , circularProgressDebugCss));\n  }\n   else {\n    $clinit_MaterialDesignBase();\n    injectJs(($clinit_MaterialCircularProgressClientBundle_default_InlineClientBundleGenerator$circularProgressJsInitializer() , circularProgressJs), true, false);\n    injectCss(($clinit_MaterialCircularProgressClientBundle_default_InlineClientBundleGenerator$circularProgressCssInitializer() , circularProgressCss));\n  }\n}\n\nfunction $build_2(this$static){\n  $setHeight_0(this$static.lblText, this$static.size_0 + 'px');\n  $getElement(this$static.lblText).style['lineHeight'] = this$static.size_0 + ($clinit_Style$Unit() , 'px');\n  $add_9(this$static, this$static.lblText);\n}\n\nfunction $lambda$0_2(this$static, progress_1, step_2){\n  $clinit_CircularProgressEvent();\n  $fireEvent_0(this$static, new CircularProgressEvent((checkNotNull(castToDouble(progress_1)) , checkNotNull(castToDouble(step_2)))));\n  return $clinit_Boolean() , $clinit_Boolean() , true;\n}\n\nfunction $lambda$2_1(this$static){\n  $clinit_CompleteEvent();\n  $fireEvent_0(this$static, new CompleteEvent_0);\n  return $clinit_Boolean() , $clinit_Boolean() , true;\n}\n\nfunction $setEmptyFillColor(this$static, emptyFillColor){\n  this$static.emptyFillColor = emptyFillColor;\n}\n\nfunction $setFillColor(this$static, fillColor){\n  this$static.fillColor = fillColor;\n}\n\nfunction $setValue_6(this$static){\n  this$static.value_0 = 0.5;\n  this$static.initialize && $wnd.$(($clinit_DOM() , this$static.element_0)).circleProgress('value', 0.5);\n}\n\nfunction MaterialCircularProgress(){\n  $clinit_MaterialCircularProgress();\n  MaterialWidget_1.call(this, $doc.createElement('div'), stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_3, 2, 6, ['circular-progress']));\n  this.value_0 = 0;\n  this.size_0 = 100;\n  this.thickness = 8;\n  this.startAngle = $intern_1;\n  this.fillColor = ($clinit_Color() , BLUE);\n  this.emptyFillColor = GREY_LIGHTEN_2;\n  this.lblText = new Span;\n}\n\ndefineClass(195, 25, $intern_61, MaterialCircularProgress);\n_.build = function build_1(){\n  $build_2(this);\n}\n;\n_.initialize_0 = function initialize_3(){\n  var options;\n  options = new $wnd.Object;\n  options.value = this.value_0;\n  options.fill = setupComputedBackgroundColor(this.fillColor);\n  options.emptyFill = setupComputedBackgroundColor(this.emptyFillColor);\n  options.size = this.size_0;\n  options.thickness = this.thickness;\n  options.startAngle = this.startAngle;\n  options.reverse = this.reverse;\n  $wnd.$(($clinit_DOM() , this.element_0)).on('circle-animation-progress', makeLambdaFunction(MaterialCircularProgress$lambda$0$Type.prototype.call_0, MaterialCircularProgress$lambda$0$Type, [this]));\n  $wnd.$(this.element_0).on('circle-animation-start', makeLambdaFunction(MaterialCircularProgress$lambda$1$Type.prototype.call_3, MaterialCircularProgress$lambda$1$Type, [this]));\n  $wnd.$(this.element_0).on('circle-animation-end', makeLambdaFunction(MaterialCircularProgress$lambda$2$Type.prototype.call_3, MaterialCircularProgress$lambda$2$Type, [this]));\n  $wnd.$(this.element_0).circleProgress(options);\n}\n;\n_.onLoad = function onLoad_9(){\n  $onLoad_0(this);\n  $build_2(this);\n}\n;\n_.onUnload = function onUnload_5(){\n  this.initialize = false;\n  $wnd.$(($clinit_DOM() , this.element_0)).off('circle-animation-start');\n  $wnd.$(this.element_0).off('circle-animation-progress');\n  $wnd.$(this.element_0).off('circle-animation-end');\n}\n;\n_.reverse = false;\n_.size_0 = 0;\n_.startAngle = 0;\n_.thickness = 0;\n_.value_0 = 0;\nvar Lgwt_material_design_addins_client_circularprogress_MaterialCircularProgress_2_classLit = createForClass('gwt.material.design.addins.client.circularprogress', 'MaterialCircularProgress', 195);\nfunction MaterialCircularProgress$lambda$0$Type($$outer_0){\n  this.$$outer_0 = $$outer_0;\n}\n\ndefineClass(2725, $wnd.Function, {}, MaterialCircularProgress$lambda$0$Type);\n_.call_0 = function call_5(arg0, arg1, arg2){\n  return $lambda$0_2(this.$$outer_0, arg1, arg2);\n}\n;\nfunction MaterialCircularProgress$lambda$1$Type($$outer_0){\n  this.$$outer_0 = $$outer_0;\n}\n\ndefineClass(2726, $wnd.Function, {}, MaterialCircularProgress$lambda$1$Type);\n_.call_3 = function call_6(arg0, arg1){\n  return $clinit_StartEvent() , $fireEvent_0(this.$$outer_0, new StartEvent) , $clinit_Boolean() , $clinit_Boolean() , true;\n}\n;\nfunction MaterialCircularProgress$lambda$2$Type($$outer_0){\n  this.$$outer_0 = $$outer_0;\n}\n\ndefineClass(2727, $wnd.Function, {}, MaterialCircularProgress$lambda$2$Type);\n_.call_3 = function call_7(arg0, arg1){\n  return $lambda$2_1(this.$$outer_0);\n}\n;\nvar circularProgressCss, circularProgressJs;\nfunction MaterialCircularProgressClientBundle_default_InlineClientBundleGenerator$1(){\n}\n\ndefineClass(2451, 1, {}, MaterialCircularProgressClientBundle_default_InlineClientBundleGenerator$1);\n_.getName = function getName_16(){\n  return 'circularProgressCss';\n}\n;\n_.getText = function getText_15(){\n  return '.circular-progress{position:relative}.circular-progress span:nth-child(2){position:absolute;top:0;text-align:center;left:0;width:100%}.col.circular-progress{padding:0}';\n}\n;\nvar Lgwt_material_design_addins_client_circularprogress_MaterialCircularProgressClientBundle_1default_1InlineClientBundleGenerator$1_2_classLit = createForClass('gwt.material.design.addins.client.circularprogress', 'MaterialCircularProgressClientBundle_default_InlineClientBundleGenerator/1', 2451);\nfunction MaterialCircularProgressClientBundle_default_InlineClientBundleGenerator$2(){\n}\n\ndefineClass(2452, 1, {}, MaterialCircularProgressClientBundle_default_InlineClientBundleGenerator$2);\n_.getName = function getName_17(){\n  return 'circularProgressJs';\n}\n;\n_.getText = function getText_16(){\n  return '/**\\n * jquery-circle-progress - jQuery Plugin to draw animated circular progress bars:\\n * {@link http://kottenator.github.io/jquery-circle-progress/}\\n *\\n * @author Rostyslav Bryzgunov <kottenator@gmail.com>\\n * @version 1.2.0\\n * @licence MIT\\n * @preserve\\n */\\n!function(i){\"function\"==typeof define&&define.amd?define([\"jquery\"],i):\"object\"==typeof module&&module.exports?module.exports=function(t,e){return void 0===e&&(e=\"undefined\"!=typeof window?require(\"jquery\"):require(\"jquery\")(t)),i(e),e}:i(jQuery)}(function(i){function t(i){this.init(i)}t.prototype={value:0,size:100,startAngle:-Math.PI,thickness:\"auto\",fill:{gradient:[\"#3aeabb\",\"#fdd250\"]},emptyFill:\"rgba(0, 0, 0, .1)\",animation:{duration:1200,easing:\"circleProgressEasing\"},animationStartValue:0,reverse:!1,lineCap:\"butt\",insertMode:\"prepend\",constructor:t,el:null,canvas:null,ctx:null,radius:0,arcFill:null,lastFrameValue:0,init:function(t){i.extend(this,t),this.radius=this.size/2,this.initWidget(),this.initFill(),this.draw(),this.el.trigger(\"circle-inited\")},initWidget:function(){this.canvas||(this.canvas=i(\"<canvas>\")[\"prepend\"==this.insertMode?\"prependTo\":\"appendTo\"](this.el)[0]);var t=this.canvas;if(t.width=this.size,t.height=this.size,this.ctx=t.getContext(\"2d\"),window.devicePixelRatio>1){var e=window.devicePixelRatio;t.style.width=t.style.height=this.size+\"px\",t.width=t.height=this.size*e,this.ctx.scale(e,e)}},initFill:function(){function t(){var t=i(\"<canvas>\")[0];t.width=e.size,t.height=e.size,t.getContext(\"2d\").drawImage(g,0,0,r,r),e.arcFill=e.ctx.createPattern(t,\"no-repeat\"),e.drawFrame(e.lastFrameValue)}var e=this,a=this.fill,n=this.ctx,r=this.size;if(!a)throw Error(\"The fill is not specified!\");if(\"string\"==typeof a&&(a={color:a}),a.color&&(this.arcFill=a.color),a.gradient){var s=a.gradient;if(1==s.length)this.arcFill=s[0];else if(s.length>1){for(var o=a.gradientAngle||0,l=a.gradientDirection||[r/2*(1-Math.cos(o)),r/2*(1+Math.sin(o)),r/2*(1+Math.cos(o)),r/2*(1-Math.sin(o))],h=n.createLinearGradient.apply(n,l),c=0;c<s.length;c++){var d=s[c],u=c/(s.length-1);i.isArray(d)&&(u=d[1],d=d[0]),h.addColorStop(u,d)}this.arcFill=h}}if(a.image){var g;a.image instanceof Image?g=a.image:(g=new Image,g.src=a.image),g.complete?t():g.onload=t}},draw:function(){this.animation?this.drawAnimated(this.value):this.drawFrame(this.value)},drawFrame:function(i){this.lastFrameValue=i,this.ctx.clearRect(0,0,this.size,this.size),this.drawEmptyArc(i),this.drawArc(i)},drawArc:function(i){if(0!==i){var t=this.ctx,e=this.radius,a=this.getThickness(),n=this.startAngle;t.save(),t.beginPath(),this.reverse?t.arc(e,e,e-a/2,n-2*Math.PI*i,n):t.arc(e,e,e-a/2,n,n+2*Math.PI*i),t.lineWidth=a,t.lineCap=this.lineCap,t.strokeStyle=this.arcFill,t.stroke(),t.restore()}},drawEmptyArc:function(i){var t=this.ctx,e=this.radius,a=this.getThickness(),n=this.startAngle;i<1&&(t.save(),t.beginPath(),i<=0?t.arc(e,e,e-a/2,0,2*Math.PI):this.reverse?t.arc(e,e,e-a/2,n,n-2*Math.PI*i):t.arc(e,e,e-a/2,n+2*Math.PI*i,n),t.lineWidth=a,t.strokeStyle=this.emptyFill,t.stroke(),t.restore())},drawAnimated:function(t){var e=this,a=this.el,n=i(this.canvas);n.stop(!0,!1),a.trigger(\"circle-animation-start\"),n.css({animationProgress:0}).animate({animationProgress:1},i.extend({},this.animation,{step:function(i){var n=e.animationStartValue*(1-i)+t*i;e.drawFrame(n),a.trigger(\"circle-animation-progress\",[i,n])}})).promise().always(function(){a.trigger(\"circle-animation-end\")})},getThickness:function(){return i.isNumeric(this.thickness)?this.thickness:this.size/14},getValue:function(){return this.value},setValue:function(i){this.animation&&(this.animationStartValue=this.lastFrameValue),this.value=i,this.draw()}},i.circleProgress={defaults:t.prototype},i.easing.circleProgressEasing=function(i,t,e,a,n){return(t/=n/2)<1?a/2*t*t*t+e:a/2*((t-=2)*t*t+2)+e},i.fn.circleProgress=function(e,a){var n=\"circle-progress\",r=this.data(n);if(\"widget\"==e){if(!r)throw Error(\\'Calling \"widget\" method on not initialized instance is forbidden\\');return r.canvas}if(\"value\"==e){if(!r)throw Error(\\'Calling \"value\" method on not initialized instance is forbidden\\');if(\"undefined\"==typeof a)return r.getValue();var s=arguments[1];return this.each(function(){i(this).data(n).setValue(s)})}return this.each(function(){var a=i(this),r=a.data(n),s=i.isPlainObject(e)?e:{};if(r)r.init(s);else{var o=i.extend({},a.data());\"string\"==typeof o.fill&&(o.fill=JSON.parse(o.fill)),\"string\"==typeof o.animation&&(o.animation=JSON.parse(o.animation)),s=i.extend(o,s),s.el=a,r=new t(s),a.data(n,r)}})}});';\n}\n;\nvar Lgwt_material_design_addins_client_circularprogress_MaterialCircularProgressClientBundle_1default_1InlineClientBundleGenerator$2_2_classLit = createForClass('gwt.material.design.addins.client.circularprogress', 'MaterialCircularProgressClientBundle_default_InlineClientBundleGenerator/2', 2452);\nfunction $clinit_MaterialCircularProgressClientBundle_default_InlineClientBundleGenerator$circularProgressCssInitializer(){\n  $clinit_MaterialCircularProgressClientBundle_default_InlineClientBundleGenerator$circularProgressCssInitializer = emptyMethod;\n  circularProgressCss = new MaterialCircularProgressClientBundle_default_InlineClientBundleGenerator$1;\n}\n\nfunction $clinit_MaterialCircularProgressClientBundle_default_InlineClientBundleGenerator$circularProgressJsInitializer(){\n  $clinit_MaterialCircularProgressClientBundle_default_InlineClientBundleGenerator$circularProgressJsInitializer = emptyMethod;\n  circularProgressJs = new MaterialCircularProgressClientBundle_default_InlineClientBundleGenerator$2;\n}\n\nvar circularProgressDebugCss, circularProgressDebugJs;\nfunction MaterialCircularProgressDebugClientBundle_default_InlineClientBundleGenerator$1(){\n}\n\ndefineClass(2449, 1, {}, MaterialCircularProgressDebugClientBundle_default_InlineClientBundleGenerator$1);\n_.getName = function getName_18(){\n  return 'circularProgressDebugCss';\n}\n;\n_.getText = function getText_17(){\n  return '.circular-progress {\\n    position: relative;\\n}\\n\\n.circular-progress span:nth-child(2) {\\n    position: absolute;\\n    top: 0;\\n    text-align: center;\\n    left: 0px;\\n    width: 100%;\\n}\\n\\n.col.circular-progress {\\n    padding: 0px;\\n}';\n}\n;\nvar Lgwt_material_design_addins_client_circularprogress_MaterialCircularProgressDebugClientBundle_1default_1InlineClientBundleGenerator$1_2_classLit = createForClass('gwt.material.design.addins.client.circularprogress', 'MaterialCircularProgressDebugClientBundle_default_InlineClientBundleGenerator/1', 2449);\nfunction MaterialCircularProgressDebugClientBundle_default_InlineClientBundleGenerator$2(){\n}\n\ndefineClass(2450, 1, {}, MaterialCircularProgressDebugClientBundle_default_InlineClientBundleGenerator$2);\n_.getName = function getName_19(){\n  return 'circularProgressDebugJs';\n}\n;\n_.getText = function getText_18(){\n  var builder;\n  builder = new StringBuilder;\n  builder.string += \"/**\\n * jquery-circle-progress - jQuery Plugin to draw animated circular progress bars:\\n * {@link http://kottenator.github.io/jquery-circle-progress/}\\n *\\n * @author Rostyslav Bryzgunov <kottenator@gmail.com>\\n * @version 1.2.0\\n * @licence MIT\\n * @preserve\\n */\\n// UMD factory - https://github.com/umdjs/umd/blob/d31bb6ee7098715e019f52bdfe27b3e4bfd2b97e/templates/jqueryPlugin.js\\n// Uses CommonJS, AMD or browser globals to create a jQuery plugin.\\n(function(factory) {\\n    if (typeof define === 'function' && define.amd) {\\n        // AMD. Register as an anonymous module.\\n        define(['jquery'], factory);\\n    } else if (typeof module === 'object' && module.exports) {\\n        // Node/CommonJS\\n        module.exports = function(root, jQuery) {\\n            if (jQuery === undefined) {\\n                // require('jQuery') returns a factory that requires window to\\n                // build a jQuery instance, we normalize how we use modules\\n                // that require this pattern but the window provided is a noop\\n                // if it's defined (how jquery works)\\n                if (typeof window !== 'undefined') {\\n                    jQuery = require('jquery');\\n                } else {\\n                    jQuery = require('jquery')(root);\\n                }\\n            }\\n            factory(jQuery);\\n            return jQuery;\\n        };\\n    } else {\\n        // Browser globals\\n        factory(jQuery);\\n    }\\n})(function($) {\\n    /**\\n     * Inner implementation of the circle progress bar.\\n     * The class is not exposed _yet_ but you can create an instance through jQuery method call.\\n     *\\n     * @param {object} config - You can customize any class member (property or method).\\n     * @class\\n     * @alias CircleProgress\\n     */\\n    function CircleProgress(config) {\\n        this.init(config);\\n    }\\n\\n    CircleProgress.prototype = {\\n        //--------------------------------------- public options ---------------------------------------\\n        /**\\n         * This is the only required option. It should be from `0.0` to `1.0`.\\n         * @type {number}\\n         * @default 0.0\\n         */\\n        value: 0.0,\\n\\n        /**\\n         * Size of the canvas in pixels.\\n         * It's a square so we need only one dimension.\\n         * @type {number}\\n         * @default 100.0\\n         */\\n        size: 100.0,\\n\\n        /**\\n         * Initial angle for `0.0` value in radians.\\n         * @type {number}\\n         * @default -Math.PI\\n         */\\n        startAngle: -Math.PI,\\n\\n        /**\\n         * Width of the arc in pixels.\\n         * If it's `'auto'` - the value is calculated as `[this.size]{@link CircleProgress#size} / 14`.\\n         * @type {number|string}\\n         * @default 'auto'\\n         */\\n        thickness: 'auto',\\n\\n        /**\\n         * Fill of the arc. You may set it to:\\n         *\\n         *   - solid color:\\n         *     - `'#3aeabb'`\\n         *     - `{ color: '#3aeabb' }`\\n         *     - `{ color: 'rgba(255, 255, 255, .3)' }`\\n         *   - linear gradient _(left to right)_:\\n         *     - `{ gradient: ['#3aeabb', '#fdd250'], gradientAngle: Math.PI / 4 }`\\n         *     - `{ gradient: ['red', 'green', 'blue'], gradientDirection: [x0, y0, x1, y1] }`\\n         *     - `{ gradient: [[\\\"red\\\", .2], [\\\"green\\\", .3], [\\\"blue\\\", .8]] }`\\n         *   - image:\\n         *     - `{ image: 'http://i.imgur.com/pT0i89v.png' }`\\n         *     - `{ image: imageObject }`\\n         *     - `{ color: 'lime', image: 'http://i.imgur.com/pT0i89v.png' }` -\\n         *       color displayed until the image is loaded\\n         *\\n         * @default {gradient: ['#3aeabb', '#fdd250']}\\n         */\\n        fill: {\\n            gradient: ['#3aeabb', '#fdd250']\\n        },\\n\\n        /**\\n         * Color of the \\\"empty\\\" arc. Only a color fill supported by now.\\n         * @type {string}\\n         * @default 'rgba(0, 0, 0, .1)'\\n         */\\n        emptyFill: 'rgba(0, 0, 0, .1)',\\n\\n        /**\\n         * jQuery Animation config.\\n         * You can pass `false` to disable the animation.\\n         * @see http://api.jquery.com/animate/\\n         * @type {object|boolean}\\n         * @default {duration: 1200, easing: 'circleProgressEasing'}\\n         */\\n        animation: {\\n            duration: 1200,\\n            easing: 'circleProgressEasing'\\n        },\\n\\n        /**\\n         * Default animation starts at `0.0` and ends at specified `value`. Let's call this _direct animation_.\\n         * If you want to make _reversed animation_ - set `animationStartValue: 1.0`.\\n         * Also you may specify any other value from `0.0` to `1.0`.\\n         * @type {number}\\n         * @default 0.0\\n         */\\n        animationStartValue: 0.0,\\n\\n        /**\\n         * Reverse animation and arc draw.\\n         * By default, the arc is filled from `0.0` to `value`, _clockwise_.\\n         * With `reverse: true` the arc is filled from `1.0` to `value`, _counter-clockwise_.\\n         * @type {boolean}\\n         * @default false\\n         */\\n        reverse: false,\\n\\n        /**\\n         * Arc line cap: `'butt'`, `'round'` or `'square'` -\\n         * [read more]{@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.lineCap}.\\n         * @type {string}\\n         * @default 'butt'\\n         */\\n        lineCap: 'butt',\\n\\n        /**\\n         * Canvas insertion mode: append or prepend it into the parent element?\\n         * @type {string}\\n         * @default 'prepend'\\n         */\\n        insertMode: 'prepend',\\n\\n        //------------------------------ protected properties and methods ------------------------------\\n        /**\\n         * Link to {@link CircleProgress} constructor.\\n         * @protected\\n         */\\n        constructor: CircleProgress,\\n\\n        /**\\n         * Container element. Should be passed into constructor config.\\n         * @protected\\n         * @type {jQuery}\\n         */\\n        el: null,\\n\\n        /**\\n         * Canvas element. Automatically generated and prepended to [this.el]{@link CircleProgress#el}.\\n         * @protected\\n         * @type {HTMLCanvasElement}\\n         */\\n        canvas: null,\\n\\n        /**\\n         * 2D-context of [this.canvas]{@link CircleProgress#canvas}.\\n         * @protected\\n         * @type {CanvasRenderingContext2D}\\n         */\\n        ctx: null,\\n\\n        /**\\n         * Radius of the outer circle. Automatically calculated as `[this.size]{@link CircleProgress#size} / 2`.\\n         * @protected\\n         * @type {number}\\n         */\\n        radius: 0.0,\\n\\n        /**\\n         * Fill of the main arc. Automatically calculated, depending on [this.fill]{@link CircleProgress#fill} option.\\n         * @protected\\n         * @type {string|CanvasGradient|CanvasPattern}\\n         */\\n        arcFill: null,\\n\\n        /**\\n         * Last rendered frame value.\\n         * @protected\\n         * @type {number}\\n         */\\n        lastFrameValue: 0.0,\\n\\n        /**\\n         * Init/re-init the widget.\\n         *\\n         * Throws a jQuery event:\\n         *\\n         * - `circle-inited(jqEvent)`\\n         *\\n         * @param {object} config - You can customize any class member (property or method).\\n         */\\n        init: function(config) {\\n            $.extend(this, config);\\n            this.radius = this.size / 2;\\n            this.initWidget();\\n            this.initFill();\\n            this.draw();\\n            this.el.trigger('circle-inited');\\n        },\\n\\n        /**\\n         * Initialize `<canvas>`.\\n         * @protected\\n         */\\n        initWidget: function() {\\n            if (!this.canvas)\\n                this.canvas = $('<canvas>')[this.insertMode == 'prepend' ? 'prependTo' : 'appendTo'](this.el)[0];\\n\\n            var canvas = this.canvas;\\n            canvas.width = this.size;\\n            canvas.height = this.size;\\n            this.ctx = canvas.getContext('2d');\\n\\n            if (window.devicePixelRatio > 1) {\\n                var scaleBy = window.devicePixelRatio;\\n                canvas.style.width = canvas.style.height = this.size + 'px';\\n                canvas.width = canvas.height = this.size * scaleBy;\\n                this.ctx.scale(scaleBy, scaleBy);\\n            }\\n        },\\n\\n        /**\\n         * This method sets [this.arcFill]{@link CircleProgress#arcFill}.\\n         * It could do this async (on image load).\\n         * @protected\\n         */\\n        initFill: function() {\\n            var self = this,\\n                fill = this.fill,\\n                ctx = this.ctx,\\n                size = this.size;\\n\\n            if (!fill)\\n                throw Error(\\\"The fill is not specified!\\\");\\n\\n            if (typeof fill == 'string')\\n                fill = {color: fill};\\n\\n            if (fill.color)\\n                this.arcFill = fill.color;\\n\\n            if (fill.gradient) {\\n                var gr = fill.gradient;\\n\\n                if (gr.length == 1) {\\n                    this.arcFill = gr[0];\\n                } else if (gr.length > 1) {\\n                    var ga = fill.gradientAngle || 0, // gradient direction angle; 0 by default\\n                        gd = fill.gradientDirection || [\\n                                size / 2 * (1 - Math.cos(ga)), // x0\\n                                size / 2 * (1 + Math.sin(ga)), // y0\\n                                size / 2 * (1 + Math.cos(ga)), // x1\\n                                size / 2 * (1 - Math.sin(ga))  // y1\\n                            ];\\n\\n                    var lg = ctx.createLinearGradient.apply(ctx, gd);\\n\\n                    for (var i = 0; i < gr.length; i++) {\\n                        var color = gr[i],\\n                            pos = i / (gr.length - 1);\\n\\n                        if ($.isArray(color)) {\\n                            pos = color[1];\\n                            color = color[0];\\n                        }\\n\\n                        lg.addColorStop(pos, color);\\n                    }\\n\\n                    this.arcFill = lg;\\n                }\\n            }\\n\\n            if (fill.image) {\\n                var img;\\n\\n                if (fill.image instanceof Image) {\\n                    img = fill.image;\\n                } else {\\n                    img = new Image();\\n                    img.src = fill.image;\\n                }\\n\\n                if (img.complete)\\n                    setImageFill();\\n                else\\n                    img.onload = setImageFill;\\n            }\\n\\n            function setImageFill() {\\n                var bg = $('<canvas>')[0];\\n                bg.width = self.size;\\n                bg.height = self.size;\\n                bg.getContext('2d').drawImage(img, 0, 0, size, size);\\n                self.arcFill = self.ctx.createPattern(bg, 'no-repeat');\\n                self.drawFrame(self.lastFrameValue);\\n            }\\n        },\\n\\n        /**\\n         * Draw the circle.\\n         * @protected\\n         */\\n        draw: function() {\\n            if (this.animation)\\n                this.drawAnimated(this.value);\\n            else\\n                this.drawFrame(this.value);\\n        },\\n\\n        /**\\n         * Draw a single animation frame.\\n         * @protected\\n         * @param {number} v - Frame value.\\n         */\\n        drawFrame: function(v) {\\n            this.lastFrameValue = v;\\n            this.ctx.clearRect(0, 0, this.size, this.size);\\n            this.drawEmptyArc(v);\\n            this.drawArc(v);\\n        },\\n\\n        /**\\n         * Draw the arc (part of the circle).\\n         * @protected\\n         * @param {number} v - Frame value.\\n         */\\n        drawArc: function(v) {\\n            if (v === 0)\\n                return;\\n\\n            var ctx = this.ctx,\\n                r = this.radius,\\n                t = this.getThickness(),\\n                a = this.startAngle;\\n\\n            ctx.save();\\n            ctx.beginPath();\\n\\n            if (!this.reverse) {\\n                ctx.arc(r, r, r - t / 2, a, a + Math.PI * 2 * v);\\n            } else {\\n                ctx.arc(r, r, r - t / 2, a - Math.PI * 2 * v, a);\\n            }\\n\\n            ctx.lineWidth = t;\\n            ctx.lineCap = this.lineCap;\\n            ctx.strokeStyle = this.arcFill;\\n            ctx.stroke();\\n            ctx.restore();\\n        },\\n\\n        /**\\n         * Draw the _empty (background)_ arc (part of the circle).\\n         * @protected\\n         * @param {number} v - Frame value.\\n         */\\n        drawEmptyArc: function(v) {\\n            var ctx = this.ctx,\\n                r = this.radius,\\n                t = this.getThickness(),\\n                a = this.startAngle;\\n\\n            if (v < 1) {\\n                ctx.save();\\n                ctx.beginPath();\\n\\n                if (v <= 0) {\\n                    ctx.arc(r, r, r - t / 2, 0, Math.PI * 2);\\n                } else {\\n                    if (!this.reverse) {\\n                        ctx.arc(r, r, r - t / 2, a + Math.PI * 2 * v, a);\\n                    } else {\\n                        ctx.arc(r, r, r - t / 2, a, a - Math.PI * 2 * v);\\n                    }\\n                }\\n\\n                ctx.lineWidth = t;\\n                ctx.strokeStyle = this.emptyFill;\\n                ctx.stroke();\\n                ctx.restore();\\n            }\\n        },\\n\\n        /**\\n         * Animate the progress bar.\\n         *\\n         * Throws 3 jQuery events:\\n         *\\n         * - `circle-animation-start(jqEvent)`\\n         * - `circle-animation-progress(jqEvent, animationProgress, stepValue)` - multiple event\\n         *   animationProgress: from `0.0` to `1.0`; stepValue: from `0.0` to `value`\\n         * - `circle-animation-end(jqEvent)`\\n         *\\n         * @protected\\n         * @param {number} v - Final value.\\n         */\\n        drawAnimated: function(v) {\\n            var self = this,\\n                el = this.el,\\n                canvas = $(this.canvas);\\n\\n            // stop previous animation before new \\\"start\\\" event is triggered\\n            canvas.stop(true, false);\\n            el.trigger('circle-animation-start');\\n\\n            canvas\\n                .css({animationProgress: 0})\\n                .animate({animationProgress: 1}, $.extend({}, this.animation, {\\n                    step: function(animationProgress) {\\n                        var stepValue = self.animationStartValue * (1 - animationProgress) + v * animationProgress;\\n                        self.drawFrame(stepValue);\\n                        el.trigger('circle-animation-progress', [animationProgress, stepValue]);\\n                    }\\n                }))\\n                .promise()\\n                .always(function() {\\n                    // trigger on both successful & failure animation end\\n                    el.trigger('circle-animation-end');\\n                });\\n        },\\n\\n        /**\\n         * Get the circle thickness.\\n         * @see CircleProgress#thickness\\n         * @protected\\n         * @returns {number}\\n         */\\n        getThickness: function() {\\n            return $.isNumeric(this.thickness) ? this.thickness : this.size / 14;\\n        },\\n\\n        /**\\n         * Get current value.\\n         * @protected\\n         * @return {number}\\n         */\\n        getValue: function() {\\n            return this.value;\\n        },\\n\\n        /**\\n         * Set current value (with smooth animation transition).\\n         * @protected\\n         * @param {number} newValue\\n         */\\n        setValue: function(newValue) {\\n            if (this.animation)\\n                this.animationStartValue = this.lastFrameValue;\\n            this.value = newValue;\\n            this.draw();\\n        }\\n    };\\n\\n    //----------------------------------- Initiating jQuery plugin -----------------------------------\\n    $.circleProgress = {\\n        // Default options (you may override them)\\n        defaults: CircleProgress.prototype\\n    };\\n\\n    // ease-in-out-cubic\\n    $.easing.circleProgressEasing = function(x, t, b, c, d) {\\n        if ((t /= d / 2) < 1)\\n            return c / 2 * t * t * t + b;\\n        return c / 2 * ((t -= 2) * t * t + 2) + b;\\n    };\\n\\n    /**\\n     * Creates an instance of {@link CircleProgress}.\\n     * Produces [init event]{@link CircleProgress#init} and [animation events]{@link CircleProgress#drawAnimated}.\\n     *\\n     * @param {object} [configOrCommand] - Config object or command name.\\n     *\\n     * Config example (you can specify any {@link CircleProgress} property):\\n     *\\n     * ```js\\n     * { value: 0.75, size: 50, animation: false }\\n     * ```\\n     *\\n     * Commands:\\n     *\\n     * ```js\\n     * el.circleProgress('widget'); // get the <canvas>\\n     * el.circleProgress('value'); // get the value\\n     * el.circleProgress('value', newVa\";\n  builder.string += \"lue); // update the value\\n     * el.circleProgress('redraw'); // redraw the circle\\n     * el.circleProgress(); // the same as 'redraw'\\n     * ```\\n     *\\n     * @param {string} [commandArgument] - Some commands (like `'value'`) may require an argument.\\n     * @see CircleProgress\\n     * @alias \\\"$(...).circleProgress\\\"\\n     */\\n    $.fn.circleProgress = function(configOrCommand, commandArgument) {\\n        var dataName = 'circle-progress',\\n            firstInstance = this.data(dataName);\\n\\n        if (configOrCommand == 'widget') {\\n            if (!firstInstance)\\n                throw Error('Calling \\\"widget\\\" method on not initialized instance is forbidden');\\n            return firstInstance.canvas;\\n        }\\n\\n        if (configOrCommand == 'value') {\\n            if (!firstInstance)\\n                throw Error('Calling \\\"value\\\" method on not initialized instance is forbidden');\\n            if (typeof commandArgument == 'undefined') {\\n                return firstInstance.getValue();\\n            } else {\\n                var newValue = arguments[1];\\n                return this.each(function() {\\n                    $(this).data(dataName).setValue(newValue);\\n                });\\n            }\\n        }\\n\\n        return this.each(function() {\\n            var el = $(this),\\n                instance = el.data(dataName),\\n                config = $.isPlainObject(configOrCommand) ? configOrCommand : {};\\n\\n            if (instance) {\\n                instance.init(config);\\n            } else {\\n                var initialConfig = $.extend({}, el.data());\\n                if (typeof initialConfig.fill == 'string')\\n                    initialConfig.fill = JSON.parse(initialConfig.fill);\\n                if (typeof initialConfig.animation == 'string')\\n                    initialConfig.animation = JSON.parse(initialConfig.animation);\\n                config = $.extend(initialConfig, config);\\n                config.el = el;\\n                instance = new CircleProgress(config);\\n                el.data(dataName, instance);\\n            }\\n        });\\n    };\\n});\";\n  return builder.string;\n}\n;\nvar Lgwt_material_design_addins_client_circularprogress_MaterialCircularProgressDebugClientBundle_1default_1InlineClientBundleGenerator$2_2_classLit = createForClass('gwt.material.design.addins.client.circularprogress', 'MaterialCircularProgressDebugClientBundle_default_InlineClientBundleGenerator/2', 2450);\nfunction $clinit_MaterialCircularProgressDebugClientBundle_default_InlineClientBundleGenerator$circularProgressDebugCssInitializer(){\n  $clinit_MaterialCircularProgressDebugClientBundle_default_InlineClientBundleGenerator$circularProgressDebugCssInitializer = emptyMethod;\n  circularProgressDebugCss = new MaterialCircularProgressDebugClientBundle_default_InlineClientBundleGenerator$1;\n}\n\nfunction $clinit_MaterialCircularProgressDebugClientBundle_default_InlineClientBundleGenerator$circularProgressDebugJsInitializer(){\n  $clinit_MaterialCircularProgressDebugClientBundle_default_InlineClientBundleGenerator$circularProgressDebugJsInitializer = emptyMethod;\n  circularProgressDebugJs = new MaterialCircularProgressDebugClientBundle_default_InlineClientBundleGenerator$2;\n}\n\nfunction $clinit_CircularProgressEvent(){\n  $clinit_CircularProgressEvent = emptyMethod;\n  TYPE_37 = new GwtEvent$Type;\n}\n\nfunction $dispatch_10(this$static, handler){\n  lambda$2_0(handler.progress_0, this$static);\n}\n\nfunction CircularProgressEvent(step){\n  $clinit_CircularProgressEvent();\n  this.step = step;\n}\n\ndefineClass(1118, $intern_17, {}, CircularProgressEvent);\n_.dispatch = function dispatch_38(handler){\n  $dispatch_10(this, castTo(handler, 2636));\n}\n;\n_.getAssociatedType = function getAssociatedType_39(){\n  return TYPE_37;\n}\n;\n_.step = 0;\nvar TYPE_37;\nvar Lgwt_material_design_addins_client_circularprogress_events_CircularProgressEvent_2_classLit = createForClass('gwt.material.design.addins.client.circularprogress.events', 'CircularProgressEvent', 1118);\nfunction CircularProgressPresenter(eventBus, view, proxy){\n  $clinit_PresenterWidget();\n  Presenter.call(this, eventBus, view, proxy, ($clinit_ApplicationPresenter() , SLOT_MAIN));\n}\n\ndefineClass(838, 57, $intern_54, CircularProgressPresenter);\n_.onReveal = function onReveal_7(){\n  $clinit_SetPageTitleEvent();\n  $fireEvent_1(this, new SetPageTitleEvent('Circular Progress', '', 'addins/circularprogress/CircularProgressView', null));\n}\n;\nvar Lgwt_material_design_demo_client_application_addins_circularprogress_CircularProgressPresenter_2_classLit = createForClass('gwt.material.design.demo.client.application.addins.circularprogress', 'CircularProgressPresenter', 838);\nfunction $buildCircularDynamic(progress){\n  $addHandler_0(progress, new CircularProgressView$lambda$2$Type(progress), ($clinit_CircularProgressEvent() , TYPE_37));\n}\n\nfunction CircularProgressView(){\n  ViewImpl.call(this);\n  $initWidget_0(this, $build_f_MaterialPanel1_0(new CircularProgressView_BinderImpl$Widgets(this)));\n  $buildCircularDynamic(this.circLabel);\n  $buildCircularDynamic(this.circLabel2);\n  $buildCircularDynamic(this.circLabel3);\n  this.circStartAngle.startAngle = $intern_120;\n  this.circStartAngle2.startAngle = $intern_120;\n  $addHandler_0(this.circEvents, new CircularProgressView$lambda$0$Type, ($clinit_StartEvent() , TYPE_59));\n  $addHandler_0(this.circEvents, new CircularProgressView$lambda$1$Type, ($clinit_CompleteEvent() , TYPE_56));\n  $buildCircularDynamic(this.circEvents);\n}\n\nfunction lambda$2_0(progress_0, event_1){\n  var percent;\n  percent = round_int(event_1.step * 100);\n  $setText_8(progress_0.lblText, percent + '%');\n}\n\ndefineClass(1114, 60, $intern_55, CircularProgressView);\nvar Lgwt_material_design_demo_client_application_addins_circularprogress_CircularProgressView_2_classLit = createForClass('gwt.material.design.demo.client.application.addins.circularprogress', 'CircularProgressView', 1114);\nfunction CircularProgressView$lambda$0$Type(){\n}\n\ndefineClass(1115, 1, {9:1, 2635:1}, CircularProgressView$lambda$0$Type);\nvar Lgwt_material_design_demo_client_application_addins_circularprogress_CircularProgressView$lambda$0$Type_2_classLit = createForClass('gwt.material.design.demo.client.application.addins.circularprogress', 'CircularProgressView/lambda$0$Type', 1115);\nfunction CircularProgressView$lambda$1$Type(){\n}\n\ndefineClass(1116, 1, $intern_121, CircularProgressView$lambda$1$Type);\n_.onComplete_1 = function onComplete_3(arg0){\n  $toast(new MaterialToast_0(stampJavaTypeInfo(getClassLiteralForArray(Lcom_google_gwt_user_client_ui_Widget_2_classLit, 1), $intern_3, 21, 0, [])), 'Completed', $intern_67, null);\n}\n;\nvar Lgwt_material_design_demo_client_application_addins_circularprogress_CircularProgressView$lambda$1$Type_2_classLit = createForClass('gwt.material.design.demo.client.application.addins.circularprogress', 'CircularProgressView/lambda$1$Type', 1116);\nfunction CircularProgressView$lambda$2$Type(progress_0){\n  this.progress_0 = progress_0;\n}\n\ndefineClass(1117, 1, {9:1, 2636:1}, CircularProgressView$lambda$2$Type);\nvar Lgwt_material_design_demo_client_application_addins_circularprogress_CircularProgressView$lambda$2$Type_2_classLit = createForClass('gwt.material.design.demo.client.application.addins.circularprogress', 'CircularProgressView/lambda$2$Type', 1117);\nfunction $build_f_MaterialPanel1_0(this$static){\n  var f_MaterialPanel1, f_MaterialRow2, f_MaterialRow8, f_MaterialRow11, f_MaterialRow14, f_MaterialRow17, f_MaterialRow21, f_MaterialTitle3, f_circularprogress$MaterialCircularProgress4, f_circularprogress$MaterialCircularProgress5, f_circularprogress$MaterialCircularProgress6, f_PrettyPre7, sb, f_MaterialTitle9, circEvents, f_PrettyPre10, sb_0, f_MaterialTitle12, circLabel, circLabel2, circLabel3, f_PrettyPre13, sb_1, f_MaterialTitle15, circStartAngle, circStartAngle2, f_PrettyPre16, sb_2, f_MaterialTitle18, circValues, f_MaterialRow19, btnSet50, btnGetValue, f_PrettyPre20, sb_3, f_MaterialTitle22, f_circularprogress$MaterialCircularProgress23, f_PrettyPre24, sb_4, f_PrettyPre25, sb_5;\n  f_MaterialPanel1 = new MaterialPanel;\n  $add_9(f_MaterialPanel1, (f_MaterialRow2 = new MaterialRow , $add_9(f_MaterialRow2, (f_MaterialTitle3 = new MaterialTitle , $setText_12(f_MaterialTitle3.paragraph, 'You can easily set the value and design the fille color of the circular progress') , $setInnerHTML($getElement(f_MaterialTitle3.header), ($clinit_SafeHtmlUtils() , (new SafeHtmlString(htmlEscape('Basic'))).html_0)) , fire_5(f_MaterialTitle3, 'Basic') , f_MaterialTitle3)) , $add_9(f_MaterialRow2, (f_circularprogress$MaterialCircularProgress4 = new MaterialCircularProgress , $setGrid_0((!f_circularprogress$MaterialCircularProgress4.gridMixin && (f_circularprogress$MaterialCircularProgress4.gridMixin = new GridMixin(f_circularprogress$MaterialCircularProgress4)) , f_circularprogress$MaterialCircularProgress4.gridMixin), 's12 m4 l3') , f_circularprogress$MaterialCircularProgress4.value_0 = 0.3 , f_circularprogress$MaterialCircularProgress4.initialize && $wnd.$(($clinit_DOM() , f_circularprogress$MaterialCircularProgress4.element_0)).circleProgress('value', 0.3) , f_circularprogress$MaterialCircularProgress4)) , $add_9(f_MaterialRow2, (f_circularprogress$MaterialCircularProgress5 = new MaterialCircularProgress , $setFillColor(f_circularprogress$MaterialCircularProgress5, ($clinit_Color() , PURPLE)) , $setGrid_0((!f_circularprogress$MaterialCircularProgress5.gridMixin && (f_circularprogress$MaterialCircularProgress5.gridMixin = new GridMixin(f_circularprogress$MaterialCircularProgress5)) , f_circularprogress$MaterialCircularProgress5.gridMixin), 's12 m4 l3') , f_circularprogress$MaterialCircularProgress5.value_0 = 0.3 , f_circularprogress$MaterialCircularProgress5.initialize && $wnd.$(($clinit_DOM() , f_circularprogress$MaterialCircularProgress5.element_0)).circleProgress('value', 0.3) , $setEmptyFillColor(f_circularprogress$MaterialCircularProgress5, PURPLE_LIGHTEN_4) , f_circularprogress$MaterialCircularProgress5)) , $add_9(f_MaterialRow2, (f_circularprogress$MaterialCircularProgress6 = new MaterialCircularProgress , f_circularprogress$MaterialCircularProgress6.thickness = 20 , $setGrid_0((!f_circularprogress$MaterialCircularProgress6.gridMixin && (f_circularprogress$MaterialCircularProgress6.gridMixin = new GridMixin(f_circularprogress$MaterialCircularProgress6)) , f_circularprogress$MaterialCircularProgress6.gridMixin), 's12 m4 l3') , f_circularprogress$MaterialCircularProgress6.value_0 = 0.3 , f_circularprogress$MaterialCircularProgress6.initialize && $wnd.$(($clinit_DOM() , f_circularprogress$MaterialCircularProgress6.element_0)).circleProgress('value', 0.3) , f_circularprogress$MaterialCircularProgress6)) , $add_9(f_MaterialRow2, (f_PrettyPre7 = new PrettyPre , $setHTML_0(f_PrettyPre7, (sb = new StringBuilder , sb.string += '\\u2003&lt;!-- Default --&gt;<br> &lt;ma:circularprogress.MaterialCircularProgress value=\"0.3\" grid=\"s12 m4 l3\"/&gt;<br> &lt;!-- Fill Color --&gt;<br> &lt;ma:circularprogress.MaterialCircularProgress fillColor=\"PURPLE\" emptyFillColor=\"PURPLE_LIGHTEN_4\" value=\"0.3\" grid=\"s12 m4 l3\"/&gt;<br> &lt;!-- Thickness --&gt;<br> &lt;ma:circularprogress.MaterialCircularProgress value=\"0.3\" thickness=\"20\" grid=\"s12 m4 l3\"/&gt;<br>' , new OnlyToBeUsedInGeneratedCodeStringBlessedAsSafeHtml(sb.string)).html_0) , setStyleName(($clinit_DOM() , f_PrettyPre7.element_0), 'lang-xml', true) , $setGrid_0((!f_PrettyPre7.gridMixin && (f_PrettyPre7.gridMixin = new GridMixin(f_PrettyPre7)) , f_PrettyPre7.gridMixin), 's12') , f_PrettyPre7)) , setStyleName(f_MaterialRow2.element_0, 'code', true) , f_MaterialRow2));\n  $add_9(f_MaterialPanel1, (f_MaterialRow8 = new MaterialRow , $add_9(f_MaterialRow8, (f_MaterialTitle9 = new MaterialTitle , $setText_12(f_MaterialTitle9.paragraph, 'You can easily set up event listeners to Circular Progress.') , $setInnerHTML($getElement(f_MaterialTitle9.header), (new SafeHtmlString(htmlEscape('Events'))).html_0) , fire_5(f_MaterialTitle9, 'Events') , f_MaterialTitle9)) , $add_9(f_MaterialRow8, (circEvents = new MaterialCircularProgress , circEvents.size_0 = 200 , $setWidth_0(circEvents.lblText, '200px') , circEvents.thickness = 20 , $setGrid_0((!circEvents.gridMixin && (circEvents.gridMixin = new GridMixin(circEvents)) , circEvents.gridMixin), 's12 m4 l3') , circEvents.value_0 = 1 , circEvents.initialize && $wnd.$(circEvents.element_0).circleProgress('value', 1) , this$static.owner.circEvents = circEvents , circEvents)) , $add_9(f_MaterialRow8, (f_PrettyPre10 = new PrettyPre , $setHTML_0(f_PrettyPre10, (sb_0 = new StringBuilder , sb_0.string += '\\u2003// Start Event <br> circEvents.addStartHandler(event -&gt; MaterialToast.fireToast(\"Started\")); <br> // Complete Event <br> circEvents.addCompleteHandler(event -&gt; MaterialToast.fireToast(\"Completed\")); <br><br> // Progress Event <br> circEvents.addCircularProgressEvent(event -&gt; { <br> \\u2003int percent = (int) (event.getStep() * 100.0); <br> \\u2003circEvents.setText(percent + \"%\"); <br> });<br>' , new OnlyToBeUsedInGeneratedCodeStringBlessedAsSafeHtml(sb_0.string)).html_0) , setStyleName(f_PrettyPre10.element_0, 'lang-java', true) , f_PrettyPre10)) , setStyleName(f_MaterialRow8.element_0, 'code', true) , f_MaterialRow8));\n  $add_9(f_MaterialPanel1, (f_MaterialRow11 = new MaterialRow , $add_9(f_MaterialRow11, (f_MaterialTitle12 = new MaterialTitle , $setText_12(f_MaterialTitle12.paragraph, 'You can set the circular progress size and set the text of the label using the CircularProgressEvent') , $setInnerHTML($getElement(f_MaterialTitle12.header), (new SafeHtmlString(htmlEscape('Size and Labels'))).html_0) , fire_5(f_MaterialTitle12, 'Size and Labels') , f_MaterialTitle12)) , $add_9(f_MaterialRow11, (circLabel = new MaterialCircularProgress , circLabel.size_0 = 200 , $setWidth_0(circLabel.lblText, '200px') , $setGrid_0((!circLabel.gridMixin && (circLabel.gridMixin = new GridMixin(circLabel)) , circLabel.gridMixin), 's12 m4 l3') , $setFontSize_0(circLabel.lblText) , circLabel.value_0 = 0.75 , circLabel.initialize && $wnd.$(circLabel.element_0).circleProgress('value', 0.75) , this$static.owner.circLabel = circLabel , circLabel)) , $add_9(f_MaterialRow11, (circLabel2 = new MaterialCircularProgress , $setFillColor(circLabel2, RED) , circLabel2.size_0 = 100 , $setWidth_0(circLabel2.lblText, '100px') , $setGrid_0((!circLabel2.gridMixin && (circLabel2.gridMixin = new GridMixin(circLabel2)) , circLabel2.gridMixin), 's12 m4 l3') , circLabel2.value_0 = 0.5 , circLabel2.initialize && $wnd.$(circLabel2.element_0).circleProgress('value', 0.5) , $setEmptyFillColor(circLabel2, RED_LIGHTEN_4) , this$static.owner.circLabel2 = circLabel2 , circLabel2)) , $add_9(f_MaterialRow11, (circLabel3 = new MaterialCircularProgress , $setFillColor(circLabel3, BLUE) , circLabel3.size_0 = 50 , $setWidth_0(circLabel3.lblText, '50px') , $setGrid_0((!circLabel3.gridMixin && (circLabel3.gridMixin = new GridMixin(circLabel3)) , circLabel3.gridMixin), 's12 m4 l3') , circLabel3.value_0 = 1 , circLabel3.initialize && $wnd.$(circLabel3.element_0).circleProgress('value', 1) , $setEmptyFillColor(circLabel3, BLUE_LIGHTEN_4) , this$static.owner.circLabel3 = circLabel3 , circLabel3)) , $add_9(f_MaterialRow11, (f_PrettyPre13 = new PrettyPre , $setHTML_0(f_PrettyPre13, (sb_1 = new StringBuilder , sb_1.string += '\\u2003&lt;ma:circularprogress.MaterialCircularProgress ui:field=\"circLabel\" size=\"200\" fontSize=\"2em\" value=\"0.75\" grid=\"s12 m4 l3\" /&gt;<br>  &lt;ma:circularprogress.MaterialCircularProgress ui:field=\"circLabel2\" fillColor=\"RED\" emptyFillColor=\"RED_LIGHTEN_4\" size=\"100\" value=\"0.5\" grid=\"s12 m4 l3\" /&gt;<br> &lt;ma:circularprogress.MaterialCircularProgress ui:field=\"circLabel3\" fillColor=\"BLUE\" emptyFillColor=\"BLUE_LIGHTEN_4\" size=\"50\" value=\"1.0\" grid=\"s12 m4 l3\" /&gt;<br>' , new OnlyToBeUsedInGeneratedCodeStringBlessedAsSafeHtml(sb_1.string)).html_0) , setStyleName(f_PrettyPre13.element_0, 'lang-xml', true) , $setGrid_0((!f_PrettyPre13.gridMixin && (f_PrettyPre13.gridMixin = new GridMixin(f_PrettyPre13)) , f_PrettyPre13.gridMixin), 's12') , f_PrettyPre13)) , setStyleName(f_MaterialRow11.element_0, 'code', true) , f_MaterialRow11));\n  $add_9(f_MaterialPanel1, (f_MaterialRow14 = new MaterialRow , $add_9(f_MaterialRow14, (f_MaterialTitle15 = new MaterialTitle , $setInnerHTML($getElement(f_MaterialTitle15.header), (new SafeHtmlString(htmlEscape('Start Angle and Reverse'))).html_0) , fire_5(f_MaterialTitle15, 'Start Angle and Reverse') , f_MaterialTitle15)) , $add_9(f_MaterialRow14, (circStartAngle = new MaterialCircularProgress , circStartAngle.thickness = 20 , $setGrid_0((!circStartAngle.gridMixin && (circStartAngle.gridMixin = new GridMixin(circStartAngle)) , circStartAngle.gridMixin), 's12 m4 l3') , circStartAngle.value_0 = 0.45 , circStartAngle.initialize && $wnd.$(circStartAngle.element_0).circleProgress('value', 0.45) , this$static.owner.circStartAngle = circStartAngle , circStartAngle)) , $add_9(f_MaterialRow14, (circStartAngle2 = new MaterialCircularProgress , circStartAngle2.thickness = 20 , $setGrid_0((!circStartAngle2.gridMixin && (circStartAngle2.gridMixin = new GridMixin(circStartAngle2)) , circStartAngle2.gridMixin), 's12 m4 l3') , circStartAngle2.reverse = true , circStartAngle2.value_0 = 0.45 , circStartAngle2.initialize && $wnd.$(circStartAngle2.element_0).circleProgress('value', 0.45) , this$static.owner.circStartAngle2 = circStartAngle2 , circStartAngle2)) , $add_9(f_MaterialRow14, (f_PrettyPre16 = new PrettyPre , $setHTML_0(f_PrettyPre16, (sb_2 = new StringBuilder , sb_2.string += '\\u2003&lt;ma:circularprogress.MaterialCircularProgress ui:field=\"circStartAngle\" value=\"0.45\" thickness=\"20\" grid=\"s12 m4 l3\"/&gt;<br> &lt;ma:circularprogress.MaterialCircularProgress ui:field=\"circStartAngle2\" reverse=\"true\" value=\"0.45\" thickness=\"20\" grid=\"s12 m4 l3\"/&gt;<br>' , new OnlyToBeUsedInGeneratedCodeStringBlessedAsSafeHtml(sb_2.string)).html_0) , setStyleName(f_PrettyPre16.element_0, 'lang-xml', true) , $setGrid_0((!f_PrettyPre16.gridMixin && (f_PrettyPre16.gridMixin = new GridMixin(f_PrettyPre16)) , f_PrettyPre16.gridMixin), 's12') , f_PrettyPre16)) , setStyleName(f_MaterialRow14.element_0, 'code', true) , f_MaterialRow14));\n  $add_9(f_MaterialPanel1, (f_MaterialRow17 = new MaterialRow , $add_9(f_MaterialRow17, (f_MaterialTitle18 = new MaterialTitle , $setInnerHTML($getElement(f_MaterialTitle18.header), (new SafeHtmlString(htmlEscape('Set / Get Value'))).html_0) , fire_5(f_MaterialTitle18, 'Set / Get Value') , f_MaterialTitle18)) , $add_9(f_MaterialRow17, (circValues = new MaterialCircularProgress , circValues.thickness = 20 , $setGrid_0((!circValues.gridMixin && (circValues.gridMixin = new GridMixin(circValues)) , circValues.gridMixin), 's12 m4 l3') , circValues.value_0 = 0 , circValues.initialize && $wnd.$(circValues.element_0).circleProgress('value', 0) , this$static.owner.circValues = circValues , circValues)) , $add_9(f_MaterialRow17, (f_MaterialRow19 = new MaterialRow , $add_9(f_MaterialRow19, (btnSet50 = new MaterialButton , btnSet50.element_0.style['margin'] = ($clinit_Style$Unit() , '4.0px') , $setText_8(btnSet50.span_1, 'Set Value to 0.5') , btnSet50.span_1.attached || $add_9(btnSet50, btnSet50.span_1) , $addClickHandler(btnSet50, this$static.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames1) , btnSet50)) , $add_9(f_MaterialRow19, (btnGetValue = new MaterialButton , btnGetValue.element_0.style['margin'] = '4.0px' , $setText_8(btnGetValue.span_1, 'Get Value') , btnGetValue.span_1.attached || $add_9(btnGetValue, btnGetValue.span_1) , $addClickHandler(btnGetValue, this$static.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames2) , btnGetValue)) , f_MaterialRow19)) , $add_9(f_MaterialRow17, (f_PrettyPre20 = new PrettyPre , $setHTML_0(f_PrettyPre20, (sb_3 = new StringBuilder , sb_3.string += '// Setting the Value <br> \\u2003circValues.setValue(0.5); <br><br> // Getting the Value<br> circValues.getValue();' , new OnlyToBeUsedInGeneratedCodeStringBlessedAsSafeHtml(sb_3.string)).html_0) , setStyleName(f_PrettyPre20.element_0, 'lang-xml', true) , $setGrid_0((!f_PrettyPre20.gridMixin && (f_PrettyPre20.gridMixin = new GridMixin(f_PrettyPre20)) , f_PrettyPre20.gridMixin), 's12') , f_PrettyPre20)) , setStyleName(f_MaterialRow17.element_0, 'code', true) , f_MaterialRow17));\n  $add_9(f_MaterialPanel1, (f_MaterialRow21 = new MaterialRow , $add_9(f_MaterialRow21, (f_MaterialTitle22 = new MaterialTitle , $setText_12(f_MaterialTitle22.paragraph, 'You can use css to make the circular progress responsive') , $setInnerHTML($getElement(f_MaterialTitle22.header), (new SafeHtmlString(htmlEscape('Responsive'))).html_0) , fire_5(f_MaterialTitle22, 'Responsive') , f_MaterialTitle22)) , $add_9(f_MaterialRow21, (f_circularprogress$MaterialCircularProgress23 = new MaterialCircularProgress , setStyleName(f_circularprogress$MaterialCircularProgress23.element_0, 'circle', true) , f_circularprogress$MaterialCircularProgress23.size_0 = $intern_2 , $setWidth_0(f_circularprogress$MaterialCircularProgress23.lblText, '1000px') , f_circularprogress$MaterialCircularProgress23.thickness = 20 , $setGrid_0((!f_circularprogress$MaterialCircularProgress23.gridMixin && (f_circularprogress$MaterialCircularProgress23.gridMixin = new GridMixin(f_circularprogress$MaterialCircularProgress23)) , f_circularprogress$MaterialCircularProgress23.gridMixin), 's12 m4 l3') , f_circularprogress$MaterialCircularProgress23.value_0 = 0.45 , f_circularprogress$MaterialCircularProgress23.initialize && $wnd.$(f_circularprogress$MaterialCircularProgress23.element_0).circleProgress('value', 0.45) , f_circularprogress$MaterialCircularProgress23)) , $add_9(f_MaterialRow21, (f_PrettyPre24 = new PrettyPre , $setHTML_0(f_PrettyPre24, (sb_4 = new StringBuilder , sb_4.string += '\\u2003&lt;-- XML Declaration --&gt; <br> &lt;ma:circularprogress.MaterialCircularProgress value=\"0.45\" thickness=\"20\" addStyleNames=\"circle\" size=\"1000\" grid=\"s12 m4 l3\"/&gt;' , new OnlyToBeUsedInGeneratedCodeStringBlessedAsSafeHtml(sb_4.string)).html_0) , setStyleName(f_PrettyPre24.element_0, 'lang-xml', true) , $setGrid_0((!f_PrettyPre24.gridMixin && (f_PrettyPre24.gridMixin = new GridMixin(f_PrettyPre24)) , f_PrettyPre24.gridMixin), 's12') , f_PrettyPre24)) , $add_9(f_MaterialRow21, (f_PrettyPre25 = new PrettyPre , $setHTML_0(f_PrettyPre25, (sb_5 = new StringBuilder , sb_5.string += '// Css Styling <br> .circle canvas { <br> \\u2003max-width: 100%; <br> \\u2003max-height: 100%; <br> }' , new OnlyToBeUsedInGeneratedCodeStringBlessedAsSafeHtml(sb_5.string)).html_0) , setStyleName(f_PrettyPre25.element_0, 'lang-css', true) , $setGrid_0((!f_PrettyPre25.gridMixin && (f_PrettyPre25.gridMixin = new GridMixin(f_PrettyPre25)) , f_PrettyPre25.gridMixin), 's12') , f_PrettyPre25)) , setStyleName(f_MaterialRow21.element_0, 'code', true) , f_MaterialRow21));\n  return f_MaterialPanel1;\n}\n\nfunction CircularProgressView_BinderImpl$Widgets(owner){\n  this.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames1 = new CircularProgressView_BinderImpl$Widgets$1(this);\n  this.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames2 = new CircularProgressView_BinderImpl$Widgets$2(this);\n  this.owner = owner;\n}\n\ndefineClass(1443, 1, {}, CircularProgressView_BinderImpl$Widgets);\nvar Lgwt_material_design_demo_client_application_addins_circularprogress_CircularProgressView_1BinderImpl$Widgets_2_classLit = createForClass('gwt.material.design.demo.client.application.addins.circularprogress', 'CircularProgressView_BinderImpl/Widgets', 1443);\nfunction CircularProgressView_BinderImpl$Widgets$1(this$1){\n  this.this$11 = this$1;\n}\n\ndefineClass(1444, 1, $intern_64, CircularProgressView_BinderImpl$Widgets$1);\n_.onClick_0 = function onClick_44(event_0){\n  $setValue_6(this.this$11.owner.circValues);\n}\n;\nvar Lgwt_material_design_demo_client_application_addins_circularprogress_CircularProgressView_1BinderImpl$Widgets$1_2_classLit = createForClass('gwt.material.design.demo.client.application.addins.circularprogress', 'CircularProgressView_BinderImpl/Widgets/1', 1444);\nfunction CircularProgressView_BinderImpl$Widgets$2(this$1){\n  this.this$11 = this$1;\n}\n\ndefineClass(1445, 1, $intern_64, CircularProgressView_BinderImpl$Widgets$2);\n_.onClick_0 = function onClick_45(event_0){\n  fireToast('Value: ' + this.this$11.owner.circValues.value_0);\n}\n;\nvar Lgwt_material_design_demo_client_application_addins_circularprogress_CircularProgressView_1BinderImpl$Widgets$2_2_classLit = createForClass('gwt.material.design.demo.client.application.addins.circularprogress', 'CircularProgressView_BinderImpl/Widgets/2', 1445);\nfunction $get_Key$type$gwt$material$design$demo$client$application$addins$circularprogress$CircularProgressPresenter$_annotation$$none$$(this$static){\n  var result, result0;\n  if (!this$static.singleton_Key$type$gwt$material$design$demo$client$application$addins$circularprogress$CircularProgressPresenter$_annotation$$none$$) {\n    result0 = new CircularProgressPresenter($get_Key$type$com$google$web$bindery$event$shared$EventBus$_annotation$$none$$($getFragment_com_google_web_bindery_event_shared(this$static.injector)), (result = $get_Key$type$gwt$material$design$demo$client$application$addins$circularprogress$CircularProgressView$_annotation$$none$$(this$static) , result), $get_Key$type$gwt$material$design$demo$client$application$addins$circularprogress$CircularProgressPresenter$MyProxy$_annotation$$none$$(this$static));\n    $automaticBind(($getFragment_com_gwtplatform_mvp_client(this$static.injector) , result0), $get_Key$type$com$gwtplatform$mvp$client$AutobindDisable$_annotation$$none$$($getFragment_com_gwtplatform_mvp_client(this$static.injector)));\n    this$static.singleton_Key$type$gwt$material$design$demo$client$application$addins$circularprogress$CircularProgressPresenter$_annotation$$none$$ = result0;\n  }\n  return this$static.singleton_Key$type$gwt$material$design$demo$client$application$addins$circularprogress$CircularProgressPresenter$_annotation$$none$$;\n}\n\nfunction $get_Key$type$gwt$material$design$demo$client$application$addins$circularprogress$CircularProgressView$_annotation$$none$$(this$static){\n  var result;\n  if (!this$static.singleton_Key$type$gwt$material$design$demo$client$application$addins$circularprogress$CircularProgressView$_annotation$$none$$) {\n    result = new CircularProgressView;\n    this$static.singleton_Key$type$gwt$material$design$demo$client$application$addins$circularprogress$CircularProgressView$_annotation$$none$$ = result;\n  }\n  return this$static.singleton_Key$type$gwt$material$design$demo$client$application$addins$circularprogress$CircularProgressView$_annotation$$none$$;\n}\n\ndefineClass(706, 1, $intern_109);\n_.onSuccess_0 = function onSuccess_3(){\n  $onSuccess(this.val$callback2, $get_Key$type$gwt$material$design$demo$client$application$addins$circularprogress$CircularProgressPresenter$_annotation$$none$$(this.this$11.this$01));\n}\n;\n$entry(onLoad_0)(3);\n\n//# sourceURL=gwtmaterialdemo-3.js\n")
