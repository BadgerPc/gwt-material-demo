$wnd.gwtmaterialdemo.runAsyncCallback11("function $addFocusHandler(this$static, handler){\n  return $addDomHandler(this$static, new MaterialWidget$lambda$28$Type(this$static, handler), ($clinit_FocusEvent() , $clinit_FocusEvent() , TYPE_3));\n}\n\nfunction $addKeyDownHandler(this$static, handler){\n  return $addDomHandler(this$static, new MaterialWidget$lambda$24$Type(this$static, handler), ($clinit_KeyDownEvent() , $clinit_KeyDownEvent() , TYPE_4));\n}\n\nfunction $addKeyUpHandler(this$static, handler){\n  return $addDomHandler(this$static, new MaterialWidget$lambda$26$Type(this$static, handler), ($clinit_KeyUpEvent() , $clinit_KeyUpEvent() , TYPE_5));\n}\n\nfunction $lambda$24(this$static, handler_1){\n  !containsStyle((!this$static.enabledMixin && (this$static.enabledMixin = new EnabledMixin(this$static)) , this$static.enabledMixin).uiObject.getStyleElement().className || '', 'disabled') && fireToast('Key Down : ' + $getHTML(handler_1.this$11.owner.eventRichEditor));\n}\n\nfunction $lambda$26(this$static, handler_1){\n  !containsStyle((!this$static.enabledMixin && (this$static.enabledMixin = new EnabledMixin(this$static)) , this$static.enabledMixin).uiObject.getStyleElement().className || '', 'disabled') && fireToast('Key Up : ' + $getHTML(handler_1.this$11.owner.eventRichEditor));\n}\n\nfunction $lambda$28(this$static, handler_1){\n  !containsStyle((!this$static.enabledMixin && (this$static.enabledMixin = new EnabledMixin(this$static)) , this$static.enabledMixin).uiObject.getStyleElement().className || '', 'disabled') && fireToast('Focus Event : ' + $getHTML(handler_1.this$11.owner.eventRichEditor));\n}\n\nfunction $extractOptions(options){\n  var jsOptions, option, option$index, option$max;\n  jsOptions = [];\n  for (option$index = 0 , option$max = options.length; option$index < option$max; ++option$index) {\n    option = options[option$index];\n    $push_0(jsOptions, option.id_0);\n  }\n  return jsOptions;\n}\n\nfunction $getHTML(this$static){\n  return $wnd.$(($clinit_DOM() , this$static.element_0)).code();\n}\n\nfunction $lambda$0_8(this$static, html_1){\n  $setHTMLCode(($clinit_DOM() , this$static.element_0), html_1);\n}\n\nfunction $setHTML(this$static, html){\n  if (this$static.htmlAttachHandler) {\n    $removeHandler(this$static.htmlAttachHandler.real);\n    this$static.htmlAttachHandler = null;\n  }\n  this$static.attached?$setHTMLCode(($clinit_DOM() , this$static.element_0), html):(this$static.htmlAttachHandler = $addHandler_0(this$static, new MaterialRichEditorBase$lambda$0$Type(this$static, html), (!TYPE_15 && (TYPE_15 = new GwtEvent$Type) , TYPE_15)));\n}\n\nfunction $setHTMLCode(e, html){\n  $wnd.$(e).code(html);\n}\n\nfunction $setMiscOptions(this$static, miscOptions){\n  this$static.miscOptions = miscOptions;\n}\n\nfunction $setParaOptions(this$static, paraOptions){\n  this$static.paraOptions = paraOptions;\n}\n\nfunction $setStyleOptions(this$static, styleOptions){\n  this$static.styleOptions = styleOptions;\n}\n\nfunction $setUndoOptions(this$static, undoOptions){\n  this$static.undoOptions = undoOptions;\n}\n\nfunction $setValue_7(this$static, value_0){\n  $setInnerHTML(($clinit_DOM() , this$static.element_0), ($clinit_SafeHtmlUtils() , (new SafeHtmlString(htmlEscape(value_0))).html_0));\n}\n\ndefineClass(1713, 211, $intern_65);\n_.getValue_0 = function getValue_8(){\n  return ($clinit_DOM() , this.element_0).textContent;\n}\n;\n_.setValue_1 = function setValue_8(value_0, fireEvents){\n  $setValue_7(this, throwClassCastExceptionUnlessNull(value_0));\n}\n;\n_.airMode = false;\n_.disableDragAndDrop = false;\nvar Lgwt_material_design_addins_client_richeditor_base_MaterialRichEditorBase_2_classLit = createForClass('gwt.material.design.addins.client.richeditor.base', 'MaterialRichEditorBase', 1713);\nfunction $clinit_MaterialRichEditor(){\n  $clinit_MaterialRichEditor = emptyMethod;\n  !startupState && (startupState = new StartupState$DebugState);\n  if (startupState) {\n    $clinit_MaterialDesignBase();\n    injectJs(($clinit_MaterialRichEditorDebugClientBundle_default_InlineClientBundleGenerator$richEditorDebugJsInitializer() , richEditorDebugJs), false, true);\n    injectCss(($clinit_MaterialRichEditorDebugClientBundle_default_InlineClientBundleGenerator$richEditorDebugCssInitializer() , richEditorDebugCss));\n  }\n   else {\n    $clinit_MaterialDesignBase();\n    injectJs(($clinit_MaterialRichEditorClientBundle_default_InlineClientBundleGenerator$richEditorJsInitializer() , richEditorJs), true, false);\n    injectCss(($clinit_MaterialRichEditorClientBundle_default_InlineClientBundleGenerator$richEditorCssInitializer() , richEditorCss));\n  }\n}\n\nfunction $initRichEditor(this$static){\n  var jsRichEditor, options, toolbar_0, height;\n  jsRichEditor = $wnd.$(($clinit_DOM() , this$static.element_0));\n  options = new $wnd.Object;\n  toolbar_0 = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 2), $intern_3, 10, 3, []);\n  toolbar_0[0] = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_3, 1, 5, ['style', $extractOptions(this$static.styleOptions)]);\n  toolbar_0[1] = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_3, 1, 5, ['para', $extractOptions(this$static.paraOptions)]);\n  toolbar_0[2] = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_3, 1, 5, ['height', $extractOptions(this$static.heightOptions)]);\n  toolbar_0[3] = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_3, 1, 5, ['undo', $extractOptions(this$static.undoOptions)]);\n  toolbar_0[4] = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_3, 1, 5, ['fonts', $extractOptions(this$static.fontOptions)]);\n  toolbar_0[5] = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_3, 1, 5, ['color', $extractOptions(this$static.colorOptions)]);\n  toolbar_0[6] = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_3, 1, 5, ['ckMedia', $extractOptions(this$static.ckMediaOptions)]);\n  toolbar_0[7] = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_3, 1, 5, ['misc', $extractOptions(this$static.miscOptions)]);\n  options.toolbar = toolbar_0;\n  options.airMode = this$static.airMode;\n  options.disableDragAndDrop = this$static.disableDragAndDrop;\n  options.followingToolbar = false;\n  options.placeholder = this$static.placeholder;\n  options.height = (height = this$static.element_0.style['height'] , (height == null || height.length == 0) && (height = '550px') , height);\n  options.minHeight = 200;\n  options.defaultBackColor = '#777';\n  options.defaultTextColor = '#fff';\n  jsRichEditor.materialnote(options);\n  jsRichEditor.on('materialnote.blur', makeLambdaFunction(MaterialRichEditor$lambda$0$Type.prototype.call_0, MaterialRichEditor$lambda$0$Type, [this$static]));\n  jsRichEditor.on('materialnote.focus', makeLambdaFunction(MaterialRichEditor$lambda$1$Type.prototype.call_0, MaterialRichEditor$lambda$1$Type, [this$static]));\n  jsRichEditor.on('materialnote.keyup', makeLambdaFunction(MaterialRichEditor$lambda$2$Type.prototype.call_0, MaterialRichEditor$lambda$2$Type, [this$static]));\n  jsRichEditor.on('materialnote.keydown', makeLambdaFunction(MaterialRichEditor$lambda$3$Type.prototype.call_0, MaterialRichEditor$lambda$3$Type, [this$static]));\n  jsRichEditor.on('materialnote.paste', makeLambdaFunction(MaterialRichEditor$lambda$4$Type.prototype.call_0, MaterialRichEditor$lambda$4$Type, [this$static]));\n  jsRichEditor.on('materialnote.change', makeLambdaFunction(MaterialRichEditor$lambda$5$Type.prototype.call_0, MaterialRichEditor$lambda$5$Type, [this$static]));\n}\n\nfunction $insertText(this$static){\n  $wnd.$(($clinit_DOM() , this$static.element_0)).materialnote('insertText', ($clinit_SafeHtmlUtils() , (new SafeHtmlString(htmlEscape('Material Design'))).html_0));\n}\n\nfunction $lambda$5_2(this$static){\n  fire_5(this$static, $wnd.$(($clinit_DOM() , this$static.element_0)).code());\n  return $clinit_Boolean() , $clinit_Boolean() , true;\n}\n\nfunction MaterialRichEditor(){\n  $clinit_MaterialRichEditor();\n  AbstractValueWidget_0.call(this, $doc.createElement('div'), stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_3, 2, 6, ['editor']));\n  this.placeholder = '';\n  this.styleOptions = stampJavaTypeInfo(getClassLiteralForArray(Lgwt_material_design_addins_client_richeditor_base_constants_ToolbarButton_2_classLit, 1), $intern_9, 78, 0, [($clinit_ToolbarButton() , STYLE), BOLD_0, ITALIC, UNDERLINE, STRIKETHROUGH, CLEAR, SUPERSCRIPT, SUBSCRIPT]);\n  this.fontOptions = stampJavaTypeInfo(getClassLiteralForArray(Lgwt_material_design_addins_client_richeditor_base_constants_ToolbarButton_2_classLit, 1), $intern_9, 78, 0, [FONT_SIZE, FONT_NAME]);\n  this.colorOptions = stampJavaTypeInfo(getClassLiteralForArray(Lgwt_material_design_addins_client_richeditor_base_constants_ToolbarButton_2_classLit, 1), $intern_9, 78, 0, [COLOR]);\n  this.undoOptions = stampJavaTypeInfo(getClassLiteralForArray(Lgwt_material_design_addins_client_richeditor_base_constants_ToolbarButton_2_classLit, 1), $intern_9, 78, 0, [UNDO, REDO, HELP_0]);\n  this.ckMediaOptions = stampJavaTypeInfo(getClassLiteralForArray(Lgwt_material_design_addins_client_richeditor_base_constants_ToolbarButton_2_classLit, 1), $intern_9, 78, 0, [CK_IMAGE_UPLOAD, CK_IMAGE_VIDEO]);\n  this.miscOptions = stampJavaTypeInfo(getClassLiteralForArray(Lgwt_material_design_addins_client_richeditor_base_constants_ToolbarButton_2_classLit, 1), $intern_9, 78, 0, [LINK_0, PICTURE, TABLE_1, HR, CODE_VIEW, FULLSCREEN]);\n  this.paraOptions = stampJavaTypeInfo(getClassLiteralForArray(Lgwt_material_design_addins_client_richeditor_base_constants_ToolbarButton_2_classLit, 1), $intern_9, 78, 0, [UL, OL, PARAGRAPH, LEFT_2, CENTER_3, RIGHT_3, JUSTIFY_1, OUTDENT, INDENT]);\n  this.heightOptions = stampJavaTypeInfo(getClassLiteralForArray(Lgwt_material_design_addins_client_richeditor_base_constants_ToolbarButton_2_classLit, 1), $intern_9, 78, 0, [LINE_HEIGHT]);\n}\n\ndefineClass(254, 1713, $intern_65, MaterialRichEditor);\n_.clear_0 = function clear_11(){\n  $wnd.$(($clinit_DOM() , this.element_0)).materialnote('reset');\n}\n;\n_.onLoad = function onLoad_18(){\n  $onLoad_0(this);\n  $initRichEditor(this);\n}\n;\n_.onUnload = function onUnload_6(){\n  var jsRichEditor;\n  jsRichEditor = $wnd.$(($clinit_DOM() , this.element_0));\n  jsRichEditor.off('materialnote.blur');\n  jsRichEditor.off('materialnote.focus');\n  jsRichEditor.off('materialnote.keyup');\n  jsRichEditor.off('materialnote.keydown');\n  jsRichEditor.off('materialnote.paste');\n  jsRichEditor.off('materialnote.change');\n  jsRichEditor.destroy();\n}\n;\nvar Lgwt_material_design_addins_client_richeditor_MaterialRichEditor_2_classLit = createForClass('gwt.material.design.addins.client.richeditor', 'MaterialRichEditor', 254);\nfunction MaterialRichEditor$1(){\n  $clinit_BlurEvent();\n}\n\ndefineClass(1716, 1715, {}, MaterialRichEditor$1);\nvar Lgwt_material_design_addins_client_richeditor_MaterialRichEditor$1_2_classLit = createForClass('gwt.material.design.addins.client.richeditor', 'MaterialRichEditor/1', 1716);\nfunction MaterialRichEditor$2(){\n  $clinit_FocusEvent();\n}\n\ndefineClass(1718, 1717, {}, MaterialRichEditor$2);\nvar Lgwt_material_design_addins_client_richeditor_MaterialRichEditor$2_2_classLit = createForClass('gwt.material.design.addins.client.richeditor', 'MaterialRichEditor/2', 1718);\nfunction MaterialRichEditor$3(){\n  $clinit_KeyUpEvent();\n}\n\ndefineClass(1720, 1719, {}, MaterialRichEditor$3);\nvar Lgwt_material_design_addins_client_richeditor_MaterialRichEditor$3_2_classLit = createForClass('gwt.material.design.addins.client.richeditor', 'MaterialRichEditor/3', 1720);\nfunction MaterialRichEditor$4(){\n  $clinit_KeyDownEvent();\n}\n\ndefineClass(1722, 1721, {}, MaterialRichEditor$4);\nvar Lgwt_material_design_addins_client_richeditor_MaterialRichEditor$4_2_classLit = createForClass('gwt.material.design.addins.client.richeditor', 'MaterialRichEditor/4', 1722);\nfunction $clinit_PasteEvent(){\n  $clinit_PasteEvent = emptyMethod;\n  TYPE_52 = new GwtEvent$Type;\n}\n\ndefineClass(2423, $intern_18, {});\n_.dispatch = function dispatch_53(handler){\n  fireToast('Paste : ' + $getHTML(castTo(handler, 2464).this$11.owner.eventRichEditor));\n}\n;\n_.getAssociatedType = function getAssociatedType_54(){\n  return TYPE_52;\n}\n;\nvar TYPE_52;\nvar Lgwt_material_design_addins_client_richeditor_events_PasteEvent_2_classLit = createForClass('gwt.material.design.addins.client.richeditor.events', 'PasteEvent', 2423);\nfunction MaterialRichEditor$5(){\n  $clinit_PasteEvent();\n}\n\ndefineClass(1723, 2423, {}, MaterialRichEditor$5);\nvar Lgwt_material_design_addins_client_richeditor_MaterialRichEditor$5_2_classLit = createForClass('gwt.material.design.addins.client.richeditor', 'MaterialRichEditor/5', 1723);\nfunction MaterialRichEditor$lambda$0$Type($$outer_0){\n  this.$$outer_0 = $$outer_0;\n}\n\ndefineClass(2563, $wnd.Function, {}, MaterialRichEditor$lambda$0$Type);\n_.call_0 = function call_41(arg0){\n  return $fireEvent_0(this.$$outer_0, new MaterialRichEditor$1) , $clinit_Boolean() , $clinit_Boolean() , true;\n}\n;\nfunction MaterialRichEditor$lambda$1$Type($$outer_0){\n  this.$$outer_0 = $$outer_0;\n}\n\ndefineClass(2564, $wnd.Function, {}, MaterialRichEditor$lambda$1$Type);\n_.call_0 = function call_42(arg0){\n  return $fireEvent_0(this.$$outer_0, new MaterialRichEditor$2) , $clinit_Boolean() , $clinit_Boolean() , true;\n}\n;\nfunction MaterialRichEditor$lambda$2$Type($$outer_0){\n  this.$$outer_0 = $$outer_0;\n}\n\ndefineClass(2565, $wnd.Function, {}, MaterialRichEditor$lambda$2$Type);\n_.call_0 = function call_43(arg0){\n  return $fireEvent_0(this.$$outer_0, new MaterialRichEditor$3) , $clinit_Boolean() , $clinit_Boolean() , true;\n}\n;\nfunction MaterialRichEditor$lambda$3$Type($$outer_0){\n  this.$$outer_0 = $$outer_0;\n}\n\ndefineClass(2566, $wnd.Function, {}, MaterialRichEditor$lambda$3$Type);\n_.call_0 = function call_44(arg0){\n  return $fireEvent_0(this.$$outer_0, new MaterialRichEditor$4) , $clinit_Boolean() , $clinit_Boolean() , true;\n}\n;\nfunction MaterialRichEditor$lambda$4$Type($$outer_0){\n  this.$$outer_0 = $$outer_0;\n}\n\ndefineClass(2567, $wnd.Function, {}, MaterialRichEditor$lambda$4$Type);\n_.call_0 = function call_45(arg0){\n  return $fireEvent_0(this.$$outer_0, new MaterialRichEditor$5) , $clinit_Boolean() , $clinit_Boolean() , true;\n}\n;\nfunction MaterialRichEditor$lambda$5$Type($$outer_0){\n  this.$$outer_0 = $$outer_0;\n}\n\ndefineClass(2568, $wnd.Function, {}, MaterialRichEditor$lambda$5$Type);\n_.call_0 = function call_46(arg0){\n  return $lambda$5_2(this.$$outer_0);\n}\n;\nvar richEditorCss, richEditorJs;\nfunction MaterialRichEditorClientBundle_default_InlineClientBundleGenerator$1(){\n}\n\ndefineClass(2284, 1, {}, MaterialRichEditorClientBundle_default_InlineClientBundleGenerator$1);\n_.getName = function getName_42(){\n  return 'richEditorCss';\n}\n;\n_.getText = function getText_33(){\n  var builder;\n  builder = new StringBuilder;\n  builder.string += '.editorDialogs .modal,.note-editor .modal{background-color:#FFF;color:#404040;z-index:1057!important;backface-visibility:hidden}.editorDialogs .modal .input-field input.datepicker,.editorDialogs .modal .input-field input:not([readonly]),.note-editor .modal .input-field input.datepicker,.note-editor .modal .input-field input:not([readonly]){border-color:#000!important}.editorDialogs .modal .input-field input.datepicker:focus,.editorDialogs .modal .input-field input:focus:not([readonly]),.editorDialogs .modal textarea.materialize-textarea:focus:not([readonly]),.note-editor .modal .input-field input.datepicker:focus,.note-editor .modal .input-field input:focus:not([readonly]),.note-editor .modal textarea.materialize-textarea:focus:not([readonly]){box-shadow:0 1px 0 0 grey!important;border-color:grey!important}.editorDialogs .modal .input-field .prefix,.editorDialogs .modal .input-field input.datepicker+label,.editorDialogs .modal .input-field input:not([readonly])+label,.editorDialogs .modal .note-editor+label,.editorDialogs .modal label,.note-editor .modal .input-field .prefix,.note-editor .modal .input-field input.datepicker+label,.note-editor .modal .input-field input:not([readonly])+label,.note-editor .modal .note-editor+label,.note-editor .modal label{color:#000!important}.editorDialogs .modal .input-field .prefix.active,.editorDialogs .modal .input-field input.datepicker:focus+label,.editorDialogs .modal .input-field input:focus:not([readonly])+label,.editorDialogs .modal textarea.materialize-textarea:focus:not([readonly])+label,.note-editor .modal .input-field .prefix.active,.note-editor .modal .input-field input.datepicker:focus+label,.note-editor .modal .input-field input:focus:not([readonly])+label,.note-editor .modal textarea.materialize-textarea:focus:not([readonly])+label{color:grey}.editorDialogs .modal .btn,.editorDialogs .modal .btn-large,.note-editor .modal .btn,.note-editor .modal .btn-large{background-color:#2196F3;color:#fff;cursor:pointer}.editorDialogs .modal .btn-large:hover,.editorDialogs .modal .btn:hover,.note-editor .modal .btn-large:hover,.note-editor .modal .btn:hover{background-color:#2196F3!important;color:#fff}.editorDialogs .modal .modal-footer,.note-editor .modal .modal-footer{background-color:#E9E9E9}.editorDialogs .modal .modal-footer .btnClose,.note-editor .modal .modal-footer .btnClose{margin-right:15px;background-color:transparent!important;color:grey}.editorDialogs .modal .modal-footer .btnClose:hover,.note-editor .modal .modal-footer .btnClose:hover{color:grey;background-color:transparent!important}.editorDialogs .modal .canvasContainerEmpty,.note-editor .modal .canvasContainerEmpty{border:5px solid #9c27b0}.note-editor{position:relative;border-left:3px solid #e9e9e9;border-bottom:3px solid #e9e9e9;border-right:3px solid #e9e9e9;background:#E9E9E9}.note-editor .img-circle{border-radius:50%}.note-editor .img-rounded{border-radius:5%}.note-editor .img-thumbnail{border:5px solid #e9e9e9;height:200px}.note-editor .img-bordered{border:5px solid #e9e9e9}.note-editor .btn-large:hover,.note-editor .btn:hover{background-color:#E9E9E9!important}.note-editor .active.btn-large,.note-editor .btn.active{background-color:#E0E0E0}.note-editor .note-editable ul li{list-style-type:square!important;display:list-item;list-style-position:inside}.note-editor .note-dialog>div,.note-editor .note-toolbar .btn.disabled,.note-editor .note-toolbar .disabled.btn-large,.note-editor .note-toolbar button.disabled{display:none}.note-editor .note-dialog .form-group{margin-right:0;margin-left:0}.note-editor .note-dialog .note-modal-form{margin:0}.note-editor .note-dialog .note-image-dialog .note-dropzone{min-height:100px;margin-bottom:10px;font-size:30px;line-height:4;color:#d3d3d3;text-align:center;border:4px dashed #d3d3d3}.note-editor .transparent{opacity:0}.note-editor .note-resizebar{background-color:#e9e9e9;width:100%;height:13px;cursor:ns-resize;padding-top:1px}.note-editor .note-resizebar .note-icon-bar{width:20px;margin:2px auto;border-top:2px solid #545454}.note-editor .note-toolbar{position:relative;color:#000;background-color:#e9e9e9;margin:0;z-index:995!important;padding:2%}.note-editor .note-toolbar ul{padding:0}.note-editor .note-toolbar .dropdown{cursor:pointer}.note-editor .note-toolbar .note-current-fontname{min-width:134px;display:inline-block;text-align:left}.note-editor .note-handle .note-control-selection{position:absolute;display:none;border:2px solid #e9e9e9}.note-editor .note-handle .note-control-selection .note-control-selection-bg{width:100%;height:100%;z-index:3;background-color:rgba(117,117,117,.3)}.note-editor .note-handle .note-control-selection>div{position:absolute}.note-editor .note-handle .note-control-selection .note-control-handle,.note-editor .note-handle .note-control-selection .note-control-holder{width:7px;height:7px;border:1px solid #000}.note-editor .note-handle .note-control-selection .note-control-sizing{width:15px;height:15px;background-color:#e9e9e9;z-index:5;cursor:se-resize}.note-editor .note-handle .note-control-selection .note-control-nw{top:-5px;left:-5px;border-right:0;border-bottom:0}.note-editor .note-handle .note-control-selection .note-control-ne{top:-5px;right:-5px;border-bottom:0;border-left:none}.note-editor .note-handle .note-control-selection .note-control-sw{bottom:-5px;left:-5px;border-top:0;border-right:0}.note-editor .note-handle .note-control-selection .note-control-se{right:-5px;bottom:-5px}.note-editor .note-handle .note-control-selection .note-control-selection-info{right:0;bottom:0;padding:5px;margin:17px;font-size:15px;color:#000;background-color:#e9e9e9;z-index:5}.note-dialog .note-help-dialog{color:#777}.note-dialog .note-help-dialog h4{color:#000}.note-dialog .note-help-dialog thead{background-color:#777;color:#fff}.note-dialog .note-help-dialog tbody{background-color:#e0e0e0}.note-editor .btn-group,.popover .btn-group{display:inline-block;margin-right:10px;position:relative}.note-editor .btn-group ul,.popover .btn-group ul{padding:0}.note-editor .btn-group .closeLeft,.popover .btn-group .closeLeft{padding-right:0!important;margin-right:0!important}.note-editor .btn-group .closeLeft i,.popover .btn-group .closeLeft i{margin-right:0!important}.note-editor .btn-group i.left,.popover .btn-group i.left{margin-right:5px}.note-editor .btn,.note-editor .btn-large,.popover .btn,.popover .btn-large{border-radius:0!important;box-shadow:none!important;padding:0 9px!important;color:#7F7A7A;background:#fff}.note-editor .btnSecond,.popover .btnSecond{background-color:#B71C1C!important}.note-editor .btnThird,.popover .btnThird{background-color:#4a148c!important}.note-editor button,.note-editor note-toolbar button,.popover button,.popover note-toolbar button{border:none;height:36px;text-transform:none}.note-editor [type=checkbox]:checked+label:before,.popover [type=checkbox]:checked+label:before{border-right-color:#9e9e9e!important;border-bottom-color:#9e9e9e!important}.note-editor .note-palette-title,.popover .note-palette-title{padding:0!important}.note-editor .colorName,.popover .colorName{display:inline-block;color:#000}@media only screen and (max-width:600px){.note-editor .colorName,.popover .colorName{display:none}}.note-editor .note-color-palette,.popover .note-color-palette{line-height:10px;border:3px solid #e9e9e9;padding:0!important;overflow-x:scroll;overflow-y:hidden}.note-editor .note-color-palette .note-color-row,.popover .note-color-palette .note-color-row{padding:0!important;min-width:300px}.note-editor .note-color-palette button.note-color-btn,.popover .note-color-palette button.note-color-btn{width:20px;height:20px;padding:0;margin:0}.note-editor .note-color-palette .note-color-btn:hover:after,.popover .note-color-palette .note-color-btn:hover:after{position:absolute;width:30px;height:30px;content:\"\";background-color:inherit;margin-top:-15px;margin-left:-15px}.note-editor .note-dimension-picker,.popover .note-dimension-picker{overflow:hidden}.note-editor .largeDropdown,.popover .largeDropdown{width:290px}.note-editor .dropdown-menu,.popover .dropdown-menu{z-index:1033}.note-editor .dropdown-menu.note-check,.popover .dropdown-menu.note-check{min-width:80px}.note-editor .dropdown-menu label,.popover .dropdown-menu label{color:#000!important}.note-editor ul.dropdown-menu,.popover ul.dropdown-menu{position:absolute;top:20px;background-color:#FFF;box-shadow:0 8px 17px 0 rgba(0,0,0,.2),0 6px 20px 0 rgba(0,0,0,.19)}.note-editor ul.dropdown-menu#colors,.popover ul.dropdown-menu#colors{width:342px}.note-editor ul.dropdown-menu#colors .indicator,.popover ul.dropdown-menu#colors .indicator{width:50%;left:0}.note-editor ul.dropdown-menu .colorTable,.popover ul.dropdown-menu .colorTable{padding:3px 0}.popover ul.dropdown-menu .tabs:hover{background-color:#e9e9e9}.note-editor ul.dropdown-menu .tabs .tab a,.note-editor ul.dropdown-menu .tabs .tab a:hover,.popover ul.dropdown-menu .tabs .tab a,.popover ul.dropdown-menu .tabs .tab a:hover{color:#7F7A7A}.note-editor ul.dropdown-menu .tabs .indicator,.popover ul.dropdown-menu .tabs .indicator{background-color:#868181}.note-editor ul.dropdown-menu li,.popover ul.dropdown-menu li{list-style-type:none;padding:0!important}.note-editor ul.dropdown-menu li div,.popover ul.dropdown-menu li div{padding:3px 15px;cursor:pointer}.note-popover .popover{position:absolute;max-width:none;color:#000}.note-popover .popover .arrow{width:0;height:0;border-style:solid;border-width:0 10px 10px;border-color:transparent transparent #e9e9e9}.note-popover .popover .popover-content{background-color:#e9e9e9}.note-popover .popover .popover-content>a{margin-left:12px}.note-popover .popover .popover-content a{display:inline-block;max-width:200px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;vertical-align:middle}.note-popover .popover .popover-content .arrow{left:20px}.note-popover .popover .popover-content .btn-group{display:inline-block}.note-popover .popover .popover-content .btn-group .btn,.note-popover .popover .popover-content .btn-group .btn-large{border-radius:0!important;box-shadow:none!important;padding:0 9px!important;background-color:#e9e9e9}.note-popover .popover .popover-content .note-para .dropdown-menu,.note-toolbar .note-para .dropdown-menu{min-width:172px;padding:5px}.note-popover .popover .popover-content .note-para .dropdown-menu>div:first-child,.note-toolbar .note-para .dropdown-menu>div:first-child{margin-right:5px}.note-editor .note-dropzone{position:absolute;z-index:100;display:none;color:#87cefa;background-color:#fff;border:2px dashed #87cefa;opacity:.95;pointer-event:none}.note-editor .note-dropzone .note-dropzone-message{display:table-cell;font-size:28px;font-weight:700;text-align:center;vertical-align:middle}.note-editor .note-dropzone.hover{color:#098ddf;border:2px dashed #098ddf}.note-editor.dragover .note-dropzone{display:table}.note-editor.fullscreen{position:fixed;top:0;left:0;z-index:2021;width:100%}.note-editor.fullscreen .note-editable{background-color:#fff}.note-editor.codeview .note-editable,.note-editor.fullscreen .note-resizebar{display:none}.note-editor.codeview .note-codable{display:block}.note-editor .note-statusbar{background-color:#f5f5f5}.note-editor .note-editable[contenteditable=true]:empty:not(:focus):before{color:#a9a9a9;content:attr(data-placeholder)}.note-editor .note-editable{padding:10px;overflow:auto;outline:0;background:#fff;margin:2%;box-shadow:0 8px 17px 0 rgba(0,0,0,.2),0 6px 20px 0 rgba(0,0,0,.19)}.note-editor .note-editable[contenteditable=false]{background-color:#e5e5e5}.note-editor .note-codable{display:none;width:100%;padding:10px;margin-bottom:0;font-family:Menlo,Monaco,monospace,sans-serif;font-size:14px;color:#ccc;background-color:#222;border:0;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0;box-shadow:none;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box;box-sizing:border-box;resize:none}.note-air-editor{outline:0}.note-popover .popover .popover-content,.note-toolbar{padding:0;margin:0}.note-popover .popover .popover-content>.btn-group,.note-toolbar>.btn-group{background:#fff;margin:4px;box-shadow:0 2px 5px 0 rgba(0,0,0,.16),0 2px 10px 0 rgba(0,0,0,.12)}.note-popover .popover .popover-content .note-color .dropdown-menu .btn-group,.note-popover .popover .popover-content .note-style blockquote,.note-popover .popover .popover-content .note-style h1,.note-popover .popover .popover-content .note-style h2,.note-popover .popover .popover-content .note-style h3,.note-popover .popover .popover-content .note-style h4,.note-popover .popover .popover-content .note-style h5,.note-popover .popover .popover-content .note-style h6,.note-toolbar .note-color .dropdown-menu .btn-group,.note-toolbar .note-style blockquote,.note-toolbar .note-style h1,.note-toolbar .note-style h2,.note-toolbar .note-style h3,.note-toolbar .note-style h4,.note-toolbar .note-style h5,.note-toolbar .note-style h6{margin:0}.note-popover .popover .popover-content .btn-group .note-table,.note-toolbar .btn-group .note-table{min-width:0;padding:5px}.note-popover .popover .popover-content .btn-group .note-table .note-dimension-picker,.note-toolbar .btn-group .note-table .note-dimension-picker{font-size:18px}.note-popover .popover .popover-content .btn-group .note-table .note-dimension-picker .note-dimension-picker-mousecatcher,.note-toolbar .btn-group .note-table .note-dimension-picker .note-dimension-picker-mousecatcher{position:absolute!important;z-index:3;width:260px;height:260px;cursor:pointer}.note-popover .popover .popover-content .btn-group .note-table .note-dimension-picker .note-dimension-picker-unhighlighted,.note-toolbar .btn-group .note-table .note-dimension-picker .note-dimension-picker-unhighlighted{position:relative!important;z-index:1;width:312px;height:130px;background-size:26px 26px;background-image:repeating-linear-gradient(0deg,#FFF,#FFF 2px,transparent 2px,transparent 26px),repeating-linear-gradient(-90deg,transparent,transparent 2px,#E9E9E9 2px,#E9E9E9 26px)}.note-popover .popover .popover-content .btn-group .note-table .note-dimension-picker .note-dimension-picker-highlighted,.note-toolbar .btn-group .note-table .note-dimension-picker .note-dimension-picker-highlighted{position:absolute!important;z-index:2;width:26px;height:26px;background-size:26px 26px;background-image:repeating-linear-gradient(0deg,#fff,#fff 2px,transparent 2px,transparent 26px),repeating-linear-gradient(-90deg,transparent,transparent 2px,#9e9e9e 2px,#9e9e9e 26px)}.note-popover .popover .popover-content .note-color .dropdown-toggle,.note-toolbar .note-color .dropdown-toggle{width:20px;padding-left:5px}.note-popover .popover .popover-content .note-color .dropdown-menu .btn-group:first-child,.note-toolbar .note-color .dropdown-menu .btn-group:first-child{margin:0 5px}.note-popover .popover .popover-content .note-color .dropdown-menu .btn-group .note-palette-title,.note-toolbar .note-color .dropdown-menu .btn-group .note-palette-title{margin:2px 7px;font-size:12px;text-align:center;border-bottom:1px solid #eee}.note-popover .popover .popover-content .note-color .dropdown-menu .btn-group .note-color-reset,.note-toolbar .note-color .dropdown-menu .btn-group .note-color-reset{padding:0 3px;margin:3px;font-size:11px;cursor:pointer;-webkit-border-radius:5px;-moz-border-radius:5px;border-radius:5px}.note-popover .popover .popover-content .note-color .dropdown-menu .btn-group .note-color-row,.note-toolbar .note-color .dropdown-menu .btn-group .note-color-row{height:20px}.note-popover .popover .popover-content .note-color .dropdown-menu .btn-group .note-color-reset:hover,.note-toolbar .note-color .dropdown-menu .btn-group .note-color-reset:hover{background:#eee}.note-popover .popover .popover-content .dropdown-menu.right,.note-toolbar .dropdown-menu.right{right:0;left:auto}.note-popover .popover .popover-content .dropdown-menu.right::before,.note-toolbar .dropdown-menu.right::before{right:9px;left:auto!important}.note-popover .popover .popover-content .dropdown-menu.right::after,.note-toolbar .dropdown-menu.right::after{right:10px;left:auto!important}.note-popover .popover .popover-content .dropdown-menu.note-check li a i,.note-toolbar .dropdown-menu.note-check li a i{color:#00bfff;visibility:hidden}.note-popover .popover .popover-content .dropdown-menu.note-check li a.checked i,.note-toolbar .dropdown-menu.note-check li a.chec';\n  builder.string += 'ked i{visibility:visible}.note-popover .popover .popover-content .note-fontsize-10,.note-toolbar .note-fontsize-10{font-size:10px}.codeview .note-color,.codeview .note-fonts,.codeview .note-height,.codeview .note-para,.codeview .note-style,.codeview .note-undo{display:none}.codeview .note-misc{background:#E0E0E0!important;padding-right:12px!important}';\n  return builder.string;\n}\n;\nvar Lgwt_material_design_addins_client_richeditor_MaterialRichEditorClientBundle_1default_1InlineClientBundleGenerator$1_2_classLit = createForClass('gwt.material.design.addins.client.richeditor', 'MaterialRichEditorClientBundle_default_InlineClientBundleGenerator/1', 2284);\nfunction MaterialRichEditorClientBundle_default_InlineClientBundleGenerator$2(){\n}\n\ndefineClass(2285, 1, {}, MaterialRichEditorClientBundle_default_InlineClientBundleGenerator$2);\n_.getName = function getName_43(){\n  return 'richEditorJs';\n}\n;\n_.getText = function getText_34(){\n  var builder;\n  builder = new StringBuilder;\n  builder.string += \"(function(factory) {if (typeof define === 'function' && define.amd) {define(['jquery'], factory); } else {factory(window.jQuery); } }(function($) {if (!Array.prototype.reduce) {Array.prototype.reduce = function(callback) {var t = Object(this), len = t.length >>> 0, k = 0, value; if (arguments.length === 2) {value = arguments[1]; } else {while (k < len && !(k in t)) {k++; } if (k >= len) {throw new TypeError('Reduce of empty array with no initial value'); } value = t[k++]; } for (; k < len; k++) {if (k in t) {value = callback(value, t[k], k, t); } } return value; }; } if ('function' !== typeof Array.prototype.filter) {Array.prototype.filter = function(func) {var t = Object(this), len = t.length >>> 0; var res = []; var thisArg = arguments.length >= 2 ? arguments[1] : void 0; for (var i = 0; i < len; i++) {if (i in t) {var val = t[i]; if (func.call(thisArg, val, i, t)) {res.push(val); } } } return res; }; } var isSupportAmd = typeof define === 'function' && define.amd; var isFontInstalled = function(fontName) {if (fontName === \\\"Roboto\\\") return true; var testFontName = fontName === 'Comic Sans MS' ? 'Courier New' : 'Comic Sans MS'; var $tester = $('<div>').css({position: 'absolute', left: '-9999px', top: '-9999px', fontSize: '200px'}).text('mmmmmmmmmwwwwwww').appendTo(document.body); var originalWidth = $tester.css('fontFamily', testFontName).width(); var width = $tester.css('fontFamily', fontName + ',' + testFontName).width(); $tester.remove(); return originalWidth !== width; }; var userAgent = navigator.userAgent; var agent = {isMac: navigator.appVersion.indexOf('Mac') > -1, isMSIE: /MSIE|Trident/i.test(userAgent), isFF: /firefox/i.test(userAgent), isWebkit: /webkit/i.test(userAgent), isSafari: /safari/i.test(userAgent), jqueryVersion: parseFloat($.fn.jquery), isSupportAmd: isSupportAmd, hasCodeMirror: isSupportAmd ? require.specified('CodeMirror') : !!window.CodeMirror, isFontInstalled: isFontInstalled, isW3CRangeSupport: !!document.createRange }; var func = (function() {var eq = function(itemA) {return function(itemB) {return itemA === itemB; }; }; var eq2 = function(itemA, itemB) {return itemA === itemB; }; var peq2 = function(propName) {return function(itemA, itemB) {return itemA[propName] === itemB[propName]; }; }; var ok = function() {return true; }; var fail = function() {return false; }; var not = function(f) {return function() {return !f.apply(f, arguments); }; }; var and = function(fA, fB) {return function(item) {return fA(item) && fB(item); }; }; var self = function(a) {return a; }; var idCounter = 0; var uniqueId = function(prefix) {var id = ++idCounter + ''; return prefix ? prefix + id : id; }; var rect2bnd = function(rect) {var $document = $(document); return {top: rect.top + $document.scrollTop(), left: rect.left + $document.scrollLeft(), width: rect.right - rect.left, height: rect.bottom - rect.top }; }; var invertObject = function(obj) {var inverted = {}; for (var key in obj) {if (obj.hasOwnProperty(key)) {inverted[obj[key]] = key; } } return inverted; }; var namespaceToCamel = function(namespace, prefix) {prefix = prefix || ''; return prefix + namespace.split('.').map(function(name) {return name.substring(0, 1).toUpperCase() + name.substring(1); }).join(''); }; return {eq: eq, eq2: eq2, peq2: peq2, ok: ok, fail: fail, self: self, not: not, and: and, uniqueId: uniqueId, rect2bnd: rect2bnd, invertObject: invertObject, namespaceToCamel: namespaceToCamel }; })(); var list = (function() {var head = function(array) {return array[0]; }; var last = function(array) {return array[array.length - 1]; }; var initial = function(array) {return array.slice(0, array.length - 1); }; var tail = function(array) {return array.slice(1); }; var find = function(array, pred) {for (var idx = 0, len = array.length; idx < len; idx ++) {var item = array[idx]; if (pred(item)) {return item; } } }; var all = function(array, pred) {for (var idx = 0, len = array.length; idx < len; idx ++) {if (!pred(array[idx])) {return false; } } return true; }; var contains = function(array, item) {return $.inArray(item, array) !== -1; }; var sum = function(array, fn) {fn = fn || func.self; return array.reduce(function(memo, v) {return memo + fn(v); }, 0); }; var from = function(collection) {var result = [], idx = -1, length = collection.length; while (++idx < length) {result[idx] = collection[idx]; } return result; }; var clusterBy = function(array, fn) {if (!array.length) { return []; } var aTail = tail(array); return aTail.reduce(function(memo, v) {var aLast = last(memo); if (fn(last(aLast), v)) {aLast[aLast.length] = v; } else {memo[memo.length] = [v]; } return memo; }, [[head(array)]]); }; var compact = function(array) {var aResult = []; for (var idx = 0, len = array.length; idx < len; idx ++) {if (array[idx]) { aResult.push(array[idx]); } } return aResult; }; var unique = function(array) {var results = []; for (var idx = 0, len = array.length; idx < len; idx ++) {if (!contains(results, array[idx])) {results.push(array[idx]); } } return results; }; var next = function(array, item) {var idx = array.indexOf(item); if (idx === -1) {return null;} return array[idx + 1]; }; var prev = function(array, item) {var idx = array.indexOf(item); if (idx === -1) {return null;} return array[idx - 1]; }; return {head: head, last: last, initial: initial, tail: tail, prev: prev, next: next, find: find, contains: contains, all: all, sum: sum, from: from, clusterBy: clusterBy, compact: compact, unique: unique}; })(); var NBSP_CHAR = String.fromCharCode(160); var ZERO_WIDTH_NBSP_CHAR = '\\\\ufeff'; var dom = (function() {var isEditable = function(node) {return node && $(node).hasClass('note-editable'); }; var isControlSizing = function(node) {return node && $(node).hasClass('note-control-sizing'); }; var buildLayoutInfo = function($editor) {var makeFinder; if ($editor.hasClass('note-air-editor')) {var id = list.last($editor.attr('id').split('-')); makeFinder = function(sIdPrefix) {return function() { return $(sIdPrefix + id); }; }; return {editor: function() { return $editor; }, holder : function() { return $editor.data('holder'); }, editable: function() { return $editor; }, popover: makeFinder('#note-popover-'), handle: makeFinder('#note-handle-'), dialog: makeFinder('#note-dialog-') }; } else {makeFinder = function(sClassName) {return function() { return $editor.find(sClassName); }; }; return {editor: function() { return $editor; }, holder : function() { return $editor.data('holder'); }, dropzone: makeFinder('.note-dropzone'), toolbar: makeFinder('.note-toolbar'), editable: makeFinder('.note-editable'), codable: makeFinder('.note-codable'), statusbar: makeFinder('.note-statusbar'), popover: makeFinder('.note-popover'), handle: makeFinder('.note-handle'), dialog: makeFinder('.note-dialog') }; } }; var makeLayoutInfo = function(descendant) {var $target = $(descendant).closest('.note-editor, .note-air-editor, .note-air-layout'); if (!$target.length) {return null; } var $editor; if ($target.is('.note-editor, .note-air-editor')) {$editor = $target; } else {$editor = $('#note-editor-' + list.last($target.attr('id').split('-'))); } return buildLayoutInfo($editor); }; var makePredByNodeName = function(nodeName) {nodeName = nodeName.toUpperCase(); return function(node) {return node && node.nodeName.toUpperCase() === nodeName; }; }; var isText = function(node) {return node && node.nodeType === 3; }; var isVoid = function(node) {return node && /^BR|^IMG|^HR/.test(node.nodeName.toUpperCase()); }; var isPara = function(node) {if (isEditable(node)) {return false; } return node && /^DIV|^P|^LI|^H[1-7]/.test(node.nodeName.toUpperCase()); }; var isLi = makePredByNodeName('LI'); var isPurePara = function(node) {return isPara(node) && !isLi(node); }; var isTable = makePredByNodeName('TABLE'); var isInline = function(node) {return !isBodyContainer(node) && !isList(node) && !isPara(node) && !isTable(node) && !isBlockquote(node); }; var isList = function(node) {return node && /^UL|^OL/.test(node.nodeName.toUpperCase()); }; var isCell = function(node) {return node && /^TD|^TH/.test(node.nodeName.toUpperCase()); }; var isBlockquote = makePredByNodeName('BLOCKQUOTE'); var isBodyContainer = function(node) {return isCell(node) || isBlockquote(node) || isEditable(node); }; var isAnchor = makePredByNodeName('A'); var isParaInline = function(node) {return isInline(node) && !!ancestor(node, isPara); }; var isBodyInline = function(node) {return isInline(node) && !ancestor(node, isPara); }; var isBody = makePredByNodeName('BODY'); var isClosestSibling = function(nodeA, nodeB) {return nodeA.nextSibling === nodeB || nodeA.previousSibling === nodeB; }; var withClosestSiblings = function(node, pred) {pred = pred || func.ok; var siblings = []; if (node.previousSibling && pred(node.previousSibling)) {siblings.push(node.previousSibling); } siblings.push(node); if (node.nextSibling && pred(node.nextSibling)) {siblings.push(node.nextSibling); } return siblings; }; var blankHTML = agent.isMSIE ? '&nbsp;' : '<br>'; var nodeLength = function(node) {if (isText(node)) {return node.nodeValue.length; } return node.childNodes.length; }; var isEmpty = function(node) {var len = nodeLength(node); if (len === 0) {return true; } else if (!isText(node) && len === 1 && node.innerHTML === blankHTML) {return true; } else if (list.all(node.childNodes, isText) && node.innerHTML === '') {return true; } return false; }; var paddingBlankHTML = function(node) {if (!isVoid(node) && !nodeLength(node)) {node.innerHTML = blankHTML; } }; var ancestor = function(node, pred) {while (node) {if (pred(node)) { return node; } if (isEditable(node)) { break; } node = node.parentNode; } return null; }; var singleChildAncestor = function(node, pred) {node = node.parentNode; while (node) {if (nodeLength(node) !== 1) { break; } if (pred(node)) { return node; } if (isEditable(node)) { break; } node = node.parentNode; } return null; }; var listAncestor = function(node, pred) {pred = pred || func.fail; var ancestors = []; ancestor(node, function(el) {if (!isEditable(el)) {ancestors.push(el); } return pred(el); }); return ancestors; }; var lastAncestor = function(node, pred) {var ancestors = listAncestor(node); return list.last(ancestors.filter(pred)); }; var commonAncestor = function(nodeA, nodeB) {var ancestors = listAncestor(nodeA); for (var n = nodeB; n; n = n.parentNode) {if ($.inArray(n, ancestors) > -1) { return n; } } return null; }; var listPrev = function(node, pred) {pred = pred || func.fail; var nodes = []; while (node) {if (pred(node)) { break; } nodes.push(node); node = node.previousSibling; } return nodes; }; var listNext = function(node, pred) {pred = pred || func.fail; var nodes = []; while (node) {if (pred(node)) { break; } nodes.push(node); node = node.nextSibling; } return nodes; }; var listDescendant = function(node, pred) {var descendents = []; pred = pred || func.ok; (function fnWalk(current) {if (node !== current && pred(current)) {descendents.push(current); } for (var idx = 0, len = current.childNodes.length; idx < len; idx++) {fnWalk(current.childNodes[idx]); } })(node); return descendents; }; var wrap = function(node, wrapperName) {var parent = node.parentNode; var wrapper = $('<' + wrapperName + '>')[0]; parent.insertBefore(wrapper, node); wrapper.appendChild(node); return wrapper; }; var insertAfter = function(node, preceding) {var next = preceding.nextSibling, parent = preceding.parentNode; if (next) {parent.insertBefore(node, next); } else {parent.appendChild(node); } return node; }; var appendChildNodes = function(node, aChild) {$.each(aChild, function(idx, child) {node.appendChild(child); }); return node; }; var isLeftEdgePoint = function(point) {return point.offset === 0; }; var isRightEdgePoint = function(point) {return point.offset === nodeLength(point.node); }; var isEdgePoint = function(point) {return isLeftEdgePoint(point) || isRightEdgePoint(point); }; var isLeftEdgeOf = function(node, ancestor) {while (node && node !== ancestor) {if (position(node) !== 0) {return false; } node = node.parentNode; } return true; }; var isRightEdgeOf = function(node, ancestor) {while (node && node !== ancestor) {if (position(node) !== nodeLength(node.parentNode) - 1) {return false; } node = node.parentNode; } return true; }; var position = function(node) {var offset = 0; while ((node = node.previousSibling)) {offset += 1; } return offset; }; var hasChildren = function(node) {return !!(node && node.childNodes && node.childNodes.length); }; var prevPoint = function(point, isSkipInnerOffset) {var node, offset; if (point.offset === 0) {if (isEditable(point.node)) {return null; } node = point.node.parentNode; offset = position(point.node); } else if (hasChildren(point.node)) {node = point.node.childNodes[point.offset - 1]; offset = nodeLength(node); } else {node = point.node; offset = isSkipInnerOffset ? 0 : point.offset - 1; } return {node: node, offset: offset }; }; var nextPoint = function(point, isSkipInnerOffset) {var node, offset; if (nodeLength(point.node) === point.offset) {if (isEditable(point.node)) {return null; } node = point.node.parentNode; offset = position(point.node) + 1; } else if (hasChildren(point.node)) {node = point.node.childNodes[point.offset]; offset = 0; } else {node = point.node; offset = isSkipInnerOffset ? nodeLength(point.node) : point.offset + 1; } return {node: node, offset: offset }; }; var isSamePoint = function(pointA, pointB) {return pointA.node === pointB.node && pointA.offset === pointB.offset; }; var isVisiblePoint = function(point) {if (isText(point.node) || !hasChildren(point.node) || isEmpty(point.node)) {return true; } var leftNode = point.node.childNodes[point.offset - 1]; var rightNode = point.node.childNodes[point.offset]; if ((!leftNode || isVoid(leftNode)) && (!rightNode || isVoid(rightNode))) {return true; } return false; }; var prevPointUntil = function(point, pred) {while (point) {if (pred(point)) {return point; } point = prevPoint(point); } return null; }; var nextPointUntil = function(point, pred) {while (point) {if (pred(point)) {return point; } point = nextPoint(point); } return null; }; var isCharPoint = function(point) {if (!isText(point.node)) {return false; } var ch = point.node.nodeValue.charAt(point.offset - 1); return ch && (ch !== ' ' && ch !== NBSP_CHAR); }; var walkPoint = function(startPoint, endPoint, handler, isSkipInnerOffset) {var point = startPoint; while (point) {handler(point); if (isSamePoint(point, endPoint)) {break; } var isSkipOffset = isSkipInnerOffset && startPoint.node !== point.node && endPoint.node !== point.node; point = nextPoint(point, isSkipOffset); } }; var makeOffsetPath = function(ancestor, node) {var ancestors = listAncestor(node, func.eq(ancestor)); return $.map(ancestors, position).reverse(); }; var fromOffsetPath = function(ancestor, offsets) {var current = ancestor; for (var i = 0, len = offsets.length; i < len; i++) {if (current.childNodes.length <= offsets[i]) {current = current.childNodes[current.childNodes.length - 1]; } else {current = current.childNodes[offsets[i]]; } } return current; }; var splitNode = function(point, options) {var isSkipPaddingBlankHTML = options && options.isSkipPaddingBlankHTML; var isNotSplitEdgePoint = options && options.isNotSplitEdgePoint; if (isEdgePoint(point) && (isText(point.node) || isNotSplitEdgePoint)) {if (isLeftEdgePoint(point)) {return point.node; } else if (isRightEdgePoint(point)) {return point.node.nextSibling; } } if (isText(point.node)) {return point.node.splitText(point.offset); } else {var childNode = point.node.childNodes[point.offset]; var clone = insertAfter(point.node.cloneNode(false), point.node); appendChildNodes(clone, listNext(childNode)); if (!isSkipPaddingBlankHTML) {paddingBlankHTML(point.node); paddingBlankHTML(clone); } return clone; } }; var splitTree = function(root, point, options) {var ancestors = listAncestor(point.node, func.eq(root)); if (!ancestors.length) {return null; } else if (ancestors.length === 1) {return splitNode(point, options); } return ancestors.reduce(function(node, parent) {if (node === point.node) {node = splitNode(point, options); } return splitNode({node: parent, offset: node ? dom.position(node) : nodeLength(parent) }, options); }); }; var splitPoint = function(point, isInline) {var pred = isInline ? isPara : isBodyContainer; var ancestors = listAncestor(point.node, pred); var topAncestor = list.last(ances\";\n  builder.string += \"tors) || point.node; var splitRoot, container; if (pred(topAncestor)) {splitRoot = ancestors[ancestors.length - 2]; container = topAncestor; } else {splitRoot = topAncestor; container = splitRoot.parentNode; } var pivot = splitRoot && splitTree(splitRoot, point, {isSkipPaddingBlankHTML: isInline, isNotSplitEdgePoint: isInline }); if (!pivot && container === point.node) {pivot = point.node.childNodes[point.offset]; } return {rightNode: pivot, container: container }; }; var create = function(nodeName) {return document.createElement(nodeName); }; var createText = function(text) {return document.createTextNode(text); }; var remove = function(node, isRemoveChild) {if (!node || !node.parentNode) { return; } if (node.removeNode) { return node.removeNode(isRemoveChild); } var parent = node.parentNode; if (!isRemoveChild) {var nodes = []; var i, len; for (i = 0, len = node.childNodes.length; i < len; i++) {nodes.push(node.childNodes[i]); } for (i = 0, len = nodes.length; i < len; i++) {parent.insertBefore(nodes[i], node); } } parent.removeChild(node); }; var removeWhile = function(node, pred) {while (node) {if (isEditable(node) || !pred(node)) {break; } var parent = node.parentNode; remove(node); node = parent; } }; var replace = function(node, nodeName) {if (node.nodeName.toUpperCase() === nodeName.toUpperCase()) {return node; } var newNode = create(nodeName); if (node.style.cssText) {newNode.style.cssText = node.style.cssText; } appendChildNodes(newNode, list.from(node.childNodes)); insertAfter(newNode, node); remove(node); return newNode; }; var isTextarea = makePredByNodeName('TEXTAREA'); var value = function($node, stripLinebreaks) {var val = isTextarea($node[0]) ? $node.val() : $node.html(); if (stripLinebreaks) {return val.replace(/[\\\\n\\\\r]/g, ''); } return val; }; var html = function($node, isNewlineOnBlock) {var markup = value($node); if (isNewlineOnBlock) {var regexTag = /<(\\\\/?)(\\\\b(?!!)[^>\\\\s]*)(.*?)(\\\\s*\\\\/?>)/g; markup = markup.replace(regexTag, function(match, endSlash, name) {name = name.toUpperCase(); var isEndOfInlineContainer = /^DIV|^TD|^TH|^P|^LI|^H[1-7]/.test(name) && !!endSlash; var isBlockNode = /^BLOCKQUOTE|^TABLE|^TBODY|^TR|^HR|^UL|^OL/.test(name); return match + ((isEndOfInlineContainer || isBlockNode) ? '\\\\n' : ''); }); markup = $.trim(markup); } return markup; }; return {NBSP_CHAR: NBSP_CHAR, ZERO_WIDTH_NBSP_CHAR: ZERO_WIDTH_NBSP_CHAR, blank: blankHTML, emptyPara: '<p>' + blankHTML + '<\\/p>', makePredByNodeName: makePredByNodeName, isEditable: isEditable, isControlSizing: isControlSizing, buildLayoutInfo: buildLayoutInfo, makeLayoutInfo: makeLayoutInfo, isText: isText, isVoid: isVoid, isPara: isPara, isPurePara: isPurePara, isInline: isInline, isBlock: func.not(isInline), isBodyInline: isBodyInline, isBody: isBody, isParaInline: isParaInline, isList: isList, isTable: isTable, isCell: isCell, isBlockquote: isBlockquote, isBodyContainer: isBodyContainer, isAnchor: isAnchor, isDiv: makePredByNodeName('DIV'), isLi: isLi, isBR: makePredByNodeName('BR'), isSpan: makePredByNodeName('SPAN'), isB: makePredByNodeName('B'), isU: makePredByNodeName('U'), isS: makePredByNodeName('S'), isI: makePredByNodeName('I'), isImg: makePredByNodeName('IMG'), isTextarea: isTextarea, isEmpty: isEmpty, isEmptyAnchor: func.and(isAnchor, isEmpty), isClosestSibling: isClosestSibling, withClosestSiblings: withClosestSiblings, nodeLength: nodeLength, isLeftEdgePoint: isLeftEdgePoint, isRightEdgePoint: isRightEdgePoint, isEdgePoint: isEdgePoint, isLeftEdgeOf: isLeftEdgeOf, isRightEdgeOf: isRightEdgeOf, prevPoint: prevPoint, nextPoint: nextPoint, isSamePoint: isSamePoint, isVisiblePoint: isVisiblePoint, prevPointUntil: prevPointUntil, nextPointUntil: nextPointUntil, isCharPoint: isCharPoint, walkPoint: walkPoint, ancestor: ancestor, singleChildAncestor: singleChildAncestor, listAncestor: listAncestor, lastAncestor: lastAncestor, listNext: listNext, listPrev: listPrev, listDescendant: listDescendant, commonAncestor: commonAncestor, wrap: wrap, insertAfter: insertAfter, appendChildNodes: appendChildNodes, position: position, hasChildren: hasChildren, makeOffsetPath: makeOffsetPath, fromOffsetPath: fromOffsetPath, splitTree: splitTree, splitPoint: splitPoint, create: create, createText: createText, remove: remove, removeWhile: removeWhile, replace: replace, html: html, value: value }; })(); var range = (function() {var textRangeToPoint = function(textRange, isStart) {var container = textRange.parentElement(), offset; var tester = document.body.createTextRange(), prevContainer; var childNodes = list.from(container.childNodes); for (offset = 0; offset < childNodes.length; offset++) {if (dom.isText(childNodes[offset])) {continue; } tester.moveToElementText(childNodes[offset]); if (tester.compareEndPoints('StartToStart', textRange) >= 0) {break; } prevContainer = childNodes[offset]; } if (offset !== 0 && dom.isText(childNodes[offset - 1])) {var textRangeStart = document.body.createTextRange(), curTextNode = null; textRangeStart.moveToElementText(prevContainer || container); textRangeStart.collapse(!prevContainer); curTextNode = prevContainer ? prevContainer.nextSibling : container.firstChild; var pointTester = textRange.duplicate(); pointTester.setEndPoint('StartToStart', textRangeStart); var textCount = pointTester.text.replace(/[\\\\r\\\\n]/g, '').length; while (textCount > curTextNode.nodeValue.length && curTextNode.nextSibling) {textCount -= curTextNode.nodeValue.length; curTextNode = curTextNode.nextSibling; } var dummy = curTextNode.nodeValue; if (isStart && curTextNode.nextSibling && dom.isText(curTextNode.nextSibling) && textCount === curTextNode.nodeValue.length) {textCount -= curTextNode.nodeValue.length; curTextNode = curTextNode.nextSibling; } container = curTextNode; offset = textCount; } return {cont: container, offset: offset }; }; var pointToTextRange = function(point) {var textRangeInfo = function(container, offset) {var node, isCollapseToStart; if (dom.isText(container)) {var prevTextNodes = dom.listPrev(container, func.not(dom.isText)); var prevContainer = list.last(prevTextNodes).previousSibling; node =  prevContainer || container.parentNode; offset += list.sum(list.tail(prevTextNodes), dom.nodeLength); isCollapseToStart = !prevContainer; } else {node = container.childNodes[offset] || container; if (dom.isText(node)) {return textRangeInfo(node, 0); } offset = 0; isCollapseToStart = false; } return {node: node, collapseToStart: isCollapseToStart, offset: offset }; }; var textRange = document.body.createTextRange(); var info = textRangeInfo(point.node, point.offset); textRange.moveToElementText(info.node); textRange.collapse(info.collapseToStart); textRange.moveStart('character', info.offset); return textRange; }; var WrappedRange = function(sc, so, ec, eo) {this.sc = sc; this.so = so; this.ec = ec; this.eo = eo; var nativeRange = function() {if (agent.isW3CRangeSupport) {var w3cRange = document.createRange(); w3cRange.setStart(sc, so); w3cRange.setEnd(ec, eo); return w3cRange; } else {var textRange = pointToTextRange({node: sc, offset: so }); textRange.setEndPoint('EndToEnd', pointToTextRange({node: ec, offset: eo })); return textRange; } }; this.getPoints = function() {return {sc: sc, so: so, ec: ec, eo: eo }; }; this.getStartPoint = function() {return {node: sc, offset: so }; }; this.getEndPoint = function() {return {node: ec, offset: eo }; }; this.select = function() {var nativeRng = nativeRange(); if (agent.isW3CRangeSupport) {var selection = document.getSelection(); if (selection.rangeCount > 0) {selection.removeAllRanges(); } selection.addRange(nativeRng); } else {nativeRng.select(); } return this; }; this.normalize = function() {var getVisiblePoint = function(point) {if (!dom.isVisiblePoint(point)) {if (dom.isLeftEdgePoint(point)) {point = dom.nextPointUntil(point, dom.isVisiblePoint); } else {point = dom.prevPointUntil(point, dom.isVisiblePoint); } } return point; }; var startPoint = getVisiblePoint(this.getStartPoint()); var endPoint = getVisiblePoint(this.getEndPoint()); return new WrappedRange(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset ); }; this.nodes = function(pred, options) {pred = pred || func.ok; var includeAncestor = options && options.includeAncestor; var fullyContains = options && options.fullyContains; var startPoint = this.getStartPoint(); var endPoint = this.getEndPoint(); var nodes = []; var leftEdgeNodes = []; dom.walkPoint(startPoint, endPoint, function(point) {if (dom.isEditable(point.node)) {return; } var node; if (fullyContains) {if (dom.isLeftEdgePoint(point)) {leftEdgeNodes.push(point.node); } if (dom.isRightEdgePoint(point) && list.contains(leftEdgeNodes, point.node)) {node = point.node; } } else if (includeAncestor) {node = dom.ancestor(point.node, pred); } else {node = point.node; } if (node && pred(node)) {nodes.push(node); } }, true); return list.unique(nodes); }; this.commonAncestor = function() {return dom.commonAncestor(sc, ec); }; this.expand = function(pred) {var startAncestor = dom.ancestor(sc, pred); var endAncestor = dom.ancestor(ec, pred); if (!startAncestor && !endAncestor) {return new WrappedRange(sc, so, ec, eo); } var boundaryPoints = this.getPoints(); if (startAncestor) {boundaryPoints.sc = startAncestor; boundaryPoints.so = 0; } if (endAncestor) {boundaryPoints.ec = endAncestor; boundaryPoints.eo = dom.nodeLength(endAncestor); } return new WrappedRange(boundaryPoints.sc, boundaryPoints.so, boundaryPoints.ec, boundaryPoints.eo ); }; this.collapse = function(isCollapseToStart) {if (isCollapseToStart) {return new WrappedRange(sc, so, sc, so); } else {return new WrappedRange(ec, eo, ec, eo); } }; this.splitText = function() {var isSameContainer = sc === ec; var boundaryPoints = this.getPoints(); if (dom.isText(ec) && !dom.isEdgePoint(this.getEndPoint())) {ec.splitText(eo); } if (dom.isText(sc) && !dom.isEdgePoint(this.getStartPoint())) {boundaryPoints.sc = sc.splitText(so); boundaryPoints.so = 0; if (isSameContainer) {boundaryPoints.ec = boundaryPoints.sc; boundaryPoints.eo = eo - so; } } return new WrappedRange(boundaryPoints.sc, boundaryPoints.so, boundaryPoints.ec, boundaryPoints.eo ); }; this.deleteContents = function() {if (this.isCollapsed()) {return this; } var rng = this.splitText(); var nodes = rng.nodes(null, {fullyContains: true }); var point = dom.prevPointUntil(rng.getStartPoint(), function(point) {return !list.contains(nodes, point.node); }); var emptyParents = []; $.each(nodes, function(idx, node) {var parent = node.parentNode; if (point.node !== parent && dom.nodeLength(parent) === 1) {emptyParents.push(parent); } dom.remove(node, false); }); $.each(emptyParents, function(idx, node) {dom.remove(node, false); }); return new WrappedRange(point.node, point.offset, point.node, point.offset ).normalize(); }; var makeIsOn = function(pred) {return function() {var ancestor = dom.ancestor(sc, pred); return !!ancestor && (ancestor === dom.ancestor(ec, pred)); }; }; this.isOnEditable = makeIsOn(dom.isEditable); this.isOnList = makeIsOn(dom.isList); this.isOnAnchor = makeIsOn(dom.isAnchor); this.isOnCell = makeIsOn(dom.isCell); this.isLeftEdgeOf = function(pred) {if (!dom.isLeftEdgePoint(this.getStartPoint())) {return false; } var node = dom.ancestor(this.sc, pred); return node && dom.isLeftEdgeOf(this.sc, node); }; this.isCollapsed = function() {return sc === ec && so === eo; }; this.wrapBodyInlineWithPara = function() {if (dom.isBodyContainer(sc) && dom.isEmpty(sc)) {sc.innerHTML = dom.emptyPara; return new WrappedRange(sc.firstChild, 0, sc.firstChild, 0); } if (dom.isParaInline(sc) || dom.isPara(sc)) {return this.normalize(); } var topAncestor; if (dom.isInline(sc)) {var ancestors = dom.listAncestor(sc, func.not(dom.isInline)); topAncestor = list.last(ancestors); if (!dom.isInline(topAncestor)) {topAncestor = ancestors[ancestors.length - 2] || sc.childNodes[so]; } } else {topAncestor = sc.childNodes[so > 0 ? so - 1 : 0]; } var inlineSiblings = dom.listPrev(topAncestor, dom.isParaInline).reverse(); inlineSiblings = inlineSiblings.concat(dom.listNext(topAncestor.nextSibling, dom.isParaInline)); if (inlineSiblings.length) {var para = dom.wrap(list.head(inlineSiblings), 'p'); dom.appendChildNodes(para, list.tail(inlineSiblings)); } return this.normalize(); }; this.insertNode = function(node) {var rng = this.wrapBodyInlineWithPara().deleteContents(); var info = dom.splitPoint(rng.getStartPoint(), dom.isInline(node)); if (info.rightNode) {info.rightNode.parentNode.insertBefore(node, info.rightNode); } else {info.container.appendChild(node); } return node; }; this.pasteHTML = function(markup) {var self = this; var contentsContainer = $('<div><\\/div>').html(markup)[0]; var childNodes = list.from(contentsContainer.childNodes); this.wrapBodyInlineWithPara().deleteContents(); return $.map(childNodes.reverse(), function(childNode) {return self.insertNode(childNode); }).reverse(); }; this.toString = function() {var nativeRng = nativeRange(); return agent.isW3CRangeSupport ? nativeRng.toString() : nativeRng.text; }; this.getWordRange = function(findAfter) {var endPoint = this.getEndPoint(); if (!dom.isCharPoint(endPoint)) {return this; } var startPoint = dom.prevPointUntil(endPoint, function(point) {return !dom.isCharPoint(point); }); if (findAfter) {endPoint = dom.nextPointUntil(endPoint, function(point) {return !dom.isCharPoint(point); }); } return new WrappedRange(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset ); }; this.bookmark = function(editable) {return {s: {path: dom.makeOffsetPath(editable, sc), offset: so }, e: {path: dom.makeOffsetPath(editable, ec), offset: eo } }; }; this.paraBookmark = function(paras) {return {s: {path: list.tail(dom.makeOffsetPath(list.head(paras), sc)), offset: so }, e: {path: list.tail(dom.makeOffsetPath(list.last(paras), ec)), offset: eo } }; }; this.getClientRects = function() {var nativeRng = nativeRange(); return nativeRng.getClientRects(); }; }; return {create : function(sc, so, ec, eo) {if (!arguments.length) {if (agent.isW3CRangeSupport) {var selection = document.getSelection(); if (!selection || selection.rangeCount === 0) {return null; } else if (dom.isBody(selection.anchorNode)) {return null; } var nativeRng = selection.getRangeAt(0); sc = nativeRng.startContainer; so = nativeRng.startOffset; ec = nativeRng.endContainer; eo = nativeRng.endOffset; } else {var textRange = document.selection.createRange(); var textRangeEnd = textRange.duplicate(); textRangeEnd.collapse(false); var textRangeStart = textRange; textRangeStart.collapse(true); var startPoint = textRangeToPoint(textRangeStart, true), endPoint = textRangeToPoint(textRangeEnd, false); if (dom.isText(startPoint.node) && dom.isLeftEdgePoint(startPoint) && dom.isTextNode(endPoint.node) && dom.isRightEdgePoint(endPoint) && endPoint.node.nextSibling === startPoint.node) {startPoint = endPoint; } sc = startPoint.cont; so = startPoint.offset; ec = endPoint.cont; eo = endPoint.offset; } } else if (arguments.length === 2) {ec = sc; eo = so; } return new WrappedRange(sc, so, ec, eo); }, createFromNode: function(node) {var sc = node; var so = 0; var ec = node; var eo = dom.nodeLength(ec); if (dom.isVoid(sc)) {so = dom.listPrev(sc).length - 1; sc = sc.parentNode; } if (dom.isBR(ec)) {eo = dom.listPrev(ec).length - 1; ec = ec.parentNode; } else if (dom.isVoid(ec)) {eo = dom.listPrev(ec).length; ec = ec.parentNode; } return this.create(sc, so, ec, eo); }, createFromNodeBefore: function(node) {return this.createFromNode(node).collapse(true); }, createFromNodeAfter: function(node) {return this.createFromNode(node).collapse(); }, createFromBookmark : function(editable, bookmark) {var sc = dom.fromOffsetPath(editable, bookmark.s.path); var so = bookmark.s.offset; var ec = dom.fromOffsetPath(editable, bookmark.e.path); var eo = bookmark.e.offset; return new WrappedRange(sc, so, ec, eo); }, createFromParaBookmark: function(bookmark, paras) {var so = bookmark.s.offset; var eo = bookmark.e.offset; var sc = dom.fromOffsetPath(list.head(paras), bookmark.s.path); var ec = dom.fromOffsetPath(list.last(paras), bookmark.e.path); return new WrappedRange(sc, so, ec, eo); } }; })(); var defaults = {version: '0.6.9', options: {defaultTextColor: '#212121', defaultBackColor: '#ddd', followingToolbar: true, otherStaticBarClass: \\\"staticTop\\\", width: null, height: null, minHeight: null, maxHeight: null, focus: false, tabsize: 4, styleWithS\";\n  builder.string += \"pan: true, disableLinkTarget: false, disableDragAndDrop: false, disableResizeEditor: false, shortcuts: true, placeholder: false, prettifyHtml: true, iconPrefix: '', icons: {font: {bold: 'format_bold', italic: 'format_italic', underline: 'format_underlined', clear: 'clear', height: 'format_size', strikethrough: 'strikethrough_s', superscript: 'vertical_align_top', subscript: 'vertical_align_bottom'}, image: {image: 'image', floatLeft: 'format_align_left', floatRight: 'format_align_right', floatNone: 'format_align_justify', shapeRounded: 'crop_3_2', shapeCircle: 'panorama_fish_eye', shapeThumbnail: 'collections', bordered: 'border_outer', shapeNone: 'image', remove: 'delete'}, link: {link: 'insert_link', unlink: 'clear', edit: 'create'}, table: {table: 'border_all'}, hr: {insert: 'add'}, style: {style: 'border_color'}, lists: {unordered: 'format_list_bulleted', ordered: 'format_list_numbered'}, options: {help: 'help', fullscreen: 'settings_overscan', codeview: 'code'}, paragraph: {paragraph: 'format_textdirection_l_to_r', outdent: 'format_indent_decrease', indent: 'format_indent_increase', left: 'format_align_left', center: 'format_align_center', right: 'format_align_right', justify: 'format_align_justify'}, color: {recent: 'format_color_text'}, history: {undo: 'undo', redo: 'redo'}, misc: {check: 'check'} }, codemirror: {mode: 'text/html', htmlMode: true, indentWithTabs: true, tabSize: 4, lineNumbers: true, theme: 'monokai', maxHighlightLength: 'Infinity'}, lang: 'en-US', direction: null, toolbar: [['style', ['style']], ['font', ['bold', 'italic', 'underline', 'clear']], ['fontname', ['fontname']], ['fontsize', ['fontsize']], ['color', ['color']], ['para', ['ul', 'ol', 'paragraph']], ['height', ['height']], ['table', ['table']], ['insert', ['link', 'picture', 'hr']], ['view', ['fullscreen', 'codeview']], ['help', ['help']] ], plugin : {}, airMode: false, airPopover: [['color', ['color']], ['font', ['bold', 'underline', 'clear']], ['para', ['ul', 'paragraph']], ['table', ['table']], ['insert', ['link', 'picture']] ], styleTags: ['p', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'], defaultFontName: 'Roboto', fontNames: ['Roboto', 'Arial', 'Arial Black', 'Comic Sans MS', 'Courier New', 'Helvetica Neue', 'Helvetica', 'Impact', 'Times New Roman', 'Verdana'], fontNamesIgnoreCheck: [], fontSizes: ['12', '13', '14', '15', '16', '17', '18', '25', '37'], colors: [['#fafafa', '#efebe9', '#7e57c2', '#ab47bc', '#5c6bc0', '#42a5f5', '#26c6da', '#66bb6a', '#9ccc65', '#ffee58', '#ffca28', '#ffa726', '#ff7043', '#ef5350', '#ec407a'], ['#f5f5f5', '#d7ccc8', '#673ab7', '#9c27b0', '#3f51b5', '#2196f3', '#00bcd4', '#4caf50', '#8bc34a', '#ffeb3b', '#ffc107', '#ff9800', '#ff5722', '#f44336', '#e91e63'], ['#eeeeee', '#bcaaa4', '#5e35b1', '#8e24aa', '#3949ab', '#1e88e5', '#00acc1', '#43a047', '#7cb342', '#fdd835', '#ffb300', '#fb8c00', '#f4511e', '#e53935', '#d81b60'], ['#e0e0e0', '#a1887f', '#512da8', '#7b1fa2', '#303f9f', '#1976d2', '#0097a7', '#388e3c', '#689f38', '#fbc02d', '#ffa000', '#f57c00', '#e64a19', '#d32f2f', '#c2185b'], ['#bdbdbd', '#8d6e63', '#4527a0', '#6a1b9a', '#283593', '#1565c0', '#00838f', '#2e7d32', '#558b2f', '#f9a825', '#ff8f00', '#ef6c00', '#d84315', '#c62828', '#ad1457'], ['#9e9e9e', '#795548', '#311b92', '#4a148c', '#1a237e', '#0d47a1', '#006064', '#1b5e20', '#33691e', '#f57f17', '#ff6f00', '#e65100', '#bf360c', '#b71c1c', '#880e4f'], ['#757575', '#6d4c41', '#b388ff', '#ea80fc', '#8c9eff', '#82b1ff', '#84ffff', '#b9f6ca', '#ccff90', '#ffff8d', '#ffe57f', '#ffd180', '#ff9e80', '#ff8a80', '#ff80ab'], ['#616161', '#5d4037', '#7c4dff', '#e040fb', '#536dfe', '#448aff', '#18ffff', '#69f0ae', '#b2ff59', '#ffff00', '#ffd740', '#ffab40', '#ff6e40', '#ff5252', '#ff4081'], ['#424242', '#4e342e', '#651fff', '#d500f9', '#3d5afe', '#2979ff', '#00e5ff', '#00e676', '#76ff03', '#ffea00', '#ffc400', '#ff9100', '#ff3d00', '#ff1744', '#f50057'], ['#212121', '#3e2723', '#6200ea', '#aa00ff', '#304ffe', '#2962ff', '#00b8d4', '#00c853', '#64dd17', '#ffd600', '#ffab00', '#ff6d00', '#dd2c00', '#d50000', '#c51162'], ], colorTitles: [['grey lighten5', 'brown lighten5', 'deep-purple lighten1', 'purple lighten1', 'indigo lighten1', 'blue lighten1', 'cyan lighten1', 'green lighten1', 'light-green lighten1', 'yellow lighten1', 'amber lighten1', 'orange lighten1', 'deep-orange lighten1', 'red lighten1', 'pink lighten1'], ['grey lighten4', 'brown lighten4', 'deep-purple',          'purple',          'indigo',          'blue',          'cyan',          'green',          'light-green',          'yellow',          'amber',          'orange',          'deep-orange',          'red',          'pink'         ], ['grey lighten3', 'brown lighten3', 'deep-purple darken1',  'purple darken1',  'indigo darken1',  'blue darken1',  'cyan darken1',  'green darken1',  'light-green darken1',  'yellow darken1',  'amber darken1',  'orange darken1',  'deep-orange darken1',  'red darken1',  'pink darken1' ], ['grey lighten2', 'brown lighten2', 'deep-purple darken2',  'purple darken2',  'indigo darken2',  'blue darken2',  'cyan darken2',  'green darken2',  'light-green darken2',  'yellow darken2',  'amber darken2',  'orange darken2',  'deep-orange darken2',  'red darken2',  'pink darken2' ], ['grey lighten1', 'brown lighten1', 'deep-purple darken3',  'purple darken3',  'indigo darken3',  'blue darken3',  'cyan darken3',  'green darken3',  'light-green darken3',  'yellow darken3',  'amber darken3',  'orange darken3',  'deep-orange darken3',  'red darken3',  'pink darken3' ], ['grey',          'brown',          'deep-purple darken4',  'purple darken4',  'indigo darken4',  'blue darken4',  'cyan darken4',  'green darken4',  'light-green darken4',  'yellow darken4',  'amber darken4',  'orange darken4',  'deep-orange darken4',  'red darken4',  'pink darken4' ], ['grey darken1',  'brown darken1',  'deep-purple accent1',  'purple accent1',  'indigo accent1',  'blue accent1',  'cyan accent1',  'green accent1',  'light-green accent1',  'yellow accent1',  'amber accent1',  'orange accent1',  'deep-orange accent1',  'red accent1',  'pink accent1' ], ['grey darken2',  'brown darken2',  'deep-purple accent2',  'purple accent2',  'indigo accent2',  'blue accent2',  'cyan accent2',  'green accent2',  'light-green accent2',  'yellow accent2',  'amber accent2',  'orange accent2',  'deep-orange accent2',  'red accent2',  'pink accent2' ], ['grey darken3',  'brown darken3',  'deep-purple accent3',  'purple accent3',  'indigo accent3',  'blue accent3',  'cyan accent3',  'green accent3',  'light-green accent3',  'yellow accent3',  'amber accent3',  'orange accent3',  'deep-orange accent3',  'red accent3',  'pink accent3' ], ['grey darken4',  'brown darken4',  'deep-purple accent4',  'purple accent4',  'indigo accent4',  'blue accent4',  'cyan accent4',  'green accent4',  'light-green accent4',  'yellow accent4',  'amber accent4',  'orange accent4',  'deep-orange accent4',  'red accent4',  'pink accent4' ], ], lineHeights: ['1.0', '1.2', '1.4', '1.5', '1.6', '1.8', '2.0', '3.0'], insertTableMaxSize: {col: 12, row: 10 }, maximumImageFileSize: null, oninit: null, onfocus: null, onblur: null, onenter: null, onkeyup: null, onkeydown: null, onImageUpload: null, onImageUploadError: null, onMediaDelete: null, onToolbarClick: null, onsubmit: null, onCreateLink: function(sLinkUrl) {if (sLinkUrl.indexOf('@') !== -1 && sLinkUrl.indexOf(':') === -1) {sLinkUrl =  'mailto:' + sLinkUrl; } return sLinkUrl; }, keyMap: {pc: {'ENTER': 'insertParagraph', 'CTRL+Z': 'undo', 'CTRL+Y': 'redo', 'TAB': 'tab', 'SHIFT+TAB': 'untab', 'CTRL+B': 'bold', 'CTRL+I': 'italic', 'CTRL+U': 'underline', 'CTRL+SHIFT+S': 'strikethrough', 'CTRL+BACKSLASH': 'removeFormat', 'CTRL+SHIFT+L': 'justifyLeft', 'CTRL+SHIFT+E': 'justifyCenter', 'CTRL+SHIFT+R': 'justifyRight', 'CTRL+SHIFT+J': 'justifyFull', 'CTRL+SHIFT+NUM7': 'insertUnorderedList', 'CTRL+SHIFT+NUM8': 'insertOrderedList', 'CTRL+LEFTBRACKET': 'outdent', 'CTRL+RIGHTBRACKET': 'indent', 'CTRL+NUM0': 'formatPara', 'CTRL+NUM1': 'formatH1', 'CTRL+NUM2': 'formatH2', 'CTRL+NUM3': 'formatH3', 'CTRL+NUM4': 'formatH4', 'CTRL+NUM5': 'formatH5', 'CTRL+NUM6': 'formatH6', 'CTRL+ENTER': 'insertHorizontalRule', 'CTRL+K': 'showLinkDialog'}, mac: {'ENTER': 'insertParagraph', 'CMD+Z': 'undo', 'CMD+SHIFT+Z': 'redo', 'TAB': 'tab', 'SHIFT+TAB': 'untab', 'CMD+B': 'bold', 'CMD+I': 'italic', 'CMD+U': 'underline', 'CMD+SHIFT+S': 'strikethrough', 'CMD+BACKSLASH': 'removeFormat', 'CMD+SHIFT+L': 'justifyLeft', 'CMD+SHIFT+E': 'justifyCenter', 'CMD+SHIFT+R': 'justifyRight', 'CMD+SHIFT+J': 'justifyFull', 'CMD+SHIFT+NUM7': 'insertUnorderedList', 'CMD+SHIFT+NUM8': 'insertOrderedList', 'CMD+LEFTBRACKET': 'outdent', 'CMD+RIGHTBRACKET': 'indent', 'CMD+NUM0': 'formatPara', 'CMD+NUM1': 'formatH1', 'CMD+NUM2': 'formatH2', 'CMD+NUM3': 'formatH3', 'CMD+NUM4': 'formatH4', 'CMD+NUM5': 'formatH5', 'CMD+NUM6': 'formatH6', 'CMD+ENTER': 'insertHorizontalRule', 'CMD+K': 'showLinkDialog'} } }, lang: {'en-US': {font: {bold: 'Bold', italic: 'Italic', underline: 'Underline', clear: 'Remove Font Style', height: 'Line Height', name: 'Font Family', strikethrough: 'Strikethrough', subscript: 'Subscript', superscript: 'Superscript', size: 'Font Size'}, image: {image: 'Picture', insert: 'Insert Image', resizeFull: 'Resize Full', resizeHalf: 'Resize Half', resizeQuarter: 'Resize Quarter', floatLeft: 'Float Left', floatRight: 'Float Right', floatNone: 'Float None', shapeRounded: 'Shape: Rounded', shapeCircle: 'Shape: Circle', bordered: 'Bordered', shapeThumbnail: 'Shape: Thumbnail', shapeNone: 'Shape: None', dragImageHere: 'Drag image or text here', dropImage: 'Drop image or Text', selectFromFiles: 'Select from files', maximumFileSize: 'Maximum file size', maximumFileSizeError: 'Maximum file size exceeded.', url: 'Image URL', remove: 'Remove Image'}, link: {link: 'Link', insert: 'Insert Link', unlink: 'Unlink', edit: 'Edit', textToDisplay: 'Text to display', url: 'To what URL should this link go?', openInNewWindow: 'Open in new window'}, table: {table: 'Table', striped: 'Striped', hoverable: 'Hoverable', responsive: 'Responsive', bordered: 'Bordered'}, hr: {insert: 'Insert Horizontal Rule'}, style: {style: 'Style', normal: 'Normal', blockquote: 'Quote', pre: 'Code', h1: 'Header 1', h2: 'Header 2', h3: 'Header 3', h4: 'Header 4', h5: 'Header 5', h6: 'Header 6'}, lists: {unordered: 'Unordered list', ordered: 'Ordered list'}, options: {help: 'Help', fullscreen: 'Full Screen', codeview: 'Code View'}, paragraph: {paragraph: 'Paragraph', outdent: 'Outdent', indent: 'Indent', left: 'Align left', center: 'Align center', right: 'Align right', justify: 'Justify full'}, color: {recent: 'Recent Color', more: 'More Color', background: 'Back', foreground: 'Text', transparent: 'Transparent', setTransparent: 'Transparent', reset: 'Reset', resetToDefault: 'Default'}, shortcut: {shortcuts: 'Keyboard shortcuts', close: 'Close', textFormatting: 'Text formatting', action: 'Action', paragraphFormatting: 'Paragraph formatting', documentStyle: 'Document Style', extraKeys: 'Extra keys'}, history: {undo: 'Undo', redo: 'Redo'} } } }; var async = (function() {var readFileAsDataURL = function(file) {return $.Deferred(function(deferred) {$.extend(new FileReader(), {onload: function(e) {var sDataURL = e.target.result; deferred.resolve(sDataURL); }, onerror: function() {deferred.reject(this); } }).readAsDataURL(file); }).promise(); }; var createImage = function(sUrl, filename) {return $.Deferred(function(deferred) {var $img = $('<img>'); $img.one('load', function() {$img.off('error abort'); deferred.resolve($img); }).one('error abort', function() {$img.off('load').detach(); deferred.reject($img); }).css({display: 'none'}).appendTo(document.body).attr({'src': sUrl, 'data-filename': filename }); }).promise(); }; return {readFileAsDataURL: readFileAsDataURL, createImage: createImage }; })(); var key = (function() {var keyMap = {'BACKSPACE': 8, 'TAB': 9, 'ENTER': 13, 'SPACE': 32, 'NUM0': 48, 'NUM1': 49, 'NUM2': 50, 'NUM3': 51, 'NUM4': 52, 'NUM5': 53, 'NUM6': 54, 'NUM7': 55, 'NUM8': 56, 'B': 66, 'E': 69, 'I': 73, 'J': 74, 'K': 75, 'L': 76, 'R': 82, 'S': 83, 'U': 85, 'Y': 89, 'Z': 90, 'SLASH': 191, 'LEFTBRACKET': 219, 'BACKSLASH': 220, 'RIGHTBRACKET': 221 }; return {isEdit: function(keyCode) {return list.contains([8, 9, 13, 32], keyCode); }, isMove: function(keyCode) {return list.contains([37, 38, 39, 40], keyCode); }, nameFromCode: func.invertObject(keyMap), code: keyMap }; })(); var History = function($editable) {var stack = [], stackOffset = -1; var editable = $editable[0]; var makeSnapshot = function() {var rng = range.create(); var emptyBookmark = {s: {path: [], offset: 0}, e: {path: [], offset: 0}}; return {contents: $editable.html(), bookmark: (rng ? rng.bookmark(editable) : emptyBookmark) }; }; var applySnapshot = function(snapshot) {if (snapshot.contents !== null) {$editable.html(snapshot.contents); } if (snapshot.bookmark !== null) {range.createFromBookmark(editable, snapshot.bookmark).select(); } }; this.undo = function() {if (0 < stackOffset) {stackOffset--; applySnapshot(stack[stackOffset]); } }; this.redo = function() {if (stack.length - 1 > stackOffset) {stackOffset++; applySnapshot(stack[stackOffset]); } }; this.recordUndo = function() {stackOffset++; if (stack.length > stackOffset) {stack = stack.slice(0, stackOffset); } stack.push(makeSnapshot()); }; this.recordUndo(); }; var Style = function() {var jQueryCSS = function($obj, propertyNames) {if (agent.jqueryVersion < 1.9) {var result = {}; $.each(propertyNames, function(idx, propertyName) {result[propertyName] = $obj.css(propertyName); }); return result; } return $obj.css.call($obj, propertyNames); }; this.stylePara = function(rng, styleInfo) {$.each(rng.nodes(dom.isPara, {includeAncestor: true }), function(idx, para) {$(para).css(styleInfo); }); }; this.styleNodes = function(rng, options) {rng = rng.splitText(); var nodeName = options && options.nodeName || 'SPAN'; var expandClosestSibling = !!(options && options.expandClosestSibling); var onlyPartialContains = !!(options && options.onlyPartialContains); if (rng.isCollapsed()) {return [rng.insertNode(dom.create(nodeName))]; } var pred = dom.makePredByNodeName(nodeName); var nodes = $.map(rng.nodes(dom.isText, {fullyContains: true }), function(text) {return dom.singleChildAncestor(text, pred) || dom.wrap(text, nodeName); }); if (expandClosestSibling) {if (onlyPartialContains) {var nodesInRange = rng.nodes(); pred = func.and(pred, function(node) {return list.contains(nodesInRange, node); }); } return $.map(nodes, function(node) {var siblings = dom.withClosestSiblings(node, pred); var head = list.head(siblings); var tails = list.tail(siblings); $.each(tails, function(idx, elem) {dom.appendChildNodes(head, elem.childNodes); dom.remove(elem); }); return list.head(siblings); }); } else {return nodes; } }; this.current = function(rng, target) {var $cont = $(dom.isText(rng.sc) ? rng.sc.parentNode : rng.sc); var properties = ['font-family', 'font-size', 'text-align', 'list-style-type', 'line-height']; var styleInfo = jQueryCSS($cont, properties) || {}; styleInfo['font-size'] = parseInt(styleInfo['font-size'], 10); styleInfo['font-bold'] = document.queryCommandState('bold') ? 'bold' : 'normal'; styleInfo['font-italic'] = document.queryCommandState('italic') ? 'italic' : 'normal'; styleInfo['font-underline'] = document.queryCommandState('underline') ? 'underline' : 'normal'; styleInfo['font-strikethrough'] = document.queryCommandState('strikeThrough') ? 'strikethrough' : 'normal'; styleInfo['font-superscript'] = document.queryCommandState('superscript') ? 'superscript' : 'normal'; styleInfo['font-subscript'] = document.queryCommandState('subscript') ? 'subscript' : 'normal'; if (!rng.isOnList()) {styleInfo['list-style'] = 'none'; } else {var aOrderedType = ['circle', 'disc', 'disc-leading-zero', 'square']; var isUnordered = $.inArray(styleInfo['list-style-type'], aOrderedType) > -1; styleInfo['list-style'] = isUnordered ? 'unordered' : 'ordered'; } var para = dom.ancestor(rng.sc, dom.isPara); if (para && para.style['line-height']) {styleInfo['line-height'] = para.style.lineHeight; } else {var lineHeight = parseInt(styleInfo['line-height'], 10) / parseInt(styleInfo['font-size'], 10); styleInfo['line-height'] = lineHeight.toFixed(1); } styleInfo.image = dom.isImg(target) && target; styleInfo.anchor = rng.isOnAncho\";\n  builder.string += \"r() && dom.ancestor(rng.sc, dom.isAnchor); styleInfo.ancestors = dom.listAncestor(rng.sc, dom.isEditable); styleInfo.range = rng; return styleInfo; }; }; var Bullet = function() {this.insertOrderedList = function() {this.toggleList('OL'); }; this.insertUnorderedList = function() {this.toggleList('UL'); }; this.indent = function() {var self = this; var rng = range.create().wrapBodyInlineWithPara(); var paras = rng.nodes(dom.isPara, { includeAncestor: true }); var clustereds = list.clusterBy(paras, func.peq2('parentNode')); $.each(clustereds, function(idx, paras) {var head = list.head(paras); if (dom.isLi(head)) {self.wrapList(paras, head.parentNode.nodeName); } else {$.each(paras, function(idx, para) {$(para).css('marginLeft', function(idx, val) {return (parseInt(val, 10) || 0) + 25; }); }); } }); rng.select(); }; this.outdent = function() {var self = this; var rng = range.create().wrapBodyInlineWithPara(); var paras = rng.nodes(dom.isPara, { includeAncestor: true }); var clustereds = list.clusterBy(paras, func.peq2('parentNode')); $.each(clustereds, function(idx, paras) {var head = list.head(paras); if (dom.isLi(head)) {self.releaseList([paras]); } else {$.each(paras, function(idx, para) {$(para).css('marginLeft', function(idx, val) {val = (parseInt(val, 10) || 0); return val > 25 ? val - 25 : ''; }); }); } }); rng.select(); }; this.toggleList = function(listName) {var self = this; var rng = range.create().wrapBodyInlineWithPara(); var paras = rng.nodes(dom.isPara, { includeAncestor: true }); var bookmark = rng.paraBookmark(paras); var clustereds = list.clusterBy(paras, func.peq2('parentNode')); if (list.find(paras, dom.isPurePara)) {var wrappedParas = []; $.each(clustereds, function(idx, paras) {wrappedParas = wrappedParas.concat(self.wrapList(paras, listName)); }); paras = wrappedParas; } else {var diffLists = rng.nodes(dom.isList, {includeAncestor: true }).filter(function(listNode) {return !$.nodeName(listNode, listName); }); if (diffLists.length) {$.each(diffLists, function(idx, listNode) {dom.replace(listNode, listName); }); } else {paras = this.releaseList(clustereds, true); } } range.createFromParaBookmark(bookmark, paras).select(); }; this.wrapList = function(paras, listName) {var head = list.head(paras); var last = list.last(paras); var prevList = dom.isList(head.previousSibling) && head.previousSibling; var nextList = dom.isList(last.nextSibling) && last.nextSibling; var listNode = prevList || dom.insertAfter(dom.create(listName || 'UL'), last); paras = $.map(paras, function(para) {return dom.isPurePara(para) ? dom.replace(para, 'LI') : para; }); dom.appendChildNodes(listNode, paras); if (nextList) {dom.appendChildNodes(listNode, list.from(nextList.childNodes)); dom.remove(nextList); } return paras; }; this.releaseList = function(clustereds, isEscapseToBody) {var releasedParas = []; $.each(clustereds, function(idx, paras) {var head = list.head(paras); var last = list.last(paras); var headList = isEscapseToBody ? dom.lastAncestor(head, dom.isList) : head.parentNode; var lastList = headList.childNodes.length > 1 ? dom.splitTree(headList, {node: last.parentNode, offset: dom.position(last) + 1 }, {isSkipPaddingBlankHTML: true }) : null; var middleList = dom.splitTree(headList, {node: head.parentNode, offset: dom.position(head) }, {isSkipPaddingBlankHTML: true }); paras = isEscapseToBody ? dom.listDescendant(middleList, dom.isLi) : list.from(middleList.childNodes).filter(dom.isLi); if (isEscapseToBody || !dom.isList(headList.parentNode)) {paras = $.map(paras, function(para) {return dom.replace(para, 'P'); }); } $.each(list.from(paras).reverse(), function(idx, para) {dom.insertAfter(para, headList); }); var rootLists = list.compact([headList, middleList, lastList]); $.each(rootLists, function(idx, rootList) {var listNodes = [rootList].concat(dom.listDescendant(rootList, dom.isList)); $.each(listNodes.reverse(), function(idx, listNode) {if (!dom.nodeLength(listNode)) {dom.remove(listNode, true); } }); }); releasedParas = releasedParas.concat(paras); }); return releasedParas; }; }; var Typing = function() {var bullet = new Bullet(); this.insertTab = function($editable, rng, tabsize) {var tab = dom.createText(new Array(tabsize + 1).join(dom.NBSP_CHAR)); rng = rng.deleteContents(); rng.insertNode(tab, true); rng = range.create(tab, tabsize); rng.select(); }; this.insertParagraph = function() {var rng = range.create(); rng = rng.deleteContents(); rng = rng.wrapBodyInlineWithPara(); var splitRoot = dom.ancestor(rng.sc, dom.isPara); var nextPara; if (splitRoot) {if (dom.isEmpty(splitRoot) && dom.isLi(splitRoot)) {bullet.toggleList(splitRoot.parentNode.nodeName); return; } else {nextPara = dom.splitTree(splitRoot, rng.getStartPoint()); var emptyAnchors = dom.listDescendant(splitRoot, dom.isEmptyAnchor); emptyAnchors = emptyAnchors.concat(dom.listDescendant(nextPara, dom.isEmptyAnchor)); $.each(emptyAnchors, function(idx, anchor) {dom.remove(anchor); }); } } else {var next = rng.sc.childNodes[rng.so]; nextPara = $(dom.emptyPara)[0]; if (next) {rng.sc.insertBefore(nextPara, next); } else {rng.sc.appendChild(nextPara); } } range.create(nextPara, 0).normalize().select(); }; }; var Table = function() {this.tab = function(rng, isShift) {var cell = dom.ancestor(rng.commonAncestor(), dom.isCell); var table = dom.ancestor(cell, dom.isTable); var cells = dom.listDescendant(table, dom.isCell); var nextCell = list[isShift ? 'prev' : 'next'](cells, cell); if (nextCell) {range.create(nextCell, 0).select(); } }; this.createTable = function(tOptions) {var tds = [], tdHTML; var theaders = []; var colCount = tOptions[0]; var rowCount = tOptions[1]; var classes = tOptions.slice(2, tOptions.length); for (var idxCol = 0; idxCol < colCount; idxCol++) {tds.push('<td>(item)<\\/td>'); theaders.push('<th>header<\\/th>'); } tdHTML = tds.join(''); theaders = theaders.join(''); var trs = [], trHTML; for (var idxRow = 0; idxRow < rowCount; idxRow++) {trs.push('<tr>' + tdHTML + '<\\/tr>'); } trHTML = trs.join(''); return $('<table class=\\\"' + classes.join(' ') + '\\\"><thead><tr>' + theaders + '<\\/tr><\\/thead><tbody>' + trHTML + '<\\/tbody><\\/table>')[0]; }; }; var KEY_BOGUS = 'bogus'; var Editor = function(handler) {var style = new Style(); var table = new Table(); var typing = new Typing(); var bullet = new Bullet(); this.createRange = function($editable) {this.focus($editable); return range.create(); }; this.saveRange = function($editable, thenCollapse) {this.focus($editable); $editable.data('range', range.create()); if (thenCollapse) {range.create().collapse().select(); } }; this.saveNode = function($editable) {var copy = []; for (var key  = 0, len = $editable[0].childNodes.length; key < len; key++) {copy.push($editable[0].childNodes[key]); } $editable.data('childNodes', copy); }; this.restoreRange = function($editable) {var rng = $editable.data('range'); if (rng) {rng.select(); this.focus($editable); } }; this.restoreNode = function($editable) {$editable.html(''); var child = $editable.data('childNodes'); for (var index = 0, len = child.length; index < len; index++) {$editable[0].appendChild(child[index]); } }; this.reset = function($editable) {$editable.html(''); }; this.html = function($editable, html) {$editable.html(html); }; this.getHTML = function($editable) {return $editable.html(); }; this.currentStyle = function(target) {var rng = range.create(); return rng ? rng.isOnEditable() && style.current(rng, target) : false; }; var triggerOnBeforeChange = function($editable) {var $holder = dom.makeLayoutInfo($editable).holder(); handler.bindCustomEvent($holder, $editable.data('callbacks'), 'before.command')($editable.html(), $editable); }; var triggerOnChange = function($editable) {var $holder = dom.makeLayoutInfo($editable).holder(); handler.bindCustomEvent($holder, $editable.data('callbacks'), 'change')($editable.html(), $editable); }; this.undo = function($editable) {triggerOnBeforeChange($editable); $editable.data('NoteHistory').undo(); triggerOnChange($editable); }; this.redo = function($editable) {triggerOnBeforeChange($editable); $editable.data('NoteHistory').redo(); triggerOnChange($editable); }; var self = this; var beforeCommand = this.beforeCommand = function($editable) {triggerOnBeforeChange($editable); self.focus($editable); }; var afterCommand = this.afterCommand = function($editable, isPreventTrigger) {$editable.data('NoteHistory').recordUndo(); if (!isPreventTrigger) {triggerOnChange($editable); } }; var commands = ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript', 'justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull', 'formatBlock', 'removeFormat', 'backColor', 'foreColor', 'fontName']; for (var idx = 0, len = commands.length; idx < len; idx ++) {this[commands[idx]] = (function(sCmd) {return function($editable, value) {beforeCommand($editable); document.execCommand(sCmd, false, value); afterCommand($editable, true); }; })(commands[idx]); } this.insertHorizontalRule = function() {var hrNode = $('<div />'); hrNode.addClass('divider'); range.create().insertNode(hrNode[0]); }; this.tab = function($editable, options) {var rng = this.createRange($editable); if (rng.isCollapsed() && rng.isOnCell()) {table.tab(rng); } else {beforeCommand($editable); typing.insertTab($editable, rng, options.tabsize); afterCommand($editable); } }; this.untab = function($editable) {var rng = this.createRange($editable); if (rng.isCollapsed() && rng.isOnCell()) {table.tab(rng, true); } }; this.insertParagraph = function($editable) {beforeCommand($editable); typing.insertParagraph($editable); afterCommand($editable); }; this.insertOrderedList = function($editable) {beforeCommand($editable); bullet.insertOrderedList($editable); afterCommand($editable); }; this.insertUnorderedList = function($editable) {beforeCommand($editable); bullet.insertUnorderedList($editable); afterCommand($editable); }; this.indent = function($editable) {beforeCommand($editable); bullet.indent($editable); afterCommand($editable); }; this.outdent = function($editable) {beforeCommand($editable); bullet.outdent($editable); afterCommand($editable); }; this.insertImage = function($editable, sUrl, filename) {async.createImage(sUrl, filename).then(function($image) {beforeCommand($editable); $image.css({display: '', width: Math.min($editable.width(), $image.width()) }); range.create().insertNode($image[0]); range.createFromNodeAfter($image[0]).select(); afterCommand($editable); }).fail(function() {var $holder = dom.makeLayoutInfo($editable).holder(); handler.bindCustomEvent($holder, $editable.data('callbacks'), 'image.upload.error')(); }); }; this.insertNode = function($editable, node) {beforeCommand($editable); range.create().insertNode(node); range.createFromNodeAfter(node).select(); afterCommand($editable); }; this.insertText = function($editable, text) {beforeCommand($editable); var textNode = range.create().insertNode(dom.createText(text)); range.create(textNode, dom.nodeLength(textNode)).select(); afterCommand($editable); }; this.pasteHTML = function($editable, markup) {beforeCommand($editable); var contents = range.create().pasteHTML(markup); range.createFromNodeAfter(list.last(contents)).select(); afterCommand($editable); }; this.formatBlock = function($editable, tagName) {beforeCommand($editable); tagName = agent.isMSIE ? '<' + tagName + '>' : tagName; document.execCommand('FormatBlock', false, tagName); afterCommand($editable); }; this.formatPara = function($editable) {beforeCommand($editable); this.formatBlock($editable, 'P'); afterCommand($editable); }; for (var idx = 1; idx <= 6; idx ++) {this['formatH' + idx] = function(idx) {return function($editable) {this.formatBlock($editable, 'H' + idx); }; }(idx); }; this.fontSize = function($editable, value) {var rng = range.create(); var isCollapsed = rng.isCollapsed(); if (isCollapsed) {var spans = style.styleNodes(rng); var firstSpan = list.head(spans); $(spans).css({'font-size': value + 'px'}); if (firstSpan && !dom.nodeLength(firstSpan)) {firstSpan.innerHTML = dom.ZERO_WIDTH_NBSP_CHAR; range.createFromNodeAfter(firstSpan.firstChild).select(); $editable.data(KEY_BOGUS, firstSpan); } } else {beforeCommand($editable); $(style.styleNodes(rng)).css({'font-size': value + 'px'}); afterCommand($editable); } }; this.removeBogus = function($editable) {var bogusNode = $editable.data(KEY_BOGUS); if (!bogusNode) {return; } var textNode = list.find(list.from(bogusNode.childNodes), dom.isText); var bogusCharIdx = textNode.nodeValue.indexOf(dom.ZERO_WIDTH_NBSP_CHAR); if (bogusCharIdx !== -1) {textNode.deleteData(bogusCharIdx, 1); } if (dom.isEmpty(bogusNode)) {dom.remove(bogusNode); } $editable.removeData(KEY_BOGUS); }; this.lineHeight = function($editable, value) {beforeCommand($editable); style.stylePara(range.create(), {lineHeight: value }); afterCommand($editable); }; this.unlink = function($editable) {var rng = this.createRange($editable); if (rng.isOnAnchor()) {var anchor = dom.ancestor(rng.sc, dom.isAnchor); rng = range.createFromNode(anchor); rng.select(); beforeCommand($editable); document.execCommand('unlink'); afterCommand($editable); } }; this.createLink = function($editable, linkInfo, options) {var linkUrl = linkInfo.url; var linkText = linkInfo.text; var isNewWindow = linkInfo.newWindow; var rng = linkInfo.range; var isTextChanged = rng.toString() !== linkText; beforeCommand($editable); if (options.onCreateLink) {linkUrl = options.onCreateLink(linkUrl); } var anchors = []; if (isTextChanged) {var anchor = rng.insertNode($('<A>' + linkText + '<\\/A>')[0]); anchors.push(anchor); } else {anchors = style.styleNodes(rng, {nodeName: 'A', expandClosestSibling: true, onlyPartialContains: true }); } $.each(anchors, function(idx, anchor) {$(anchor).attr('href', linkUrl); if (isNewWindow) {$(anchor).attr('target', '_blank'); } else {$(anchor).removeAttr('target'); } }); var startRange = range.createFromNodeBefore(list.head(anchors)); var startPoint = startRange.getStartPoint(); var endRange = range.createFromNodeAfter(list.last(anchors)); var endPoint = endRange.getEndPoint(); range.create(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset ).select(); afterCommand($editable); }; this.getLinkInfo = function($editable) {this.focus($editable); var rng = range.create().expand(dom.isAnchor); var $anchor = $(list.head(rng.nodes(dom.isAnchor))); return {range: rng, text: rng.toString(), isNewWindow: $anchor.length ? $anchor.attr('target') === '_blank' : false, url: $anchor.length ? $anchor.attr('href') : ''}; }; this.color = function($editable, sObjColor) {var oColor = JSON.parse(sObjColor); var foreColor = oColor.foreColor, backColor = oColor.backColor; beforeCommand($editable); if (foreColor) { document.execCommand('foreColor', false, foreColor); } if (backColor) { document.execCommand('backColor', false, backColor); } afterCommand($editable); }; this.insertTable = function($editable, sDim) {var tOptions = sDim.split('x'); beforeCommand($editable); var rng = range.create().deleteContents(); rng.insertNode(table.createTable(tOptions)); afterCommand($editable); }; this.floatMe = function($editable, value, $target) {beforeCommand($editable); $target.css('float', value); afterCommand($editable); }; this.imageShape = function($editable, value, $target) {beforeCommand($editable); $target.removeClass('img-rounded img-circle img-thumbnail img-bordered'); if (value) {$target.addClass(value); } afterCommand($editable); }; this.imageClass = function($editable, value, $target) {beforeCommand($editable); if (value) {if ($target.hasClass(value)) {$target.removeClass(value); } else {$target.addClass(value); } } afterCommand($editable); }; this.resize = function($editable, value, $target) {beforeCommand($editable); $target.css({width: value * 100 + '%', height: ''}); afterCommand($editable); }; this.resizeTo = function(pos, $target, bKeepRatio) {var imageSize; if (bKeepRatio) {var newRatio = pos.y / pos.x; var ratio = $target.data('ratio'); imageSize = {width: ratio > newRatio ? pos.x : pos.y / ratio, height: ratio > newRatio ? pos.x * ratio : pos.y }; } else {imageSize = {width: pos.x, height: pos.y }; } $target.css(imageSize); }; this.removeMedia = function($editable, value, $target) {beforeCommand($editable); $target.detach(); handler.bindCustomEvent($(), $editable.data('callbacks'), 'media.delete')($target, $editable); afterCommand($editable); }; this.focus = function($editable) {$e\";\n  builder.string += \"ditable.focus(); if (agent.isFF && !range.create().isOnEditable()) {range.createFromNode($editable[0]) .normalize() .collapse() .select(); } }; this.isEmpty = function($editable) {return dom.isEmpty($editable[0]) || dom.emptyPara === $editable.html(); }; }; var Button = function() {this.update = function($container, styleInfo) {var checkDropdownMenu = function($btn, value) {$btn.find('.dropdown-menu li').each(function() {var div = $(this).children('div'); var currentValue = div.data('value'); if ((currentValue + '') === (value + '')) {div.children('i').removeClass('transparent'); } else {div.children('i').addClass('transparent'); } }); }; var btnState = function(selector, pred) {var $btn = $container.find(selector); $btn.toggleClass('active', pred()); }; if (styleInfo.image) {var $img = $(styleInfo.image); btnState('.btn[data-event=\\\"imageClass\\\"][data-value=\\\"img-rounded\\\"]', function() {return $img.hasClass('img-rounded'); }); btnState('.btn[data-event=\\\"imageClass\\\"][data-value=\\\"img-circle\\\"]', function() {return $img.hasClass('img-circle'); }); btnState('.btn[data-event=\\\"imageClass\\\"][data-value=\\\"img-thumbnail\\\"]', function() {return $img.hasClass('img-thumbnail'); }); btnState('.btn[data-event=\\\"imageClass\\\"][data-value=\\\"img-bordered\\\"]', function() {return $img.hasClass('img-bordered'); }); btnState('.btn[data-event=\\\"imageShape\\\"]:not([data-value])', function() {return !$img.is('.img-rounded, .img-circle, .img-thumbnail, .img-bordered'); }); var imgFloat = $img.css('float'); btnState('.btn[data-event=\\\"floatMe\\\"][data-value=\\\"left\\\"]', function() {return imgFloat === 'left'; }); btnState('.btn[data-event=\\\"floatMe\\\"][data-value=\\\"right\\\"]', function() {return imgFloat === 'right'; }); btnState('.btn[data-event=\\\"floatMe\\\"][data-value=\\\"none\\\"]', function() {return imgFloat !== 'left' && imgFloat !== 'right'; }); var style = $img.attr('style'); btnState('.btn[data-event=\\\"resize\\\"][data-value=\\\"1\\\"]', function() {return !!/(^|\\\\s)(max-)?width\\\\s*:\\\\s*100%/.test(style); }); btnState('.btn[data-event=\\\"resize\\\"][data-value=\\\"0.5\\\"]', function() {return !!/(^|\\\\s)(max-)?width\\\\s*:\\\\s*50%/.test(style); }); btnState('.btn[data-event=\\\"resize\\\"][data-value=\\\"0.25\\\"]', function() {return !!/(^|\\\\s)(max-)?width\\\\s*:\\\\s*25%/.test(style); }); return; } var $fontname = $container.find('.note-fontname[data-name=fontname]'); if ($fontname.length) {var selectedFont = styleInfo['font-family']; if (!!selectedFont) {var list = selectedFont.split(','); for (var i = 0, len = list.length; i < len; i++) {selectedFont = list[i].replace(/[\\\\'\\\\\\\"]/g, '').replace(/\\\\s+$/, '').replace(/^\\\\s+/, ''); if (agent.isFontInstalled(selectedFont)) {break; } } $fontname.find('.note-current-fontname').text(selectedFont); checkDropdownMenu($fontname, selectedFont); } } var $fontsize = $container.find('.note-fontsize[data-name=fontsize]'); $fontsize.find('.note-current-fontsize').text(styleInfo['font-size']); checkDropdownMenu($fontsize, parseFloat(styleInfo['font-size'])); var $lineHeight = $container.find('.note-height[data-name=lineheight]'); checkDropdownMenu($lineHeight, parseFloat(styleInfo['line-height'])); btnState('.btn[data-event=\\\"bold\\\"]', function() {return styleInfo['font-bold'] === 'bold'; }); btnState('.btn[data-event=\\\"italic\\\"]', function() {return styleInfo['font-italic'] === 'italic'; }); btnState('.btn[data-event=\\\"underline\\\"]', function() {return styleInfo['font-underline'] === 'underline'; }); btnState('.btn[data-event=\\\"strikethrough\\\"]', function() {return styleInfo['font-strikethrough'] === 'strikethrough'; }); btnState('.btn[data-event=\\\"superscript\\\"]', function() {return styleInfo['font-superscript'] === 'superscript'; }); btnState('.btn[data-event=\\\"subscript\\\"]', function() {return styleInfo['font-subscript'] === 'subscript'; }); btnState('.btn[data-event=\\\"justifyLeft\\\"]', function() {return styleInfo['text-align'] === 'left' || styleInfo['text-align'] === 'start'; }); btnState('.btn[data-event=\\\"justifyCenter\\\"]', function() {return styleInfo['text-align'] === 'center'; }); btnState('.btn[data-event=\\\"justifyRight\\\"]', function() {return styleInfo['text-align'] === 'right'; }); btnState('.btn[data-event=\\\"justifyFull\\\"]', function() {return styleInfo['text-align'] === 'justify'; }); btnState('.btn[data-event=\\\"insertUnorderedList\\\"]', function() {return styleInfo['list-style'] === 'unordered'; }); btnState('.btn[data-event=\\\"insertOrderedList\\\"]', function() {return styleInfo['list-style'] === 'ordered'; }); }; this.updateRecentColor = function(button, eventName, value) {var $color = $(button).closest('.note-color'); var $recentColor = $color.find('.note-recent-color'); var colorInfo = JSON.parse($recentColor.attr('data-value')); var sKey = eventName === 'backColor' ? 'background-color' : 'color'; colorInfo[eventName] = value; $recentColor.attr('data-value', JSON.stringify(colorInfo)); $recentColor.css(sKey, value); }; }; var Toolbar = function() {var button = new Button(); this.update = function($toolbar, styleInfo) {button.update($toolbar, styleInfo); }; this.updateRecentColor = function(buttonNode, eventName, value) {button.updateRecentColor(buttonNode, eventName, value); }; this.activate = function($toolbar) {$toolbar.find('button, .btn') .not('.btn[data-event=\\\"codeview\\\"]') .removeClass('disabled'); }; this.deactivate = function($toolbar) {$toolbar.find('button, .btn') .not('.btn[data-event=\\\"codeview\\\"]') .addClass('disabled'); }; this.updateFullscreen = function($container, bFullscreen) {var $btn = $container.find('.btn[data-event=\\\"fullscreen\\\"]'); $btn.toggleClass('active', bFullscreen); }; this.updateCodeview = function($container, isCodeview) {var $btn = $container.find('.btn[data-event=\\\"codeview\\\"]'); $btn.toggleClass('active', isCodeview); if (isCodeview) {this.deactivate($container); } else {this.activate($container); } }; this.get = function($editable, name) {var $toolbar = dom.makeLayoutInfo($editable).toolbar(); return $toolbar.find('[data-name=' + name + ']'); }; this.setButtonState = function($editable, name, isActive) {isActive = (isActive === false) ? false : true; var $button = this.get($editable, name); $button.toggleClass('active', isActive); }; }; var EDITABLE_PADDING = 24; var Statusbar = function() {var $document = $(document); this.attach = function(layoutInfo, options) {if (!options.disableResizeEditor) {layoutInfo.statusbar().on('mousedown', hStatusbarMousedown); } }; var hStatusbarMousedown = function(event) {event.preventDefault(); event.stopPropagation(); var $editable = dom.makeLayoutInfo(event.target).editable(); var editableTop = $editable.offset().top - $document.scrollTop(); var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target); var options = layoutInfo.editor().data('options'); $document.on('mousemove', function(event) {var nHeight = event.clientY - (editableTop + EDITABLE_PADDING); nHeight = (options.minHeight > 0) ? Math.max(nHeight, options.minHeight) : nHeight; nHeight = (options.maxHeight > 0) ? Math.min(nHeight, options.maxHeight) : nHeight; $editable.height(nHeight); }).one('mouseup', function() {$document.off('mousemove'); }); }; }; var Popover = function() {var button = new Button(); var posFromPlaceholder = function(placeholder, isAirMode) {var $placeholder = $(placeholder); var pos = isAirMode ? $placeholder.offset() : $placeholder.position(); var height = $placeholder.outerHeight(true); return {left: pos.left, top: pos.top + height }; }; var showPopover = function($popover, pos) {$popover.css({display: 'block', left: pos.left, top: pos.top }); }; var PX_POPOVER_ARROW_OFFSET_X = 20; this.update = function($popover, styleInfo, isAirMode) {button.update($popover, styleInfo); var $linkPopover = $popover.find('.note-link-popover'); if (styleInfo.anchor) {var $anchor = $linkPopover.find('a'); var href = $(styleInfo.anchor).attr('href'); var target = $(styleInfo.anchor).attr('target'); $anchor.attr('href', href).html(href); if (!target) {$anchor.removeAttr('target'); } else {$anchor.attr('target', '_blank'); } showPopover($linkPopover, posFromPlaceholder(styleInfo.anchor, isAirMode)); } else {$linkPopover.hide(); } var $imagePopover = $popover.find('.note-image-popover'); if (styleInfo.image) {showPopover($imagePopover, posFromPlaceholder(styleInfo.image, isAirMode)); } else {$imagePopover.hide(); } var $airPopover = $popover.find('.note-air-popover'); if (isAirMode && !styleInfo.range.isCollapsed()) {var rect = list.last(styleInfo.range.getClientRects()); if (rect) {var bnd = func.rect2bnd(rect); showPopover($airPopover, {left: Math.max(bnd.left + bnd.width / 2 - PX_POPOVER_ARROW_OFFSET_X, 0), top: bnd.top + bnd.height }); } } else {$airPopover.hide(); } }; this.updateRecentColor = function(button, eventName, value) {button.updateRecentColor(button, eventName, value); }; this.hide = function($popover) {$popover.children().hide(); }; }; var Handle = function(handler) {var $document = $(document); var hHandleMousedown = function(event) {if (dom.isControlSizing(event.target)) {event.preventDefault(); event.stopPropagation(); var layoutInfo = dom.makeLayoutInfo(event.target), $handle = layoutInfo.handle(), $popover = layoutInfo.popover(), $editable = layoutInfo.editable(), $editor = layoutInfo.editor(); var target = $handle.find('.note-control-selection').data('target'), $target = $(target), posStart = $target.offset(), scrollTop = $document.scrollTop(); var isAirMode = $editor.data('options').airMode; $document.on('mousemove', function(event) {handler.invoke('editor.resizeTo', {x: event.clientX - posStart.left, y: event.clientY - (posStart.top - scrollTop) }, $target, !event.shiftKey); handler.invoke('handle.update', $handle, {image: target}, isAirMode); handler.invoke('popover.update', $popover, {image: target}, isAirMode); }).one('mouseup', function() {$document.off('mousemove'); handler.invoke('editor.afterCommand', $editable); }); if (!$target.data('ratio')) {$target.data('ratio', $target.height() / $target.width()); } } }; this.attach = function(layoutInfo) {layoutInfo.handle().on('mousedown', hHandleMousedown); }; this.update = function($handle, styleInfo, isAirMode) {var $selection = $handle.find('.note-control-selection'); if (styleInfo.image) {var $image = $(styleInfo.image); var pos = isAirMode ? $image.offset() : $image.position(); var imageSize = {w: $image.outerWidth(true), h: $image.outerHeight(true) }; $selection.css({display: 'block', left: pos.left, top: pos.top, width: imageSize.w, height: imageSize.h }).data('target', styleInfo.image); var sizingText = imageSize.w + 'x' + imageSize.h; $selection.find('.note-control-selection-info').text(sizingText); } else {$selection.hide(); } }; this.hide = function($handle) {$handle.children().hide(); }; }; var Fullscreen = function(handler) {var $window = $(window); var $scrollbar = $('html, body'); this.toggle = function(layoutInfo) {var $editor = layoutInfo.editor(), $toolbar = layoutInfo.toolbar(), $editable = layoutInfo.editable(), $codable = layoutInfo.codable(); var resize = function(size) {$editable.css('height', size.h); $codable.css('height', size.h); if ($codable.data('cmeditor')) {$codable.data('cmeditor').setsize(null, size.h); } }; $editor.toggleClass('fullscreen'); var isFullscreen = $editor.hasClass('fullscreen'); if (isFullscreen) {$editable.data('orgheight', $editable.css('height')); $window.on('resize', function() {resize({h: $window.height() - $toolbar.outerHeight() }); }).trigger('resize'); $scrollbar.css('overflow', 'hidden'); $toolbar.css('top', 0); } else {$window.off('resize'); resize({h: $editable.data('orgheight') }); $scrollbar.css('overflow', 'visible'); } handler.invoke('toolbar.updateFullscreen', $toolbar, isFullscreen); }; }; var CodeMirror; if (agent.hasCodeMirror) {if (agent.isSupportAmd) {require(['CodeMirror'], function(cm) {CodeMirror = cm; }); } else {CodeMirror = window.CodeMirror; } } var Codeview = function(handler) {this.sync = function(layoutInfo) {var isCodeview = handler.invoke('codeview.isActivated', layoutInfo); if (isCodeview && agent.hasCodeMirror) {layoutInfo.codable().data('cmEditor').save(); } }; this.isActivated = function(layoutInfo) {var $editor = layoutInfo.editor(); return $editor.hasClass('codeview'); }; this.toggle = function(layoutInfo) {if (this.isActivated(layoutInfo)) {this.deactivate(layoutInfo); } else {this.activate(layoutInfo); } }; this.activate = function(layoutInfo) {var $editor = layoutInfo.editor(), $toolbar = layoutInfo.toolbar(), $editable = layoutInfo.editable(), $codable = layoutInfo.codable(), $popover = layoutInfo.popover(), $handle = layoutInfo.handle(); var options = $editor.data('options'); var codeString = dom.html($editable, false); function beautifyHTML(code, level, insideLastBlock, dictionary) {var openTag = code.indexOf('<'); var closeTag = code.indexOf('>'); var chunk; if (openTag === 0) {chunk = code.substring(0, closeTag + 1); code = code.substring(closeTag + 1); if (chunk.indexOf(\\\"<\\/\\\") === 0) {level--; nsideLastBlock = false; } else {if (insideLastBlock) {level++; } var found = false; for (var i = 0; i < dictionary.length; i++) {if (chunk.indexOf(dictionary[i]) === 0) {found = true; break; } } if (!found) {insideLastBlock = true; } else {insideLastBlock = false; } } } else {chunk = code.substring(0, openTag); code = code.substring(openTag); if (insideLastBlock) {level++; } insideLastBlock = false; } chunk = new Array(level + 1).join('    ') + chunk.trim(); if (code.length === 0) {return chunk; } return chunk + \\\"\\\\n\\\" + beautifyHTML(code.trim(), level, insideLastBlock, dictionary); } var selfCloseTags = ['<img', '<br', '<hr']; codeString = beautifyHTML(codeString, 0, false, selfCloseTags); $codable.val(codeString); var buttonHeight = $toolbar.find('.btn[data-event=codeview]').height(); var areaHeight = $(window).height() - buttonHeight; $codable.height($editable.height()); handler.invoke('toolbar.updateCodeview', $toolbar, true); handler.invoke('popover.hide', $popover); handler.invoke('handle.hide', $handle); $editor.addClass('codeview'); $codable.focus(); if (agent.hasCodeMirror) {var cmEditor = CodeMirror.fromTextArea($codable[0], options.codemirror); if (options.codemirror.tern) {var server = new CodeMirror.TernServer(options.codemirror.tern); cmEditor.ternServer = server; cmEditor.on('cursorActivity', function(cm) {server.updateArgHints(cm); }); } if ($editor.hasClass('fullscreen')) {cmEditor.setSize(null, areaHeight); } else {cmEditor.setSize(null, $editable.outerHeight()); } $codable.data('cmEditor', cmEditor); } }; this.deactivate = function(layoutInfo) {var $holder = layoutInfo.holder(), $editor = layoutInfo.editor(), $toolbar = layoutInfo.toolbar(), $editable = layoutInfo.editable(), $codable = layoutInfo.codable(); var options = $editor.data('options'); if (agent.hasCodeMirror) {var cmEditor = $codable.data('cmEditor'); $codable.val(cmEditor.getValue()); cmEditor.toTextArea(); } var value = dom.value($codable, options.prettifyHtml) || dom.emptyPara; var isChange = $editable.html() !== value; $editable.html(value); $editable.height(options.height ? $codable.height() : 'auto'); $editor.removeClass('codeview'); if (isChange) {handler.bindCustomEvent($holder, $editable.data('callbacks'), 'change')($editable.html(), $editable); } $editable.focus(); handler.invoke('toolbar.updateCodeview', $toolbar, false); }; }; var DragAndDrop = function(handler) {var $document = $(document); this.attach = function(layoutInfo, options) {if (options.airMode || options.disableDragAndDrop) {$document.on('drop', function(e) {e.preventDefault(); }); } else {this.attachDragAndDropEvent(layoutInfo, options); } }; this.attachDragAndDropEvent = function(layoutInfo, options) {var collection = $(), $editor = layoutInfo.editor(), $dropzone = layoutInfo.dropzone(), $dropzoneMessage = $dropzone.find('.note-dropzone-message'); $document.on('dragenter', function(e) {var isCodeview = handler.invoke('codeview.isActivated', layoutInfo); var hasEditorSize = $editor.width() > 0 && $editor.height() > 0; if (!isCodeview && !collection.length && hasEditorSize) {$editor.addClass('dragover'); $dropzone.width($editor.width()); $dropzone.height($editor.height()); $dropzoneMessage.text(options.langInfo.image.dragImageHere); } collection = collection.add(e.target); }).on('dragleave', function(e) {collection = collection.not(e.target); if (!collection.length) {$editor.removeClass('dragover'); } }).on('drop', function() {collection = $(); $editor.removeClass('dragover'); }); $dropzone.o\";\n  builder.string += \"n('dragenter', function() {$dropzone.addClass('hover'); $dropzoneMessage.text(options.langInfo.image.dropImage); }).on('dragleave', function() {$dropzone.removeClass('hover'); $dropzoneMessage.text(options.langInfo.image.dragImageHere); }); $dropzone.on('drop', function(event) {var dataTransfer = event.originalEvent.dataTransfer; var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target); if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {event.preventDefault(); layoutInfo.editable().focus(); handler.insertImages(layoutInfo, dataTransfer.files); } else {var insertNodefunc = function() {layoutInfo.holder().materialnote('insertNode', this); }; for (var i = 0, len = dataTransfer.types.length; i < len; i++) {var type = dataTransfer.types[i]; var content = dataTransfer.getData(type); if (type.toLowerCase().indexOf('text') > -1) {layoutInfo.holder().materialnote('pasteHTML', content); } else {$(content).each(insertNodefunc); } } } }).on('dragover', false); }; }; var Clipboard = function(handler) {var $paste; this.attach = function(layoutInfo) {if (window.clipboardData || agent.isFF) {$paste = $('<div />').attr('contenteditable', true).css({position : 'absolute', left : -100000, 'opacity' : 0 }); layoutInfo.editable().after($paste); $paste.one('paste', hPasteClipboardImage); layoutInfo.editable().on('keydown', function(e) {if (e.ctrlKey && e.keyCode === 86) {handler.invoke('saveRange', layoutInfo.editable()); if ($paste) {$paste.focus(); } } }); } layoutInfo.editable().on('paste', hPasteClipboardImage); }; var hPasteClipboardImage = function(event) {var clipboardData = event.originalEvent.clipboardData; var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target); var $editable = layoutInfo.editable(); if (!clipboardData || !clipboardData.items || !clipboardData.items.length) {var callbacks = $editable.data('callbacks'); if (!callbacks.onImageUpload) {return; } setTimeout(function() {if (!$paste) {return; } var imgNode = $paste[0].firstChild; if (!imgNode) {return; } handler.invoke('restoreRange', $editable); if (!dom.isImg(imgNode)) {handler.invoke('pasteHTML', $editable, $paste.html()); } else {var datauri = imgNode.src; var data = atob(datauri.split(',')[1]); var array = new Uint8Array(data.length); for (var i = 0; i < data.length; i++) {array[i] = data.charCodeAt(i); } var blob = new Blob([array], { type : 'image/png' }); blob.name = 'clipboard.png'; handler.invoke('focus', $editable); handler.insertImages(layoutInfo, [blob]); } $paste.remove(); }, 0); return; } var item = list.head(clipboardData.items); var isClipboardImage = item.kind === 'file' && item.type.indexOf('image/') !== -1; if (isClipboardImage) {handler.insertImages(layoutInfo, [item.getAsFile()]); } handler.invoke('editor.afterCommand', $editable); }; }; var LinkDialog = function(handler) {var toggleBtn = function($btn, isEnable) {$btn.toggleClass('disabled', !isEnable); $btn.attr('disabled', !isEnable); }; var bindEnterKey = function($input, $btn) {$input.on('keypress', function(event) {if (event.keyCode === key.code.ENTER) {$btn.trigger('click'); } }); }; this.showLinkDialog = function($editable, $dialog, linkInfo) {return $.Deferred(function(deferred) {var $linkDialog = $dialog.find('.note-link-dialog'); var $linkText = $linkDialog.find('.note-link-text'), $linkTextLabel = $linkText.next('label'), $linkUrl = $linkDialog.find('.note-link-url'), $linkBtn = $linkDialog.find('.note-link-btn'), $closeBtn = $linkDialog.find('.btnClose'); var $openInNewWindow = $linkDialog.find('input[type=checkbox]'); $linkDialog.openModal(); $linkText.val(linkInfo.text); if (linkInfo.text.length > 0) $linkTextLabel.addClass('active'); $linkText.on('keyup', function() {toggleBtn($linkBtn, $linkText.val() && $linkUrl.val()); linkInfo.text = $linkText.val(); }); $closeBtn.click(function(event) {event.preventDefault(); $linkDialog.closeModal(); }); if (!linkInfo.url) {linkInfo.url = linkInfo.text || 'http://'; toggleBtn($linkBtn, linkInfo.text); } $linkUrl.on('keyup', function() {toggleBtn($linkBtn, $linkText.val() && $linkUrl.val()); if (!linkInfo.text) {$linkTextLabel.addClass('active'); $linkText.val($linkUrl.val()); } }).val(linkInfo.url).trigger('focus').trigger('select'); bindEnterKey($linkUrl, $linkBtn); bindEnterKey($linkText, $linkBtn); $openInNewWindow.prop('checked', linkInfo.newWindow); $linkBtn.one('click', function(event) {event.preventDefault(); deferred.resolve({range: linkInfo.range, url: $linkUrl.val(), text: $linkText.val(), newWindow: $openInNewWindow.is(':checked') }); $('.note-link-text').val(''); $('.note-link-text').next('label').removeClass('active'); $('.note-link-url').val(''); $linkDialog.closeModal(); }); }).promise(); }; this.show = function(layoutInfo) {var $editor = layoutInfo.editor(), $dialog = layoutInfo.dialog(), $editable = layoutInfo.editable(), $popover = layoutInfo.popover(), linkInfo = handler.invoke('editor.getLinkInfo', $editable); var options = $editor.data('options'); handler.invoke('editor.saveRange', $editable); this.showLinkDialog($editable, $dialog, linkInfo).then(function(linkInfo) {handler.invoke('editor.restoreRange', $editable); handler.invoke('editor.createLink', $editable, linkInfo, options); handler.invoke('popover.hide', $popover); }).fail(function() {handler.invoke('editor.restoreRange', $editable); }); }; }; var ImageDialog = function(handler) {var toggleBtn = function($btn, isEnable) {$btn.toggleClass('disabled', !isEnable); $btn.attr('disabled', !isEnable); }; var bindEnterKey = function($input, $btn) {$input.on('keypress', function(event) {if (event.keyCode === key.code.ENTER) {$btn.trigger('click'); } }); }; this.show = function(layoutInfo) {var $dialog = layoutInfo.dialog(), $editable = layoutInfo.editable(); handler.invoke('editor.saveRange', $editable); this.showImageDialog($editable, $dialog).then(function(data) {handler.invoke('editor.restoreRange', $editable); if (typeof data === 'string') {handler.invoke('editor.insertImage', $editable, data); } else {handler.insertImages(layoutInfo, data); } }).fail(function() {handler.invoke('editor.restoreRange', $editable); }); }; this.showImageDialog = function($editable, $dialog) {return $.Deferred(function(deferred) {var $imageDialog = $dialog.find('.note-image-dialog'); var $imageInput = $dialog.find('.note-image-input'), $imageUrl = $dialog.find('.note-image-url'), $imageBtn = $dialog.find('.note-image-btn'), $closeBtn = $imageDialog.find('.btnClose'); $imageDialog.openModal(); $imageInput.replaceWith($imageInput.clone() .on('change', function() {deferred.resolve(this.files || this.value); $imageUrl.val(''); $imageDialog.closeModal(); deferred.resolve(); }) .val('') ); $imageBtn.click(function(event) {event.preventDefault(); deferred.resolve($imageUrl.val()); $imageUrl.val(''); $imageDialog.closeModal(); deferred.resolve(); }); $closeBtn.click(function(event) {event.preventDefault(); $imageDialog.closeModal(); }); $imageUrl.on('keyup paste', function(event) {var url; if (event.type === 'paste') {url = event.originalEvent.clipboardData.getData('text'); } else {url = $imageUrl.val(); } toggleBtn($imageBtn, url); }); bindEnterKey($imageUrl, $imageBtn); }); }; }; var HelpDialog = function(handler) {this.showHelpDialog = function($editable, $dialog) {return $.Deferred(function(deferred) {var $helpDialog = $dialog.find('.note-help-dialog'); $helpDialog.openModal(); deferred.resolve(); }).promise(); }; this.show = function(layoutInfo) {var $dialog = layoutInfo.dialog(), $editable = layoutInfo.editable(); handler.invoke('editor.saveRange', $editable, true); this.showHelpDialog($editable, $dialog).then(function() {handler.invoke('editor.restoreRange', $editable); }); }; }; var EventHandler = function() {var modules = this.modules = {editor: new Editor(this), toolbar: new Toolbar(this), statusbar: new Statusbar(this), popover: new Popover(this), handle: new Handle(this), fullscreen: new Fullscreen(this), codeview: new Codeview(this), dragAndDrop: new DragAndDrop(this), clipboard: new Clipboard(this), linkDialog: new LinkDialog(this), imageDialog: new ImageDialog(this), helpDialog: new HelpDialog(this) }; this.invoke = function() {var moduleAndMethod = list.head(list.from(arguments)); var args = list.tail(list.from(arguments)); var splits = moduleAndMethod.split('.'); var hasSeparator = splits.length > 1; var moduleName = hasSeparator && list.head(splits); var methodName = hasSeparator ? list.last(splits) : list.head(splits); var module = this.getModule(moduleName); var method = module[methodName]; return method && method.apply(module, args); }; this.getModule = function(moduleName) {return this.modules[moduleName] || this.modules.editor; }; var bindCustomEvent = this.bindCustomEvent = function($holder, callbacks, eventNamespace) {return function() {var callback = callbacks[func.namespaceToCamel(eventNamespace, 'on')]; if (callback) {callback.apply($holder[0], arguments); } return $holder.trigger('materialnote.' + eventNamespace, arguments); }; }; this.insertImages = function(layoutInfo, files) {var $editor = layoutInfo.editor(), $editable = layoutInfo.editable(), $holder = layoutInfo.holder(); var callbacks = $editable.data('callbacks'); var options = $editor.data('options'); if (callbacks.onImageUpload) {bindCustomEvent($holder, callbacks, 'image.upload')(files); } else {$.each(files, function(idx, file) {var filename = file.name; if (options.maximumImageFileSize && options.maximumImageFileSize < file.size) {bindCustomEvent($holder, callbacks, 'image.upload.error')(options.langInfo.image.maximumFileSizeError); } else {async.readFileAsDataURL(file).then(function(sDataURL) {modules.editor.insertImage($editable, sDataURL, filename); }).fail(function() {bindCustomEvent($holder, callbacks, 'image.upload.error')(options.langInfo.image.maximumFileSizeError); }); } }); } }; var commands = {showLinkDialog: function(layoutInfo) {modules.linkDialog.show(layoutInfo); }, showImageDialog: function(layoutInfo) {modules.imageDialog.show(layoutInfo); }, showHelpDialog: function(layoutInfo) {modules.helpDialog.show(layoutInfo); }, fullscreen: function(layoutInfo) {modules.fullscreen.toggle(layoutInfo); }, codeview: function(layoutInfo) {modules.codeview.toggle(layoutInfo); } }; var hMousedown = function(event) {if (dom.isImg(event.target)) {event.preventDefault(); } }; var hKeyupAndMouseup = function(event) {var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target); modules.editor.removeBogus(layoutInfo.editable()); hToolbarAndPopoverUpdate(event); }; var hToolbarAndPopoverUpdate = function(event) {setTimeout(function() {var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target); var styleInfo = modules.editor.currentStyle(event.target); if (!styleInfo) { return; } var isAirMode = layoutInfo.editor().data('options').airMode; if (!isAirMode) {modules.toolbar.update(layoutInfo.toolbar(), styleInfo); } modules.popover.update(layoutInfo.popover(), styleInfo, isAirMode); modules.handle.update(layoutInfo.handle(), styleInfo, isAirMode); }, 0); }; var hScroll = function(event) {var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target); modules.popover.hide(layoutInfo.popover()); modules.handle.hide(layoutInfo.handle()); }; var hToolbarAndPopoverMousedown = function(event) {var $btn = $(event.target).closest('[data-event]'); if ($btn.length) {event.preventDefault(); } }; var hToolbarAndPopoverClick = function(event) {var $btn = $(event.target).closest('[data-event]'); if ($btn.length) {var eventName = $btn.attr('data-event'), value = $btn.attr('data-value'), hide = $btn.attr('data-hide'); var layoutInfo = dom.makeLayoutInfo(event.target); var $target; if ($.inArray(eventName, ['resize', 'floatMe', 'removeMedia', 'imageShape', 'imageClass']) !== -1) {var $selection = layoutInfo.handle().find('.note-control-selection'); $target = $($selection.data('target')); } if (hide) {$btn.parents('.popover').hide(); } if ($.isFunction($.materialnote.pluginEvents[eventName])) {$.materialnote.pluginEvents[eventName](event, modules.editor, layoutInfo, value); } else if (modules.editor[eventName]) {var $editable = layoutInfo.editable(); $editable.focus(); modules.editor[eventName]($editable, value, $target); event.preventDefault(); } else if (commands[eventName]) {commands[eventName].call(this, layoutInfo); event.preventDefault(); } if ($.inArray(eventName, ['backColor', 'foreColor']) !== -1) {var options = layoutInfo.editor().data('options', options); var module = options.airMode ? modules.popover : modules.toolbar; module.updateRecentColor(list.head($btn), eventName, value); } hToolbarAndPopoverUpdate(event); } }; var gridUnit = 26; var hDimensionPickerMove = function(event, options) {var $picker = $(event.target.parentNode); var $dropdown = $picker.parent(); var $dimensionDisplay = $picker.next(); var $catcher = $picker.find('.note-dimension-picker-mousecatcher'); var $highlighted = $picker.find('.note-dimension-picker-highlighted'); var $unhighlighted = $picker.find('.note-dimension-picker-unhighlighted'); var $hoverableOption = $dropdown.find(\\\"[id$='-hoverable']\\\"); var $borderedOption = $dropdown.find(\\\"[id$='-bordered']\\\"); var $stripedOption = $dropdown.find(\\\"[id$='-striped']\\\"); var $responsiveOption = $dropdown.find(\\\"[id$='-responsive']\\\"); var posOffset; if (event.offsetX === undefined) {var posCatcher = $(event.target).offset(); posOffset = {x: event.pageX - posCatcher.left, y: event.pageY - posCatcher.top }; } else {posOffset = {x: event.offsetX, y: event.offsetY }; } var dim = {c: Math.ceil(posOffset.x / gridUnit) || 1, r: Math.ceil(posOffset.y / gridUnit) || 1 }; var tableOptions = []; if ($hoverableOption.is(':checked')) tableOptions.push('hoverable'); if ($borderedOption.is(':checked')) tableOptions.push('bordered'); if ($stripedOption.is(':checked')) tableOptions.push('striped'); if ($responsiveOption.is(':checked')) tableOptions.push('responsive-table'); $highlighted.css({ width: (dim.c * gridUnit) + 'px', height: (dim.r * gridUnit) + 'px' }); $catcher.attr('data-value', dim.c + 'x' + dim.r + 'x' + tableOptions.join('x')); $unhighlighted.css({ width: (options.insertTableMaxSize * gridUnit) + 'px'}); if (3 < dim.r && dim.r < options.insertTableMaxSize.row) {$unhighlighted.css({ height: ((dim.r + 1) * gridUnit) + 'px'}); } $dimensionDisplay.html(dim.c + ' x ' + dim.r); }; this.bindKeyMap = function(layoutInfo, keyMap) {var $editor = layoutInfo.editor(); var $editable = layoutInfo.editable(); $editable.on('keydown', function(event) {var keys = []; if (event.metaKey) { keys.push('CMD'); } if (event.ctrlKey && !event.altKey) { keys.push('CTRL'); } if (event.shiftKey) { keys.push('SHIFT'); } var keyName = key.nameFromCode[event.keyCode]; if (keyName) {keys.push(keyName); } var pluginEvent; var keyString = keys.join('+'); var eventName = keyMap[keyString]; if (eventName) {pluginEvent = $.materialnote.pluginEvents[keyString]; if ($.isFunction(pluginEvent)) {if (pluginEvent(event, modules.editor, layoutInfo)) {return false; } } pluginEvent = $.materialnote.pluginEvents[eventName]; if ($.isFunction(pluginEvent)) {pluginEvent(event, modules.editor, layoutInfo); } else if (modules.editor[eventName]) {modules.editor[eventName]($editable, $editor.data('options')); event.preventDefault(); } else if (commands[eventName]) {commands[eventName].call(this, layoutInfo); event.preventDefault(); } } else if (key.isEdit(event.keyCode)) {modules.editor.afterCommand($editable); } }); }; this.attach = function(layoutInfo, options) {if (options.shortcuts) {this.bindKeyMap(layoutInfo, options.keyMap[agent.isMac ? 'mac' : 'pc']); } layoutInfo.editable().on('mousedown', hMousedown); layoutInfo.editable().on('keyup mouseup', hKeyupAndMouseup); layoutInfo.editable().on('scroll', hScroll); modules.clipboard.attach(layoutInfo, options); modules.handle.attach(layoutInfo, options); layoutInfo.popover().on('click', hToolbarAndPopoverClick); layoutInfo.popover().on('mousedown', hToolbarAndPopoverMousedown); modules.dragAndDrop.attach(layoutInfo, options); if (!options.airMode) {layoutInfo.toolbar().on('click', hToolbarAndPopoverClick); layoutInfo.toolbar().on('mousedown', hToolbarAndPopoverMousedown); modules.statusbar.attach(layoutInfo, options); } var $catcherContainer = options.airMode ? layoutInfo.popover() : layoutInfo.toolbar(); var $catcher = $catcherContainer.find('.note-dimension-picker-mousecatche\";\n  builder.string += \"r'); $catcher.css({width: options.insertTableMaxSize.col * gridUnit + 'px', height: options.insertTableMaxSize.row * gridUnit + 'px'}).on('mousemove', function(event) {hDimensionPickerMove(event, options); }); layoutInfo.editor().data('options', options); if (!agent.isMSIE) {setTimeout(function() {document.execCommand('styleWithCSS', 0, options.styleWithSpan); }, 0); } var history = new History(layoutInfo.editable()); layoutInfo.editable().data('NoteHistory', history); layoutInfo.editable().data('callbacks', {onInit: options.onInit, onFocus: options.onFocus, onBlur: options.onBlur, onKeydown: options.onKeydown, onKeyup: options.onKeyup, onMousedown: options.onMousedown, onEnter: options.onEnter, onPaste: options.onPaste, onBeforeCommand: options.onBeforeCommand, onChange: options.onChange, onImageUpload: options.onImageUpload, onImageUploadError: options.onImageUploadError, onMediaDelete: options.onMediaDelete, onToolbarClick: options.onToolbarClick }); if (dom.isTextarea(list.head(layoutInfo.holder()))) {layoutInfo.holder().closest('form').submit(function() {layoutInfo.holder().val(layoutInfo.holder().code()); }); } }; this.attachCustomEvent = function(layoutInfo, options) {var $holder = layoutInfo.holder(); var $editable = layoutInfo.editable(); var callbacks = $editable.data('callbacks'); $editable.focus(bindCustomEvent($holder, callbacks, 'focus')); $editable.blur(bindCustomEvent($holder, callbacks, 'blur')); $editable.keydown(function(event) {if (event.keyCode === key.code.ENTER) {bindCustomEvent($holder, callbacks, 'enter').call(this, event); } bindCustomEvent($holder, callbacks, 'keydown').call(this, event); }); $editable.keyup(bindCustomEvent($holder, callbacks, 'keyup')); $editable.on('mousedown', bindCustomEvent($holder, callbacks, 'mousedown')); $editable.on('mouseup', bindCustomEvent($holder, callbacks, 'mouseup')); $editable.on('scroll', bindCustomEvent($holder, callbacks, 'scroll')); $editable.on('paste', bindCustomEvent($holder, callbacks, 'paste')); var changeEventName = agent.isMSIE ? 'DOMCharacterDataModified DOMSubtreeModified DOMNodeInserted' : 'input'; $editable.on(changeEventName, function() {bindCustomEvent($holder, callbacks, 'change')($editable.html(), $editable); }); if (!options.airMode) {layoutInfo.toolbar().click(bindCustomEvent($holder, callbacks, 'toolbar.click')); layoutInfo.popover().click(bindCustomEvent($holder, callbacks, 'popover.click')); } if (dom.isTextarea(list.head($holder))) {$holder.closest('form').submit(function(e) {bindCustomEvent($holder, callbacks, 'submit').call(this, e, $holder.code()); }); } bindCustomEvent($holder, callbacks, 'init')(layoutInfo); for (var i = 0, len = $.materialnote.plugins.length; i < len; i++) {if ($.isFunction($.materialnote.plugins[i].init)) {$.materialnote.plugins[i].init(layoutInfo); } } }; this.detach = function(layoutInfo, options) {layoutInfo.holder().off(); layoutInfo.editable().off(); layoutInfo.popover().off(); layoutInfo.handle().off(); layoutInfo.dialog().off(); if (!options.airMode) {layoutInfo.dropzone().off(); layoutInfo.toolbar().off(); layoutInfo.statusbar().off(); } }; }; var Renderer = function() {var tplButton = function(label, options) {var event = options.event; var value = options.value; var title = options.title; var style = options.style; var btnClassName = options.btnClassName; var className = options.className; var dropdown = options.dropdown; var hide = options.hide; if (!dropdown) {var button = ['<div class=\\\"waves-effect waves-light btn', (className ? \\\" \\\" + className : '') + '\\\"', (title ? ' title=\\\"' + title + '\\\"' : ''), (style ? ' style=\\\"' + style + '\\\"' : ''), (event ? ' data-event=\\\"' + event + '\\\"' : ''), (value ? ' data-value=\\\\'' + value + '\\\\'' : ''), (hide ? ' data-hide=\\\\'' + hide + '\\\\'' : ''), ' tabindex=\\\"-1\\\">' + label + '<\\/div>'].join(''); return button; } else {var list = ['<div class=\\\"btn-group', (className ? \\\" \\\" + className : '') + '\\\">', '<button class=\\\"waves-effect waves-light btn dropdown ' + (btnClassName ? btnClassName : '') + '\\\"', (title ? ' title=\\\"' + title + '\\\"' : ''), (event ? ' data-event=\\\"' + event + '\\\"' : ''), (value ? ' data-value=\\\\'' + value + '\\\\'' : ''), (hide ? ' data-hide=\\\\'' + hide + '\\\\'' : ''), '><i class=\\\"material-icons left\\\">arrow_drop_down<\\/i>' + label + '<\\/button>', dropdown, '<\\/div>'].join(''); return list; } }; var tplIconButton = function(iconClassName, options) {var label = '<i class=\\\"material-icons\\\">' + iconClassName + '<\\/i>'; return tplButton(label, options); }; var tplPopover = function(className, content) {var $popover = $('<div class=\\\"' + className + ' popover bottom in\\\" style=\\\"display: none;\\\">' + '<div class=\\\"arrow\\\"><\\/div>' + '<div class=\\\"popover-content\\\">' + '<\\/div>' + '<\\/div>'); $popover.find('.popover-content').append(content); return $popover; }; var tplDialog = function(className, title, body, footer) {var modal = ['<div class=\\\"' + className + ' modal modal-fixed-footer\\\">', '<div class=\\\"modal-content\\\">', (title ? '<h4>' + title + '<\\/h4>' : ''), '<p>' + body + '<\\/p>', '<\\/div>', (footer ? '<div class=\\\"modal-footer\\\">' + footer + '<\\/div>' : ''), '<\\/div>'].join(''); return modal; }; var tplButtonInfo = {picture: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.image.image, {event: 'showImageDialog', title: lang.image.image, hide: true }); }, link: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.link.link, {event: 'showLinkDialog', title: lang.link.link, hide: true }); }, table: function(lang, options) {var dropdown = '<ul class=\\\"note-table dropdown-menu\\\">' + '<div class=\\\"row\\\">' + '<div class=\\\"col s6 preventDropClose\\\"><input type=\\\"checkbox\\\" id=\\\"' + materialUniqueId + '-bordered\\\" checked=\\\"checked\\\" /><label for=\\\"' + materialUniqueId + '-bordered\\\">' + lang.table.bordered + '<\\/label><\\/div>' + '<div class=\\\"col s6 preventDropClose\\\"><input type=\\\"checkbox\\\" id=\\\"' + materialUniqueId + '-striped\\\" checked=\\\"checked\\\" /><label for=\\\"' + materialUniqueId + '-striped\\\">' + lang.table.striped + '<\\/label><\\/div>' + '<\\/div>' + '<div class=\\\"row\\\">' + '<div class=\\\"col s6 preventDropClose\\\"><input type=\\\"checkbox\\\" id=\\\"' + materialUniqueId + '-hoverable\\\" checked=\\\"checked\\\" /><label for=\\\"' + materialUniqueId + '-hoverable\\\">' + lang.table.hoverable + '<\\/label><\\/div>' + '<div class=\\\"col s6 preventDropClose\\\"><input type=\\\"checkbox\\\" id=\\\"' + materialUniqueId + '-responsive\\\" checked=\\\"checked\\\" /><label for=\\\"' + materialUniqueId + '-responsive\\\">' + lang.table.responsive + '<\\/label><\\/div>' + '<\\/div>' + '<div class=\\\"note-dimension-picker\\\">' + '<div class=\\\"note-dimension-picker-mousecatcher\\\" data-event=\\\"insertTable\\\" data-value=\\\"1x1\\\"><\\/div>' + '<div class=\\\"note-dimension-picker-highlighted\\\"><\\/div>' + '<div class=\\\"note-dimension-picker-unhighlighted\\\"><\\/div>' + '<\\/div>' + '<div class=\\\"note-dimension-display\\\"> 1 x 1 <\\/div>' + '<\\/ul>'; return tplIconButton(options.iconPrefix + options.icons.table.table, {title: lang.table.table, dropdown: dropdown }); }, style: function(lang, options) {var items = options.styleTags.reduce(function(memo, v) {var label = lang.style[v === 'p' ? 'normal' : v]; return memo + '<li><div data-event=\\\"formatBlock\\\" data-value=\\\"' + v + '\\\">' + ((v === 'p' || v === 'pre') ? label : '<' + v + '>' + label + '<\\/' + v + '>') + '<\\/div><\\/li>'; }, ''); return tplIconButton(options.iconPrefix + options.icons.style.style, {title: lang.style.style, dropdown: '<ul class=\\\"dropdown-menu largeDropdown\\\">' + items + '<\\/ul>'}); }, fontname: function(lang, options) {var realFontList = []; var items = options.fontNames.reduce(function(memo, v) {if (!agent.isFontInstalled(v) && options.fontNamesIgnoreCheck.indexOf(v) === -1) {return memo; } realFontList.push(v); return memo + '<li><div data-event=\\\"fontName\\\" href=\\\"#\\\" data-value=\\\"' + v + '\\\" style=\\\"font-family:\\\\'' + v + '\\\\'\\\">' + '<i class=\\\"material-icons tiny transparent\\\">' + options.iconPrefix + options.icons.misc.check + '<\\/i> ' + v + '<\\/div><\\/li>'; }, ''); var hasDefaultFont = agent.isFontInstalled(options.defaultFontName); var defaultFontName = (hasDefaultFont) ? options.defaultFontName : realFontList[0]; var label = '<div class=\\\"note-current-fontname\\\">' + defaultFontName + '<\\/div>'; return tplButton(label, {title: lang.font.name, className: 'note-fontname', dropdown: '<ul class=\\\"dropdown-menu note-check\\\">' + items + '<\\/ul>'}); }, fontsize: function(lang, options) {var items = options.fontSizes.reduce(function(memo, v) {return memo + '<li><div data-event=\\\"fontSize\\\" href=\\\"#\\\" data-value=\\\"' + v + '\\\">' + '<i class=\\\"material-icons tiny transparent\\\">' + options.iconPrefix + options.icons.misc.check + '<\\/i> ' + v + '<\\/div><\\/li>'; }, ''); var label = '<span class=\\\"note-current-fontsize\\\">15<\\/span>'; return tplButton(label, {title: lang.font.size, className: 'note-fontsize', dropdown: '<ul class=\\\"dropdown-menu note-check\\\">' + items + '<\\/ul>'}); }, color: function(lang, options) {var colorButtonLabel = '<i class=\\\"material-icons\\\">' + options.icons.color.recent + '<\\/i>', colorButton = tplButton(colorButtonLabel, {className: 'note-recent-color', title: lang.color.recent, style: \\\"color: \\\" + options.defaultTextColor + \\\"; background-color: \\\" + options.defaultBackColor + \\\";\\\", event: 'color', value: '{\\\"backColor\\\": \\\"' + options.defaultBackColor + '\\\"}'}); var dropdown = '<ul id=\\\"colors\\\" class=\\\"dropdown-menu\\\">' + '<li>' + '<div class=\\\"col s12\\\">' + '<ul class=\\\"tabs\\\">' + '<li class=\\\"tab\\\"><a href=\\\"#' + materialUniqueId + '-foreColor\\\" class=\\\"active\\\">' + lang.color.foreground + '<\\/a><\\/li>' + '<li class=\\\"tab\\\"><a href=\\\"#' + materialUniqueId + '-backColor\\\">' + lang.color.background + '<\\/a><\\/li>' + '<\\/ul>' + '<\\/div>' + '<div class=\\\"col s12 colorTable\\\">' + '<div id=\\\"' + materialUniqueId + '-foreColor\\\">' + '<div class=\\\"note-color-reset waves-effect waves-light btn\\\" data-event=\\\"foreColor\\\" data-value=\\\"' + options.defaultTextColor + '\\\" title=\\\"' + lang.color.reset + '\\\">' + lang.color.resetToDefault + '<\\/div>' + '<div class=\\\"colorName\\\"><\\/div>' + '<div class=\\\"note-color-palette\\\" data-target-event=\\\"foreColor\\\"><\\/div>' + '<\\/div>' + '<div id=\\\"' + materialUniqueId + '-backColor\\\">' + '<div class=\\\"note-color-reset waves-effect waves-light btn\\\" data-event=\\\"backColor\\\"' + ' data-value=\\\"' + options.defaultBackColor + '\\\" title=\\\"' + lang.color.transparent + '\\\">' + lang.color.setTransparent + '<\\/div>' + '<div class=\\\"colorName\\\"><\\/div>' + '<div class=\\\"note-color-palette\\\" data-target-event=\\\"backColor\\\"><\\/div>' + '<\\/div>' + '<\\/div>' + '<\\/li>' + '<\\/ul>'; var moreButton = tplButton('', {title: lang.color.more, className: 'closeLeft', dropdown: dropdown }); return moreButton + colorButton; }, bold: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.font.bold, {event: 'bold', title: lang.font.bold }); }, italic: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.font.italic, {event: 'italic', title: lang.font.italic }); }, underline: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.font.underline, {event: 'underline', title: lang.font.underline }); }, strikethrough: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.font.strikethrough, {event: 'strikethrough', title: lang.font.strikethrough }); }, superscript: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.font.superscript, {event: 'superscript', title: lang.font.superscript }); }, subscript: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.font.subscript, {event: 'subscript', title: lang.font.subscript }); }, clear: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.font.clear, {event: 'removeFormat', title: lang.font.clear }); }, ul: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.lists.unordered, {event: 'insertUnorderedList', title: lang.lists.unordered }); }, ol: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.lists.ordered, {event: 'insertOrderedList', title: lang.lists.ordered }); }, leftButton: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.paragraph.left, {title: lang.paragraph.left, event: 'justifyLeft'}); }, centerButton: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.paragraph.center, {title: lang.paragraph.center, event: 'justifyCenter'}); }, rightButton: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.paragraph.right, {title: lang.paragraph.right, event: 'justifyRight'}); }, justifyButton: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.paragraph.justify, {title: lang.paragraph.justify, event: 'justifyFull'}); }, outdentButton: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.paragraph.outdent, {title: lang.paragraph.outdent, event: 'outdent'}); }, indentButton: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.paragraph.indent, {title: lang.paragraph.indent, event: 'indent'}); }, paragraph: function(lang, options) {var leftButton = tplIconButton(options.iconPrefix + options.icons.paragraph.left, {title: lang.paragraph.left, event: 'justifyLeft'}); var centerButton = tplIconButton(options.iconPrefix + options.icons.paragraph.center, {title: lang.paragraph.center, event: 'justifyCenter'}); var rightButton = tplIconButton(options.iconPrefix + options.icons.paragraph.right, {title: lang.paragraph.right, event: 'justifyRight'}); var justifyButton = tplIconButton(options.iconPrefix + options.icons.paragraph.justify, {title: lang.paragraph.justify, event: 'justifyFull'}); var outdentButton = tplIconButton(options.iconPrefix + options.icons.paragraph.outdent, {title: lang.paragraph.outdent, event: 'outdent'}); var indentButton = tplIconButton(options.iconPrefix + options.icons.paragraph.indent, {title: lang.paragraph.indent, event: 'indent'}); var dropdown = '<ul class=\\\"dropdown-menu\\\">' + '<div class=\\\"note-align btn-group\\\">' + leftButton + centerButton + rightButton + justifyButton + '<\\/div>' + '<div class=\\\"note-list btn-group\\\">' + indentButton + outdentButton + '<\\/div>' + '<\\/ul>'; return tplIconButton(options.iconPrefix + options.icons.paragraph.paragraph, {title: lang.paragraph.paragraph, dropdown: dropdown }); }, lineheight: function(lang, options) {var items = options.lineHeights.reduce(function(memo, v) {return memo + '<li><div data-event=\\\"lineHeight\\\" href=\\\"#\\\" data-value=\\\"' + parseFloat(v) + '\\\">' + '<i class=\\\"material-icons tiny transparent\\\">' + options.iconPrefix + options.icons.misc.check + '<\\/i> ' + v + '<\\/div><\\/li>'; }, ''); return tplIconButton(options.iconPrefix + options.icons.font.height, {title: lang.font.height, className: 'note-height', dropdown: '<ul class=\\\"dropdown-menu note-check\\\">' + items + '<\\/ul>'}); }, help: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.options.help, {event: 'showHelpDialog', title: lang.options.help, hide: true }); }, fullscreen: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.options.fullscreen, {event: 'fullscreen', title: lang.options.fullscreen }); }, codeview: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.options.codeview, {event: 'codeview', title: lang.options.codeview }); }, undo: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.history.undo, {event: 'undo', title: lang.history.undo }); }, redo: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.history.redo, {event: 'redo', title: lang.history.redo }); }, hr: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.hr.insert, {event: 'insertHorizontalRule', title: lang.hr.insert }); } }; var tplPopovers = function(lang, options) {var tplLinkPopover = function() {var linkButton = tplIconButton(options.iconPrefix + options.icons.link.edit, {title: lang.link.edit, event: 'showLinkDialog', hide: true }); var unlinkButton = tplIconButton(options.iconPrefix + options.icons.link.unlink, {title: lang.link.unlink, event: 'unlink'}); var content = '<a href=\\\"http://www.google.com\\\" target=\\\"_blank\\\">www.google.com<\\/a>&nbsp;&nbsp;' + '<div class=\\\"note-insert btn-group\\\">' + linkButton + unlinkButton + '<\\/div>'; return tplPopover('note-link-popover', content); }; var tplImagePopover = function() {var fullButton = tplButton('<spa\";\n  builder.string += \"n class=\\\"note-fontsize-10\\\">100%<\\/span>', {title: lang.image.resizeFull, event: 'resize', value: '1'}); var halfButton = tplButton('<span class=\\\"note-fontsize-10\\\">50%<\\/span>', {title: lang.image.resizeHalf, event: 'resize', value: '0.5'}); var quarterButton = tplButton('<span class=\\\"note-fontsize-10\\\">25%<\\/span>', {title: lang.image.resizeQuarter, event: 'resize', value: '0.25'}); var leftButton = tplIconButton(options.iconPrefix + options.icons.image.floatLeft, {title: lang.image.floatLeft, event: 'floatMe', value: 'left'}); var rightButton = tplIconButton(options.iconPrefix + options.icons.image.floatRight, {title: lang.image.floatRight, event: 'floatMe', value: 'right'}); var justifyButton = tplIconButton(options.iconPrefix + options.icons.image.floatNone, {title: lang.image.floatNone, event: 'floatMe', value: 'none'}); var roundedButton = tplIconButton(options.iconPrefix + options.icons.image.shapeRounded, {title: lang.image.shapeRounded, event: 'imageClass', value: 'img-rounded'}); var circleButton = tplIconButton(options.iconPrefix + options.icons.image.shapeCircle, {title: lang.image.shapeCircle, event: 'imageClass', value: 'img-circle'}); var thumbnailButton = tplIconButton(options.iconPrefix + options.icons.image.shapeThumbnail, {title: lang.image.shapeThumbnail, event: 'imageClass', value: 'img-thumbnail'}); var borderedButton = tplIconButton(options.iconPrefix + options.icons.image.bordered, {title: lang.image.bordered, event: 'imageClass', value: 'img-bordered'}); var noneButton = tplIconButton(options.iconPrefix + options.icons.image.shapeNone, {title: lang.image.shapeNone, event: 'imageShape', value: ''}); var removeButton = tplIconButton(options.iconPrefix + options.icons.image.remove, {title: lang.image.remove, event: 'removeMedia', value: 'none'}); var content = '<div class=\\\"btn-group\\\">' + leftButton + rightButton + justifyButton + '<\\/div>' + '<div class=\\\"btn-group\\\">' + roundedButton + circleButton + thumbnailButton + borderedButton + noneButton + '<\\/div>' + '<div class=\\\"btn-group\\\">' + removeButton + '<\\/div>'; return tplPopover('note-image-popover', content); }; var tplAirPopover = function() {var $content = $('<div />'); for (var idx = 0, len = options.airPopover.length; idx < len; idx ++) {var group = options.airPopover[idx]; var $group = $('<div class=\\\"note-' + group[0] + ' btn-group\\\">'); for (var i = 0, lenGroup = group[1].length; i < lenGroup; i++) {var $button = $(tplButtonInfo[group[1][i]](lang, options)); $button.attr('data-name', group[1][i]); $group.append($button); } $content.append($group); } return tplPopover('note-air-popover', $content.children()); }; var $notePopover = $('<div class=\\\"note-popover\\\" />'); $notePopover.append(tplLinkPopover()); $notePopover.append(tplImagePopover()); if (options.airMode) {$notePopover.append(tplAirPopover()); } return $notePopover; }; var tplHandles = function() {return '<div class=\\\"note-handle\\\">' + '<div class=\\\"note-control-selection\\\">' + '<div class=\\\"note-control-selection-bg\\\"><\\/div>' + '<div class=\\\"note-control-sizing note-control-se\\\"><\\/div>' + '<div class=\\\"note-control-selection-info\\\"><\\/div>' + '<\\/div>' + '<\\/div>'; }; var tplShortcut = function(title, keys) {var keyClass = 'note-shortcut-col col-xs-6 note-shortcut-'; var body = []; for (var i in keys) {if (keys.hasOwnProperty(i)) {body.push('<tr><td>' + keys[i].kbd + '<\\/td><td>' + keys[i].text + '<\\/td><\\/tr>'); } } return '<thead><tr><th>' + title + '<\\/th><th>' + '(keys)' + '<\\/th><\\/tr><\\/thead>' + '<tbody>' + body.join('') + '<\\/tbody>'; }; var tplShortcutText = function(lang) {var keys = [{ kbd: '\\u2318 + B', text: lang.font.bold }, { kbd: '\\u2318 + I', text: lang.font.italic }, { kbd: '\\u2318 + U', text: lang.font.underline }, { kbd: '\\u2318 + \\\\\\\\', text: lang.font.clear } ]; return tplShortcut(lang.shortcut.textFormatting, keys); }; var tplShortcutAction = function(lang) {var keys = [{ kbd: '\\u2318 + Z', text: lang.history.undo }, { kbd: '\\u2318 + \\u21E7 + Z', text: lang.history.redo }, { kbd: '\\u2318 + ]', text: lang.paragraph.indent }, { kbd: '\\u2318 + [', text: lang.paragraph.outdent }, { kbd: '\\u2318 + ENTER', text: lang.hr.insert } ]; return tplShortcut(lang.shortcut.action, keys); }; var tplShortcutPara = function(lang) {var keys = [{ kbd: '\\u2318 + \\u21E7 + L', text: lang.paragraph.left }, { kbd: '\\u2318 + \\u21E7 + E', text: lang.paragraph.center }, { kbd: '\\u2318 + \\u21E7 + R', text: lang.paragraph.right }, { kbd: '\\u2318 + \\u21E7 + J', text: lang.paragraph.justify }, { kbd: '\\u2318 + \\u21E7 + NUM7', text: lang.lists.ordered }, { kbd: '\\u2318 + \\u21E7 + NUM8', text: lang.lists.unordered } ]; return tplShortcut(lang.shortcut.paragraphFormatting, keys); }; var tplShortcutStyle = function(lang) {var keys = [{ kbd: '\\u2318 + NUM0', text: lang.style.normal }, { kbd: '\\u2318 + NUM1', text: lang.style.h1 }, { kbd: '\\u2318 + NUM2', text: lang.style.h2 }, { kbd: '\\u2318 + NUM3', text: lang.style.h3 }, { kbd: '\\u2318 + NUM4', text: lang.style.h4 }, { kbd: '\\u2318 + NUM5', text: lang.style.h5 }, { kbd: '\\u2318 + NUM6', text: lang.style.h6 } ]; return tplShortcut(lang.shortcut.documentStyle, keys); }; var tplExtraShortcuts = function(lang, options) {var extraKeys = options.extraKeys; var keys = []; for (var key in extraKeys) {if (extraKeys.hasOwnProperty(key)) {keys.push({ kbd: key, text: extraKeys[key] }); } } return tplShortcut(lang.shortcut.extraKeys, keys); }; var tplShortcutTable = function(lang, options) {var template = ['<table class=\\\"striped hoverable\\\">' + tplShortcutAction(lang, options) + '<\\/table>', '<table class=\\\"striped hoverable\\\">' + tplShortcutStyle(lang, options) + '<\\/table>', '<table class=\\\"striped hoverable\\\">' + tplShortcutText(lang, options) + '<\\/table>', '<table class=\\\"striped hoverable\\\">' + tplShortcutPara(lang, options) + '<\\/table>'].join('<br>'); if (options.extraKeys) {} return template; }; var replaceMacKeys = function(sHtml) {return sHtml.replace(/\\u2318/g, 'Ctrl').replace(/\\u21E7/g, 'Shift'); }; var tplDialogInfo = {image: function(lang, options) {var imageLimitation = ''; if (options.maximumImageFileSize) {var unit = Math.floor(Math.log(options.maximumImageFileSize) / Math.log(1024)); var readableSize = (options.maximumImageFileSize / Math.pow(1024, unit)).toFixed(2) * 1 + ' ' + ' KMGTP'[unit] + 'B'; imageLimitation = '<small>' + lang.image.maximumFileSize + ' : ' + readableSize + '<\\/small>'; } var body = '<div class=\\\"row\\\">' + '<div class=\\\"col s12\\\">' + '<div class=\\\"file-field input-field\\\">' + '<div class=\\\"btn\\\">' + '<span>' + lang.image.image + '<\\/span>' + '<input class=\\\"note-image-input\\\" name=\\\"files\\\" type=\\\"file\\\" />' + '<\\/div>' + '<div class=\\\"file-path-wrapper\\\">' + '<input class=\\\"file-path\\\" type=\\\"text\\\" />' + '<\\/div>' + '<\\/div>' + '<\\/div>' + '<\\/div>' + '<div class=\\\"row\\\">' + '<div class=\\\"input-field col s12\\\">' + '<input class=\\\"note-image-url\\\" type=\\\"text\\\" />' + '<label>' + lang.image.url + '<\\/label>' + '<\\/div>' + '<\\/div>'; var footer = '<button href=\\\"#\\\" class=\\\"waves-effect waves-light btn note-image-btn disabled\\\" disabled>' + lang.image.insert + '<\\/button>' + '<button class=\\\"waves-effect waves-light btn btnClose\\\">' + lang.shortcut.close + '<\\/button>'; return tplDialog('note-image-dialog', lang.image.insert, body, footer); }, link: function(lang, options) {var body = '<div class=\\\"row\\\">' + '<div class=\\\"input-field col s12\\\">' + '<input class=\\\"note-link-text\\\" type=\\\"text\\\" />' + '<label>' + lang.link.textToDisplay + '<\\/label>' + '<\\/div>' + '<\\/div>' + '<div class=\\\"row\\\">' + '<div class=\\\"input-field col s12\\\">' + '<input class=\\\"note-link-url\\\" type=\\\"text\\\" value=\\\"http://\\\" />' + '<label class=\\\"active\\\">' + lang.link.url + '<\\/label>' + '<\\/div>' + '<\\/div>' + (!options.disableLinkTarget ? '<div class=\\\"row\\\">' + '<div class=\\\"col s12\\\">' + '<input type=\\\"checkbox\\\" id=\\\"' + materialUniqueId + '-noteInsertLinkNewWindow\\\" checked=\\\"checked\\\" />' + '<label for=\\\"' + materialUniqueId + '-noteInsertLinkNewWindow\\\">' + lang.link.openInNewWindow + '<\\/label>' + '<\\/div>' + '<\\/div>': ''); var footer = '<button href=\\\"#\\\" class=\\\"waves-effect waves-light btn note-link-btn disabled\\\" disabled>' + lang.link.insert + '<\\/button>' + '<button class=\\\"waves-effect waves-light btn btnClose\\\">' + lang.shortcut.close + '<\\/button>'; return tplDialog('note-link-dialog', lang.link.insert, body, footer); }, help: function(lang, options) {var body = (agent.isMac ? tplShortcutTable(lang, options) : replaceMacKeys(tplShortcutTable(lang, options))); var footer = '<button href=\\\"#\\\" class=\\\"waves-effect waves-light btn modal-close\\\">' + lang.shortcut.close + '<\\/button>'; return tplDialog('note-help-dialog', lang.shortcut.shortcuts, body, footer); } }; var tplDialogs = function(lang, options) {var dialogs = ''; $.each(tplDialogInfo, function(idx, tplDialog) {dialogs += tplDialog(lang, options); }); return '<div class=\\\"note-dialog\\\">' + dialogs + '<\\/div>'; }; var tplStatusbar = function() {return '<div class=\\\"note-resizebar\\\">' + '<div class=\\\"note-icon-bar\\\"><\\/div>' + '<div class=\\\"note-icon-bar\\\"><\\/div>' + '<div class=\\\"note-icon-bar\\\"><\\/div>' + '<\\/div>'; }; var representShortcut = function(str) {if (agent.isMac) {str = str.replace('CMD', '\\u2318').replace('SHIFT', '\\u21E7'); } return str.replace('BACKSLASH', '\\\\\\\\') .replace('SLASH', '/') .replace('LEFTBRACKET', '[') .replace('RIGHTBRACKET', ']'); }; var createTooltip = function($container, keyMap, sPlacement) {$(document).ready(function() {var invertedKeyMap = func.invertObject(keyMap); var $buttons = $container.find('.btn'); $buttons.each(function(i, elBtn) {var $btn = $(elBtn); var sShortcut = invertedKeyMap[$btn.data('event')]; var text = $btn.attr('title'); if (sShortcut) {$btn.attr('data-tooltip', function(i, v) {text = text + ' (' + representShortcut(sShortcut) + ')'; $(this).removeAttr('title'); return text; }); } $btn.attr('data-position', 'bottom'); $btn.attr('data-tooltip', text); $btn.removeAttr('title'); }).ckTooltip({container: $container, position: 'top', delay: 30 }); }); }; var createPalette = function($container, options) {var colorInfo = options.colors; var colorTitles = options.colorTitles; $container.find('.note-color-palette').each(function() {var $palette = $(this), eventName = $palette.attr('data-target-event'); var paletteContents = []; for (var row = 0, lenRow = colorInfo.length; row < lenRow; row++) {var colors = colorInfo[row]; var titles = colorTitles[row]; var buttons = []; for (var col = 0, lenCol = colors.length; col < lenCol; col++) {var color = colors[col]; var title = titles[col]; buttons.push(['<button type=\\\"button\\\" class=\\\"note-color-btn\\\" style=\\\"background-color:', color, ';\\\" data-event=\\\"', eventName, '\\\" data-value=\\\"', color, '\\\" data-description=\\\"', title, '\\\" data-toggle=\\\"button\\\" tabindex=\\\"-1\\\"><\\/button>'].join('')); } paletteContents.push('<div class=\\\"note-color-row\\\">' + buttons.join('') + '<\\/div>'); } $palette.html(paletteContents.join('')); $palette.find('button').mouseenter(function() {$palette.siblings('.colorName').html($(this).data('description')); }); $palette.mouseleave(function() {$(this).siblings('.colorName').html(''); }); }); }; this.createLayoutByAirMode = function($holder, options) {var langInfo = options.langInfo; var keyMap = options.keyMap[agent.isMac ? 'mac' : 'pc']; var id = func.uniqueId(); $holder.addClass('note-air-editor note-editable'); $holder.attr({'id': 'note-editor-' + id, 'contentEditable': true }); var body = document.body; var $popover = $(tplPopovers(langInfo, options)); $popover.addClass('note-air-layout'); $popover.attr('id', 'note-popover-' + id); $popover.appendTo(body); createTooltip($popover, keyMap); createPalette($popover, options); var $handle = $(tplHandles()); $handle.addClass('note-air-layout'); $handle.attr('id', 'note-handle-' + id); $handle.appendTo(body); var $dialog = $(tplDialogs(langInfo, options)); $dialog.addClass('note-air-layout'); $dialog.attr('id', 'note-dialog-' + id); $dialog.find('button.close, a.modal-close').click(function() {$(this).closest('.modal').closeModal(); }); $dialog.appendTo(body); }; this.createLayoutByFrame = function($holder, options) {var langInfo = options.langInfo; var $editor = $('<div class=\\\"note-editor\\\"><\\/div>'); if (options.width) {$editor.width(options.width); } if (options.height > 0) {$('<div class=\\\"note-statusbar\\\">' + (options.disableResizeEditor ? '' : tplStatusbar()) + '<\\/div>').prependTo($editor); } var isContentEditable = !$holder.is(':disabled'); var $editable = $('<div class=\\\"note-editable\\\" contentEditable=\\\"' + isContentEditable + '\\\"><\\/div>') .prependTo($editor); if (options.height) {$editable.height(options.height); } if (options.direction) {$editable.attr('dir', options.direction); } var placeholder = $holder.attr('placeholder') || options.placeholder; if (placeholder) {$editable.attr('data-placeholder', placeholder); } $editable.html(dom.html($holder)); $('<textarea class=\\\"note-codable\\\"><\\/textarea>').prependTo($editor); var $toolbar = $('<div class=\\\"note-toolbar btn-toolbar\\\" />'); for (var idx = 0, len = options.toolbar.length; idx < len; idx ++) {var groupName = options.toolbar[idx][0]; var groupButtons = options.toolbar[idx][1]; var $group = $('<div class=\\\"note-' + groupName + ' btn-group\\\" />'); for (var i = 0, btnLength = groupButtons.length; i < btnLength; i++) {var buttonInfo = tplButtonInfo[groupButtons[i]]; if (!$.isFunction(buttonInfo)) { continue; } var $button = $(buttonInfo(langInfo, options)); $button.attr('data-name', groupButtons[i]); $group.append($button); } $toolbar.append($group); } $toolbar.prependTo($editor); var keyMap = options.keyMap[agent.isMac ? 'mac' : 'pc']; createPalette($toolbar, options); createTooltip($toolbar, keyMap, 'bottom'); function followingBar() {$(window).scroll(function() {var isFullscreen = $editor.hasClass('fullscreen'); if (isFullscreen) {return false; } var toolbar = $editor.children('.note-toolbar'); var toolbarHeight = toolbar.outerHeight(); var editable = $editor.children('.note-editable'); var editableHeight = editable.outerHeight(); var editorWidth = $editor.width; var toolbarOffset, editorOffsetTop, editorOffsetBottom; var activateOffset, deactivateOffsetTop, deactivateOffsetBottom; var currentOffset; var relativeOffset; var otherBarHeight; otherBarHeight = $(\\\".\\\" + options.otherStaticBarClass).outerHeight(); if (!otherBarHeight) otherBarHeight = 0; currentOffset = $(document).scrollTop(); toolbarOffset = toolbar.offset().top; editorOffsetTop = $editor.offset().top; editorOffsetBottom = editorOffsetTop + editableHeight; activateOffset = toolbarOffset - otherBarHeight; deactivateOffsetBottom = editorOffsetBottom - otherBarHeight; deactivateOffsetTop = editorOffsetTop - otherBarHeight; if ((currentOffset > activateOffset) && (currentOffset < deactivateOffsetBottom)) {relativeOffset = currentOffset - $editor.offset().top + otherBarHeight; toolbar.css({'top': relativeOffset + 'px', 'z-index': 2000}); } else {if ((currentOffset < toolbarOffset) && (currentOffset < deactivateOffsetBottom)) {toolbar.css({'top': 0, 'z-index': 1052}); if (currentOffset > deactivateOffsetTop) {relativeOffset = currentOffset - $editor.offset().top + otherBarHeight; toolbar.css({'top': relativeOffset + 'px', 'z-index': 2000}); } } } }); } if (options.followingToolbar) {followingBar(); } var $popover = $(tplPopovers(langInfo, options)).prependTo($editor); createPalette($popover, options); createTooltip($popover, keyMap); $(tplHandles()).prependTo($editor); var $dialog = $(tplDialogs(langInfo, options)).prependTo($editor); $dialog.find('button.close, a.modal-close').click(function() {$(this).closest('.modal').closeModal(); }); $('<div class=\\\"note-dropzone\\\"><div class=\\\"note-dropzone-message\\\"><\\/div><\\/div>').prependTo($editor); $editor.insertAfter($holder); $holder.hide(); }; this.hasNoteEditor = function($holder) {return this.noteEditorFromHolder($holder).length > 0; }; this.noteEditorFromHolder = function($holder) {if ($holder.hasClass('note-air-editor')) {return $holder; } else if ($holder.next().hasClass('note-editor')) {return $holder.next(); } else {return $(); } }; this.createLayout = function($holder, options) {if (options.airMode) {this.createLayoutByAirMode($holder, options); } else {this.createLayoutByFrame($holder, options); } }; this.layoutInfoFromHolder = function($holder) {var $editor = this.noteEditorFromHolder($holder); if (!$editor.length) {return; } $editor.data('holder', $holder); return dom.buildLayoutInfo($editor); }; this.removeLayout = function($holder, layoutInfo, options) {if (options.airMode) {$holder.removeClass('note-air-editor note-editable') .removeAttr('id contentEditable'); layoutInfo.popover().remove(); layoutInfo.handle().remove(); layoutInfo\";\n  builder.string += \".dialog().remove(); } else {$holder.html(layoutInfo.editable().html()); layoutInfo.editor().remove(); $holder.show(); } }; this.getTemplate = function() {return {button: tplButton, iconButton: tplIconButton, dialog: tplDialog }; }; this.addButtonInfo = function(name, buttonInfo) {tplButtonInfo[name] = buttonInfo; }; this.addDialogInfo = function(name, dialogInfo) {tplDialogInfo[name] = dialogInfo; }; }; $.materialnote = $.materialnote || {}; $.extend($.materialnote, defaults); var renderer = new Renderer(); var eventHandler = new EventHandler(); $.extend($.materialnote, {renderer: renderer, eventHandler: eventHandler, core: {agent: agent, list : list, dom: dom, range: range }, pluginEvents: {}, plugins : [] }); $.materialnote.addPlugin = function(plugin) {$.materialnote.plugins.push(plugin); if (plugin.buttons) {$.each(plugin.buttons, function(name, button) {renderer.addButtonInfo(name, button); }); } if (plugin.dialogs) {$.each(plugin.dialogs, function(name, dialog) {renderer.addDialogInfo(name, dialog); }); } if (plugin.events) {$.each(plugin.events, function(name, event) {$.materialnote.pluginEvents[name] = event; }); } if (plugin.langs) {$.each(plugin.langs, function(locale, lang) {if ($.materialnote.lang[locale]) {$.extend($.materialnote.lang[locale], lang); } }); } if (plugin.options) {$.extend($.materialnote.options, plugin.options); } }; $.fn.extend({materialnote: function() {var type = $.type(list.head(arguments)); var isExternalAPICalled = type === 'string'; var hasInitOptions = type === 'object'; var options = hasInitOptions ? list.head(arguments) : {}; options = $.extend({}, $.materialnote.options, options); options.icons = $.extend({}, $.materialnote.options.icons, options.icons); options.langInfo = $.extend(true, {}, $.materialnote.lang['en-US'], $.materialnote.lang[options.lang]); if (!isExternalAPICalled && hasInitOptions) {for (var i = 0, len = $.materialnote.plugins.length; i < len; i++) {var plugin = $.materialnote.plugins[i]; if (options.plugin[plugin.name]) {$.materialnote.plugins[i] = $.extend(true, plugin, options.plugin[plugin.name]); } } } this.each(function(idx, holder) {materialUniqueId = 'note-editor-' + func.uniqueId(); var $holder = $(holder); if (!renderer.hasNoteEditor($holder)) {renderer.createLayout($holder, options); var layoutInfo = renderer.layoutInfoFromHolder($holder); $holder.data('layoutInfo', layoutInfo); eventHandler.attach(layoutInfo, options); eventHandler.attachCustomEvent(layoutInfo, options); } }); var $first = this.first(); if ($first.length) {var layoutInfo = renderer.layoutInfoFromHolder($first); if (isExternalAPICalled) {var moduleAndMethod = list.head(list.from(arguments)); var args = list.tail(list.from(arguments)); var params = [moduleAndMethod, layoutInfo.editable()].concat(args); return eventHandler.invoke.apply(eventHandler, params); } else if (options.focus) {layoutInfo.editable().focus(); } } $(this).each(function(index, editor) {var tabs; var tabContainer; var toolbar; var isAir = false; if ($(editor).hasClass('note-air-editor')) {var id = $(this).attr('id'); if (id) id = id.substring(id.lastIndexOf('-') + 1, id.length); editor = $('#note-popover-' + id).find('.note-air-popover'); tabContainer = editor.find('ul.tabs'); tabs = editor.find('li.tab a'); toolbar = $(editor).find('.popover-content button.dropdown'); isAir = true; } else {editor = $(editor).next('.note-editor'); tabContainer = editor.find('ul.tabs'); tabs = editor.find('li.tab a'); toolbar = $(editor).find('.note-toolbar button.dropdown'); } var go = true; function handleDropdowns(select, bar) {var list = $(select).next('ul.dropdown-menu'); var container = $(select).parent('.btn-group'); list.slideUp(0); $('.preventDropClose').click(function(event) {event.stopPropagation(); }); $(select).click(function(event) {var btnOffset = Math.round($(select).parent('.btn-group').offset().left - toolbar.offset().left); var listBorderWidth = parseInt(list.css(\\\"border-left-width\\\")); var editorWidth = editor.outerWidth(); var listOffset = listBorderWidth; list.css({'max-width': editorWidth + 'px'}); var listWidth = list.outerWidth(); var th = listWidth + btnOffset; if (th >= editorWidth) {listOffset = th - editorWidth; if (!isAir) {listOffset = listOffset + listBorderWidth; } } list.css({'left': '-' + listOffset + 'px'}); var reopen = true; if (list.is(':visible')) reopen = false; bar.find('ul.dropdown-menu').slideUp(200); if (reopen) {list.slideToggle(200); } event.stopPropagation(); }); tabs.unbind().click(function(event) {go = false; }); } $(window).click(function(event) {if (go) editor.find('ul.dropdown-menu').slideUp(200); go = true; event.stopPropagation(); }); toolbar.each(function(index, select) {handleDropdowns(select, editor); }); tabContainer.tabs(); }); return this; }, code: function(html) {if (html === undefined) {var $holder = this.first(); if (!$holder.length) {return; } var layoutInfo = renderer.layoutInfoFromHolder($holder); var $editable = layoutInfo && layoutInfo.editable(); if ($editable && $editable.length) {var isCodeview = eventHandler.invoke('codeview.isActivated', layoutInfo); eventHandler.invoke('codeview.sync', layoutInfo); return isCodeview ? layoutInfo.codable().val() : layoutInfo.editable().html(); } return dom.value($holder); } this.each(function(i, holder) {var layoutInfo = renderer.layoutInfoFromHolder($(holder)); var $editable = layoutInfo && layoutInfo.editable(); if ($editable) {$editable.html(html); } }); return this; }, destroy: function() {this.each(function(idx, holder) {var $holder = $(holder); if (!renderer.hasNoteEditor($holder)) {return; } var info = renderer.layoutInfoFromHolder($holder); var options = info.editor().data('options'); eventHandler.detach(info, options); renderer.removeLayout($holder, info, options); }); return this; } }); })); (function ($) {$.fn.ckTooltip = function (options) {var timeout = null, counter = null, started = false, counterInterval = null, margin = 5; var defaults = {delay: 350 }; options = $.extend(defaults, options); return this.each(function(){var origin = $(this); var tooltip_text = $('<span><\\/span>').text(origin.attr('data-tooltip')); var newTooltip = $('<div><\\/div>'); newTooltip.addClass('material-tooltip').append(tooltip_text); newTooltip.appendTo($('body')); var backdrop = $('<div><\\/div>').addClass('backdrop'); backdrop.appendTo(newTooltip); backdrop.css({ top: 0, left:0 }); $.event.special.destroyed = {remove: function(o) {if (o.handler) {o.handler(); } } }; $(this).bind('destroyed', function() {newTooltip.remove(); }); $(this).on({mouseenter: function(e) {var tooltip_delay = origin.data(\\\"delay\\\"); tooltip_delay = (tooltip_delay === undefined || tooltip_delay === '') ? options.delay : tooltip_delay; counter = 0; counterInterval = setInterval(function(){counter += 10; if (counter >= tooltip_delay && started === false) {started = true; newTooltip.css({ display: 'block', left: '0px', top: '0px' }); newTooltip.children('span').text(origin.attr('data-tooltip')); var originWidth = origin.outerWidth(); var originHeight = origin.outerHeight(); var tooltipPosition =  origin.attr('data-position'); var tooltipHeight = newTooltip.outerHeight(); var tooltipWidth = newTooltip.outerWidth(); var tooltipVerticalMovement = '0px'; var tooltipHorizontalMovement = '0px'; var scale_factor = 8; if (tooltipPosition === \\\"top\\\") {newTooltip.css({top: origin.offset().top - tooltipHeight - margin, left: origin.offset().left + originWidth/2 - tooltipWidth/2 }); tooltipVerticalMovement = '-10px'; backdrop.css({borderRadius: '14px 14px 0 0', transformOrigin: '50% 90%', marginTop: tooltipHeight, marginLeft: (tooltipWidth/2) - (backdrop.width()/2) }); } else if (tooltipPosition === \\\"left\\\") {newTooltip.css({top: origin.offset().top + originHeight/2 - tooltipHeight/2, left: origin.offset().left - tooltipWidth - margin }); tooltipHorizontalMovement = '-10px'; backdrop.css({width: '14px', height: '14px', borderRadius: '14px 0 0 14px', transformOrigin: '95% 50%', marginTop: tooltipHeight/2, marginLeft: tooltipWidth }); } else if (tooltipPosition === \\\"right\\\") {newTooltip.css({top: origin.offset().top + originHeight/2 - tooltipHeight/2, left: origin.offset().left + originWidth + margin }); tooltipHorizontalMovement = '+10px'; backdrop.css({width: '14px', height: '14px', borderRadius: '0 14px 14px 0', transformOrigin: '5% 50%', marginTop: tooltipHeight/2, marginLeft: '0px'}); } else {newTooltip.css({top: origin.offset().top + origin.outerHeight() + margin, left: origin.offset().left + originWidth/2 - tooltipWidth/2 }); tooltipVerticalMovement = '+10px'; backdrop.css({marginLeft: (tooltipWidth/2) - (backdrop.width()/2) }); } scale_factor = tooltipWidth / 8; if (scale_factor < 8) {scale_factor = 8; } if (tooltipPosition === \\\"right\\\" || tooltipPosition === \\\"left\\\") {scale_factor = tooltipWidth / 10; if (scale_factor < 6) scale_factor = 6; } newTooltip.velocity({ opacity: 1, marginTop: tooltipVerticalMovement, marginLeft: tooltipHorizontalMovement}, { duration: 150, queue: false }); backdrop.css({ display: 'block' }) .velocity({opacity:1},{duration: 50, delay: 0, queue: false}) .velocity({scale: scale_factor}, {duration: 150, delay: 0, queue: false, easing: 'easeInOutQuad'}); } }, 10); }, mouseleave: function(){clearInterval(counterInterval); counter = 0; newTooltip.velocity({opacity: 0, marginTop: 0, marginLeft: 0}, { duration: 150, queue: false, delay: 50 } ); backdrop.velocity({opacity: 0, scale: 1}, {duration:150, delay: 50, queue: false, complete: function(){backdrop.css('display', 'none'); newTooltip.css('display', 'none'); started = false;} }); } }); }); }; }(jQuery));\";\n  return builder.string;\n}\n;\nvar Lgwt_material_design_addins_client_richeditor_MaterialRichEditorClientBundle_1default_1InlineClientBundleGenerator$2_2_classLit = createForClass('gwt.material.design.addins.client.richeditor', 'MaterialRichEditorClientBundle_default_InlineClientBundleGenerator/2', 2285);\nfunction $clinit_MaterialRichEditorClientBundle_default_InlineClientBundleGenerator$richEditorCssInitializer(){\n  $clinit_MaterialRichEditorClientBundle_default_InlineClientBundleGenerator$richEditorCssInitializer = emptyMethod;\n  richEditorCss = new MaterialRichEditorClientBundle_default_InlineClientBundleGenerator$1;\n}\n\nfunction $clinit_MaterialRichEditorClientBundle_default_InlineClientBundleGenerator$richEditorJsInitializer(){\n  $clinit_MaterialRichEditorClientBundle_default_InlineClientBundleGenerator$richEditorJsInitializer = emptyMethod;\n  richEditorJs = new MaterialRichEditorClientBundle_default_InlineClientBundleGenerator$2;\n}\n\nvar richEditorDebugCss, richEditorDebugJs;\nfunction MaterialRichEditorDebugClientBundle_default_InlineClientBundleGenerator$1(){\n}\n\ndefineClass(2282, 1, {}, MaterialRichEditorDebugClientBundle_default_InlineClientBundleGenerator$1);\n_.getName = function getName_44(){\n  return 'richEditorDebugCss';\n}\n;\n_.getText = function getText_35(){\n  var builder;\n  builder = new StringBuilder;\n  builder.string += '\\r\\n/* variables \\r\\n=================================================================================*/\\r\\n.editorDialogs .modal, .note-editor .modal {\\r\\n  background-color: #FFFFFF;\\r\\n  color: #404040;\\r\\n  z-index: 1057 !important;\\r\\n  backface-visibility: hidden;\\r\\n}\\r\\n.editorDialogs .modal .input-field input:not([readonly]), .editorDialogs .modal .input-field input.datepicker, .note-editor .modal .input-field input:not([readonly]), .note-editor .modal .input-field input.datepicker {\\r\\n  border-color: #000 !important; }\\r\\n.editorDialogs .modal .input-field input:focus:not([readonly]), .editorDialogs .modal .input-field input.datepicker:focus, .editorDialogs .modal textarea.materialize-textarea:focus:not([readonly]), .note-editor .modal .input-field input:focus:not([readonly]), .note-editor .modal .input-field input.datepicker:focus, .note-editor .modal textarea.materialize-textarea:focus:not([readonly]) {\\r\\n  box-shadow: 0 1px 0 0 grey!important;\\r\\n  border-color: grey !important;\\r\\n}\\r\\n.editorDialogs .modal label, .editorDialogs .modal .input-field input:not([readonly]) + label, .editorDialogs .modal .input-field input.datepicker + label, .editorDialogs .modal .input-field .prefix, .editorDialogs .modal .note-editor + label, .note-editor .modal label, .note-editor .modal .input-field input:not([readonly]) + label, .note-editor .modal .input-field input.datepicker + label, .note-editor .modal .input-field .prefix, .note-editor .modal .note-editor + label {\\r\\n  color: #000 !important; }\\r\\n.editorDialogs .modal .input-field input:focus:not([readonly]) + label, .editorDialogs .modal .input-field input.datepicker:focus + label, .editorDialogs .modal .input-field .prefix.active, .editorDialogs .modal textarea.materialize-textarea:focus:not([readonly]) + label, .note-editor .modal .input-field input:focus:not([readonly]) + label, .note-editor .modal .input-field input.datepicker:focus + label, .note-editor .modal .input-field .prefix.active, .note-editor .modal textarea.materialize-textarea:focus:not([readonly]) + label {\\r\\n  color: grey;\\r\\n}\\r\\n.editorDialogs .modal .btn, .editorDialogs .modal .btn-large, .note-editor .modal .btn, .note-editor .modal .btn-large {\\r\\n  background-color: #2196F3;\\r\\n  color: #fff;\\r\\n  cursor: pointer;\\r\\n}\\r\\n.editorDialogs .modal .btn:hover, .editorDialogs .modal .btn-large:hover, .note-editor .modal .btn:hover, .note-editor .modal .btn-large:hover {\\r\\n  background-color: #2196F3 !important;\\r\\n  color: #fff;\\r\\n}\\r\\n.editorDialogs .modal .modal-footer, .note-editor .modal .modal-footer {\\r\\n  background-color: #E9E9E9;\\r\\n}\\r\\n.editorDialogs .modal .modal-footer .btnClose, .note-editor .modal .modal-footer .btnClose {\\r\\n  margin-right: 15px;\\r\\n  background-color: transparent !important;\\r\\n  color: grey;\\r\\n}\\r\\n.editorDialogs .modal .modal-footer .btnClose:hover, .note-editor .modal .modal-footer .btnClose:hover {\\r\\n  color: grey;\\r\\n  background-color: transparent !important;\\r\\n}\\r\\n.editorDialogs .modal .canvasContainerEmpty, .note-editor .modal .canvasContainerEmpty {\\r\\n  border: solid 5px #9c27b0; }\\r\\n\\r\\n.note-editor {\\r\\n  position: relative;\\r\\n  border-left: 3px solid #e9e9e9;\\r\\n  border-bottom: 3px solid #e9e9e9;\\r\\n  border-right: 3px solid #e9e9e9;\\r\\n  background: #E9E9E9;\\r\\n}\\r\\n.note-editor .img-circle {\\r\\n  border-radius: 50%; }\\r\\n.note-editor .img-rounded {\\r\\n  border-radius: 5%; }\\r\\n.note-editor .img-thumbnail {\\r\\n  border: solid 5px #e9e9e9;\\r\\n  height: 200px; }\\r\\n.note-editor .img-bordered {\\r\\n  border: solid 5px #e9e9e9; }\\r\\n.note-editor .btn:hover, .note-editor .btn-large:hover {\\r\\n  background-color: #E9E9E9 !important;\\r\\n}\\r\\n.note-editor .btn.active, .note-editor .active.btn-large {\\r\\n  background-color: #E0E0E0;\\r\\n}\\r\\n.note-editor .note-editable ul li {\\r\\n  list-style-type: square !important;\\r\\n  display: list-item;\\r\\n  list-style-position: inside; }\\r\\n.note-editor .note-dialog > div {\\r\\n  display: none; }\\r\\n.note-editor .note-dialog .form-group {\\r\\n  margin-right: 0;\\r\\n  margin-left: 0; }\\r\\n.note-editor .note-dialog .note-modal-form {\\r\\n  margin: 0; }\\r\\n.note-editor .note-dialog .note-image-dialog .note-dropzone {\\r\\n  min-height: 100px;\\r\\n  margin-bottom: 10px;\\r\\n  font-size: 30px;\\r\\n  line-height: 4;\\r\\n  color: lightgray;\\r\\n  text-align: center;\\r\\n  border: 4px dashed lightgray; }\\r\\n.note-editor .transparent {\\r\\n  opacity: 0; }\\r\\n.note-editor .note-resizebar {\\r\\n  background-color: #e9e9e9;\\r\\n  width: 100%;\\r\\n  height: 13px;\\r\\n  cursor: ns-resize;\\r\\n  padding-top: 1px; }\\r\\n.note-editor .note-resizebar .note-icon-bar {\\r\\n  width: 20px;\\r\\n  margin: 2px auto;\\r\\n  border-top: 2px solid #545454; }\\r\\n.note-editor .note-toolbar {\\r\\n  position: relative;\\r\\n  color: #000;\\r\\n  background-color: #e9e9e9;\\r\\n  margin: 0;\\r\\n  z-index: 995 !important;\\r\\n  padding: 2%;\\r\\n}\\r\\n.note-editor .note-toolbar ul {\\r\\n  padding: 0; }\\r\\n.note-editor .note-toolbar .btn.disabled, .note-editor .note-toolbar .disabled.btn-large, .note-editor .note-toolbar button.disabled {\\r\\n  display: none; }\\r\\n.note-editor .note-toolbar .dropdown {\\r\\n  cursor: pointer; }\\r\\n.note-editor .note-toolbar .note-current-fontname {\\r\\n  min-width: 134px;\\r\\n  display: inline-block;\\r\\n  text-align: left; }\\r\\n.note-editor .note-handle .note-control-selection {\\r\\n  position: absolute;\\r\\n  display: none;\\r\\n  border: 2px solid #e9e9e9; }\\r\\n.note-editor .note-handle .note-control-selection .note-control-selection-bg {\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  z-index: 3;\\r\\n  background-color: rgba(117, 117, 117, 0.3); }\\r\\n.note-editor .note-handle .note-control-selection > div {\\r\\n  position: absolute; }\\r\\n.note-editor .note-handle .note-control-selection .note-control-handle {\\r\\n  width: 7px;\\r\\n  height: 7px;\\r\\n  border: 1px solid black; }\\r\\n.note-editor .note-handle .note-control-selection .note-control-holder {\\r\\n  width: 7px;\\r\\n  height: 7px;\\r\\n  border: 1px solid black; }\\r\\n.note-editor .note-handle .note-control-selection .note-control-sizing {\\r\\n  width: 15px;\\r\\n  height: 15px;\\r\\n  background-color: #e9e9e9;\\r\\n  z-index: 5;\\r\\n  cursor: se-resize; }\\r\\n.note-editor .note-handle .note-control-selection .note-control-nw {\\r\\n  top: -5px;\\r\\n  left: -5px;\\r\\n  border-right: 0;\\r\\n  border-bottom: 0; }\\r\\n.note-editor .note-handle .note-control-selection .note-control-ne {\\r\\n  top: -5px;\\r\\n  right: -5px;\\r\\n  border-bottom: 0;\\r\\n  border-left: none; }\\r\\n.note-editor .note-handle .note-control-selection .note-control-sw {\\r\\n  bottom: -5px;\\r\\n  left: -5px;\\r\\n  border-top: 0;\\r\\n  border-right: 0; }\\r\\n.note-editor .note-handle .note-control-selection .note-control-se {\\r\\n  right: -5px;\\r\\n  bottom: -5px; }\\r\\n.note-editor .note-handle .note-control-selection .note-control-selection-info {\\r\\n  right: 0;\\r\\n  bottom: 0;\\r\\n  padding: 5px;\\r\\n  margin: 17px;\\r\\n  font-size: 15px;\\r\\n  color: #000;\\r\\n  background-color: #e9e9e9;\\r\\n  z-index: 5; }\\r\\n\\r\\n.note-dialog .note-help-dialog {\\r\\n  color: #777777;\\r\\n}\\r\\n.note-dialog .note-help-dialog h4 {\\r\\n  color: #000; }\\r\\n.note-dialog .note-help-dialog thead {\\r\\n  background-color: #777777;\\r\\n  color: #fff;\\r\\n}\\r\\n.note-dialog .note-help-dialog tbody {\\r\\n  background-color: #e0e0e0; }\\r\\n\\r\\n.note-editor .btn-group, .popover .btn-group {\\r\\n  display: inline-block;\\r\\n  margin-right: 10px;\\r\\n  position: relative;\\r\\n}\\r\\n.note-editor .btn-group ul, .popover .btn-group ul {\\r\\n  padding: 0; }\\r\\n.note-editor .btn-group .closeLeft, .popover .btn-group .closeLeft {\\r\\n  padding-right: 0 !important;\\r\\n  margin-right: 0 !important; }\\r\\n.note-editor .btn-group .closeLeft i, .popover .btn-group .closeLeft i {\\r\\n  margin-right: 0 !important; }\\r\\n.note-editor .btn-group i.left, .popover .btn-group i.left {\\r\\n  margin-right: 5px; }\\r\\n.note-editor .btn, .note-editor .btn-large, .popover .btn, .popover .btn-large {\\r\\n  border-radius: 0 !important;\\r\\n  box-shadow: none !important;\\r\\n  padding: 0 9px !important;\\r\\n  color: #7F7A7A;\\r\\n  background: #fff;\\r\\n}\\r\\n.note-editor .btnSecond, .popover .btnSecond {\\r\\n  background-color: #B71C1C !important; }\\r\\n.note-editor .btnThird, .popover .btnThird {\\r\\n  background-color: #4a148c !important; }\\r\\n.note-editor note-toolbar button, .note-editor button, .popover note-toolbar button, .popover button {\\r\\n  border: none;\\r\\n  height: 36px;\\r\\n  text-transform: none;\\r\\n}\\r\\n.note-editor [type=\"checkbox\"]:checked + label:before, .note-editor [type=\"checkbox\"]:checked + label:before, .popover [type=\"checkbox\"]:checked + label:before, .popover [type=\"checkbox\"]:checked + label:before {\\r\\n  border-right-color: #9e9e9e !important;\\r\\n  border-bottom-color: #9e9e9e !important;\\r\\n}\\r\\n.note-editor .note-palette-title, .popover .note-palette-title {\\r\\n  padding: 0 !important; }\\r\\n.note-editor .colorName, .popover .colorName {\\r\\n  display: inline-block;\\r\\n  color: #000; }\\r\\n@media only screen and (max-width: 600px) {\\r\\n  .note-editor .colorName, .popover .colorName {\\r\\n    display: none; } }\\r\\n.note-editor .note-color-palette, .popover .note-color-palette {\\r\\n  line-height: 10px;\\r\\n  border: solid 3px #e9e9e9;\\r\\n  padding: 0 !important;\\r\\n  overflow-x: scroll;\\r\\n  overflow-y: hidden; }\\r\\n.note-editor .note-color-palette .note-color-row, .popover .note-color-palette .note-color-row {\\r\\n  padding: 0 !important;\\r\\n  min-width: 300px; }\\r\\n.note-editor .note-color-palette button.note-color-btn, .popover .note-color-palette button.note-color-btn {\\r\\n  width: 20px;\\r\\n  height: 20px;\\r\\n  padding: 0;\\r\\n  margin: 0; }\\r\\n.note-editor .note-color-palette .note-color-btn:hover:after, .popover .note-color-palette .note-color-btn:hover:after {\\r\\n  position: absolute;\\r\\n  width: 30px;\\r\\n  height: 30px;\\r\\n  content: \"\";\\r\\n  background-color: inherit;\\r\\n  margin-top: -15px;\\r\\n  margin-left: -15px; }\\r\\n.note-editor .note-dimension-picker, .popover .note-dimension-picker {\\r\\n  overflow: hidden; }\\r\\n.note-editor .largeDropdown, .popover .largeDropdown {\\r\\n  width: 290px; }\\r\\n.note-editor .dropdown-menu, .popover .dropdown-menu {\\r\\n  z-index: 1033; }\\r\\n.note-editor .dropdown-menu.note-check, .popover .dropdown-menu.note-check {\\r\\n  min-width: 80px; }\\r\\n.note-editor .dropdown-menu label, .popover .dropdown-menu label {\\r\\n  color: #000 !important; }\\r\\n.note-editor ul.dropdown-menu, .popover ul.dropdown-menu {\\r\\n  position: absolute;\\r\\n  top: 20px;\\r\\n  background-color: #FFFFFF;\\r\\n  box-shadow: 0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\\r\\n}\\r\\n.note-editor ul.dropdown-menu#colors, .popover ul.dropdown-menu#colors {\\r\\n  width: 342px; }\\r\\n.note-editor ul.dropdown-menu#colors .indicator, .popover ul.dropdown-menu#colors .indicator {\\r\\n  width: 50%;\\r\\n  left: 0;\\r\\n}\\r\\n.note-editor ul.dropdown-menu .colorTable, .popover ul.dropdown-menu .colorTable {\\r\\n  padding: 3px 0; }\\r\\n.note-editor ul.dropdown-menu .tabs, .popover ul.dropdown-menu .tabs {\\r\\n}\\r\\n.popover ul.dropdown-menu .tabs:hover {\\r\\n  background-color: #e9e9e9;\\r\\n}\\r\\n.note-editor ul.dropdown-menu .tabs .tab a, .note-editor ul.dropdown-menu .tabs .tab a:hover, .popover ul.dropdown-menu .tabs .tab a, .popover ul.dropdown-menu .tabs .tab a:hover {\\r\\n  color: #7F7A7A;\\r\\n}\\r\\n.note-editor ul.dropdown-menu .tabs .indicator, .popover ul.dropdown-menu .tabs .indicator {\\r\\n  background-color: #868181;\\r\\n}\\r\\n.note-editor ul.dropdown-menu li, .popover ul.dropdown-menu li {\\r\\n  list-style-type: none;\\r\\n  padding: 0 !important; }\\r\\n.note-editor ul.dropdown-menu li div, .popover ul.dropdown-menu li div {\\r\\n  padding: 3px 15px;\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.note-popover .popover {\\r\\n  position: absolute;\\r\\n  max-width: none;\\r\\n  color: #000; }\\r\\n.note-popover .popover .arrow {\\r\\n  width: 0;\\r\\n  height: 0;\\r\\n  border-style: solid;\\r\\n  border-width: 0 10px 10px 10px;\\r\\n  border-color: transparent transparent #e9e9e9 transparent; }\\r\\n.note-popover .popover .popover-content {\\r\\n  background-color: #e9e9e9; }\\r\\n.note-popover .popover .popover-content > a {\\r\\n  margin-left: 12px; }\\r\\n.note-popover .popover .popover-content a {\\r\\n  display: inline-block;\\r\\n  max-width: 200px;\\r\\n  overflow: hidden;\\r\\n  text-overflow: ellipsis;\\r\\n  white-space: nowrap;\\r\\n  vertical-align: middle; }\\r\\n.note-popover .popover .popover-content .arrow {\\r\\n  left: 20px; }\\r\\n.note-popover .popover .popover-content .btn-group {\\r\\n  display: inline-block; }\\r\\n.note-popover .popover .popover-content .btn-group .btn, .note-popover .popover .popover-content .btn-group .btn-large {\\r\\n  border-radius: 0 !important;\\r\\n  box-shadow: none !important;\\r\\n  padding: 0 9px !important;\\r\\n  background-color: #e9e9e9; }\\r\\n\\r\\n.note-popover .popover .popover-content .note-para .dropdown-menu, .note-toolbar .note-para .dropdown-menu {\\r\\n  min-width: 172px;\\r\\n  padding: 5px; }\\r\\n\\r\\n.note-popover .popover .popover-content .note-para .dropdown-menu > div:first-child, .note-toolbar .note-para .dropdown-menu > div:first-child {\\r\\n  margin-right: 5px; }\\r\\n\\r\\n.note-editor .note-dropzone {\\r\\n  position: absolute;\\r\\n  z-index: 100;\\r\\n  display: none;\\r\\n  color: #87cefa;\\r\\n  background-color: white;\\r\\n  border: 2px dashed #87cefa;\\r\\n  opacity: .95;\\r\\n  pointer-event: none; }\\r\\n\\r\\n.note-editor .note-dropzone .note-dropzone-message {\\r\\n  display: table-cell;\\r\\n  font-size: 28px;\\r\\n  font-weight: bold;\\r\\n  text-align: center;\\r\\n  vertical-align: middle; }\\r\\n\\r\\n.note-editor .note-dropzone.hover {\\r\\n  color: #098ddf;\\r\\n  border: 2px dashed #098ddf; }\\r\\n\\r\\n.note-editor.dragover .note-dropzone {\\r\\n  display: table; }\\r\\n\\r\\n.note-editor.fullscreen {\\r\\n  position: fixed;\\r\\n  top: 0;\\r\\n  left: 0;\\r\\n  z-index: 2021;\\r\\n  width: 100%; }\\r\\n\\r\\n.note-editor.fullscreen .note-editable {\\r\\n  background-color: white; }\\r\\n\\r\\n.note-editor.fullscreen .note-resizebar {\\r\\n  display: none; }\\r\\n\\r\\n.note-editor.codeview .note-editable {\\r\\n  display: none; }\\r\\n\\r\\n.note-editor.codeview .note-codable {\\r\\n  display: block; }\\r\\n\\r\\n.note-editor .note-statusbar {\\r\\n  background-color: #f5f5f5; }\\r\\n\\r\\n.note-editor .note-editable[contenteditable=true]:empty:not(:focus):before {\\r\\n  color: #a9a9a9;\\r\\n  content: attr(data-placeholder); }\\r\\n\\r\\n.note-editor .note-editable {\\r\\n  padding: 10px;\\r\\n  overflow: auto;\\r\\n  outline: 0;\\r\\n  background: #fff;\\r\\n  margin: 2%;\\r\\n  box-shadow: 0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\\r\\n}\\r\\n\\r\\n.note-editor .note-editable[contenteditable=\"false\"] {\\r\\n  background-color: #e5e5e5; }\\r\\n\\r\\n.note-editor .note-codable {\\r\\n  display: none;\\r\\n  width: 100%;\\r\\n  padding: 10px;\\r\\n  margin-bottom: 0;\\r\\n  font-family: Menlo, Monaco, monospace, sans-serif;\\r\\n  font-size: 14px;\\r\\n  color: #ccc;\\r\\n  background-color: #222;\\r\\n  border: 0;\\r\\n  -webkit-border-radius: 0;\\r\\n  -moz-border-radius: 0;\\r\\n  border-radius: 0;\\r\\n  box-shadow: none;\\r\\n  -webkit-box-sizing: border-box;\\r\\n  -moz-box-sizing: border-box;\\r\\n  -ms-box-sizing: border-box;\\r\\n  box-sizing: border-box;\\r\\n  resize: none; }\\r\\n\\r\\n.note-air-editor {\\r\\n  outline: 0; }\\r\\n\\r\\n.note-popover .popover .popover-content,\\r\\n.note-toolbar {\\r\\n  padding: 0;\\r\\n  margin: 0; }\\r\\n\\r\\n.note-popover .popover .popover-content > .btn-group,\\r\\n.note-toolbar > .btn-group {\\r\\n  margin-top: 0;\\r\\n  margin-right: 5px;\\r\\n  margin-left: 0;\\r\\n  background: #fff;\\r\\n  margin: 4px;\\r\\n  box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16),0 2px 10px 0 rgba(0,0,0,0.12);\\r\\n}\\r\\n\\r\\n.note-popover .popover .popover-content .btn-group .note-table,\\r\\n.note-toolbar .btn-group .note-table {\\r\\n  min-width: 0;\\r\\n  padding: 5px; }\\r\\n\\r\\n.note-popover .popover .popover-content .btn-group .note-table .note-dimension-picker,\\r\\n.note-toolbar .btn-group .note-table .note-dimension-picker {\\r\\n  font-size: 18px; }\\r\\n\\r\\n.note-popover .popover .popover-content .btn-group .note-table .note-dimension-picker .note-dimension-picker-mousecatcher,\\r\\n.note-toolbar .btn-group .note-table .note-dimension-picker .note-dimension-picker-mousecatcher {\\r\\n  position: absolute !important;\\r\\n  z-index: 3;\\r\\n  width: 260px;\\r\\n  height: 260px;\\r\\n  cursor: pointer; }\\r\\n\\r\\n.note-popover .popover .popover-content .btn-group .note-table .note-dimension-picker .note-dimension-picker-unhighlighted,\\r\\n.note-toolbar .btn-group .note-table .note-dimension-picker .note-dimension-picker-unhighlighted {\\r\\n  position: relative !important;\\r\\n  z-index: 1;\\r\\n  width: 312px;\\r\\n  height: 130px;\\r\\n  background-size: 26px 26px;\\r\\n  background-image: repeating-linear-gradient(0deg, #FFFFFF, #FFFFFF 2px, transparent 2px, transparent 26px), repeating-linear-gradient(-90deg, transparent, transparent 2px, #E9E9E9 2px, #E9E9E9 26px);\\r\\n}\\r\\n\\r\\n.note-popover .popover .popover-content .btn-group .note-table .note-dimension-picker .note-dimension-picker-highlighted,\\r\\n.note-toolbar .btn-group .note-table .note-dimension-picker .note-dimension-picker-highlighted {\\r\\n  position: absolute !important;\\r\\n  z-index: 2;\\r\\n  width: 26px;\\r\\n  height: 26px;\\r\\n  background-size: 26px 26px;\\r\\n  background-image: repeating-linear-gradient(0deg, #fff, #fff 2px, transparent 2px, transparent 26px), repeating-linear-gradient(-90deg,';\n  builder.string += ' transparent, transparent 2px, #9e9e9e 2px, #9e9e9e 26px);\\r\\n}\\r\\n\\r\\n.note-popover .popover .popover-content .note-style h1,\\r\\n.note-toolbar .note-style h1,\\r\\n.note-popover .popover .popover-content .note-style h2,\\r\\n.note-toolbar .note-style h2,\\r\\n.note-popover .popover .popover-content .note-style h3,\\r\\n.note-toolbar .note-style h3,\\r\\n.note-popover .popover .popover-content .note-style h4,\\r\\n.note-toolbar .note-style h4,\\r\\n.note-popover .popover .popover-content .note-style h5,\\r\\n.note-toolbar .note-style h5,\\r\\n.note-popover .popover .popover-content .note-style h6,\\r\\n.note-toolbar .note-style h6,\\r\\n.note-popover .popover .popover-content .note-style blockquote,\\r\\n.note-toolbar .note-style blockquote {\\r\\n  margin: 0; }\\r\\n\\r\\n.note-popover .popover .popover-content .note-color .dropdown-toggle,\\r\\n.note-toolbar .note-color .dropdown-toggle {\\r\\n  width: 20px;\\r\\n  padding-left: 5px; }\\r\\n\\r\\n.note-popover .popover .popover-content .note-color .dropdown-menu .btn-group,\\r\\n.note-toolbar .note-color .dropdown-menu .btn-group {\\r\\n  margin: 0; }\\r\\n\\r\\n.note-popover .popover .popover-content .note-color .dropdown-menu .btn-group:first-child,\\r\\n.note-toolbar .note-color .dropdown-menu .btn-group:first-child {\\r\\n  margin: 0 5px; }\\r\\n\\r\\n.note-popover .popover .popover-content .note-color .dropdown-menu .btn-group .note-palette-title,\\r\\n.note-toolbar .note-color .dropdown-menu .btn-group .note-palette-title {\\r\\n  margin: 2px 7px;\\r\\n  font-size: 12px;\\r\\n  text-align: center;\\r\\n  border-bottom: 1px solid #eee; }\\r\\n\\r\\n.note-popover .popover .popover-content .note-color .dropdown-menu .btn-group .note-color-reset,\\r\\n.note-toolbar .note-color .dropdown-menu .btn-group .note-color-reset {\\r\\n  padding: 0 3px;\\r\\n  margin: 3px;\\r\\n  font-size: 11px;\\r\\n  cursor: pointer;\\r\\n  -webkit-border-radius: 5px;\\r\\n  -moz-border-radius: 5px;\\r\\n  border-radius: 5px; }\\r\\n\\r\\n.note-popover .popover .popover-content .note-color .dropdown-menu .btn-group .note-color-row,\\r\\n.note-toolbar .note-color .dropdown-menu .btn-group .note-color-row {\\r\\n  height: 20px; }\\r\\n\\r\\n.note-popover .popover .popover-content .note-color .dropdown-menu .btn-group .note-color-reset:hover,\\r\\n.note-toolbar .note-color .dropdown-menu .btn-group .note-color-reset:hover {\\r\\n  background: #eee; }\\r\\n\\r\\n/*.note-popover .popover .popover-content .dropdown-menu,\\r\\n.note-toolbar .dropdown-menu {\\r\\n    min-width: 90px\\r\\n}*/\\r\\n.note-popover .popover .popover-content .dropdown-menu.right,\\r\\n.note-toolbar .dropdown-menu.right {\\r\\n  right: 0;\\r\\n  left: auto; }\\r\\n\\r\\n.note-popover .popover .popover-content .dropdown-menu.right::before,\\r\\n.note-toolbar .dropdown-menu.right::before {\\r\\n  right: 9px;\\r\\n  left: auto !important; }\\r\\n\\r\\n.note-popover .popover .popover-content .dropdown-menu.right::after,\\r\\n.note-toolbar .dropdown-menu.right::after {\\r\\n  right: 10px;\\r\\n  left: auto !important; }\\r\\n\\r\\n.note-popover .popover .popover-content .dropdown-menu.note-check li a i,\\r\\n.note-toolbar .dropdown-menu.note-check li a i {\\r\\n  color: deepskyblue;\\r\\n  visibility: hidden; }\\r\\n\\r\\n.note-popover .popover .popover-content .dropdown-menu.note-check li a.checked i,\\r\\n.note-toolbar .dropdown-menu.note-check li a.checked i {\\r\\n  visibility: visible; }\\r\\n\\r\\n.note-popover .popover .popover-content .note-fontsize-10,\\r\\n.note-toolbar .note-fontsize-10 {\\r\\n  font-size: 10px; }\\r\\n\\r\\n.codeview .note-style, .codeview .note-fonts,  .codeview .note-color, .codeview .note-undo, .codeview .note-para, .codeview .note-height {\\r\\n  display: none;\\r\\n}\\r\\n\\r\\n.codeview .note-misc{\\r\\n  background: #E0E0E0 !important;\\r\\n  padding-right: 12px !important;\\r\\n}';\n  return builder.string;\n}\n;\nvar Lgwt_material_design_addins_client_richeditor_MaterialRichEditorDebugClientBundle_1default_1InlineClientBundleGenerator$1_2_classLit = createForClass('gwt.material.design.addins.client.richeditor', 'MaterialRichEditorDebugClientBundle_default_InlineClientBundleGenerator/1', 2282);\nfunction MaterialRichEditorDebugClientBundle_default_InlineClientBundleGenerator$2(){\n}\n\ndefineClass(2283, 1, {}, MaterialRichEditorDebugClientBundle_default_InlineClientBundleGenerator$2);\n_.getName = function getName_45(){\n  return 'richEditorDebugJs';\n}\n;\n_.getText = function getText_36(){\n  var builder;\n  builder = new StringBuilder;\n  builder.string += \"/**\\r\\n * MaterialNote v1.2.1\\r\\n * Super simple wysiwyg editor on Materialize\\r\\n * a fork of materialnote.js => http://materialnote.org/\\r\\n *\\r\\n * original summernote credits:\\r\\n * summernote.js\\r\\n * Copyright 2013-2015 Alan Hong. and other contributors\\r\\n * summernote (and so materialNote) may be freely distributed under the MIT license./\\r\\n * (https://raw.githubusercontent.com/Cerealkillerway/materialNote/master/license.txt)\\r\\n *\\r\\n * edited by CK (http://www.web-forge.info)\\r\\n * thanks to Tox for code review (http://emanuele.itoscano.com/)\\r\\n */\\r\\n(function(factory) {\\r\\n    /* global define */\\r\\n    if (typeof define === 'function' && define.amd) {\\r\\n        // AMD. Register as an anonymous module.\\r\\n        define(['jquery'], factory);\\r\\n    } else {\\r\\n        // Browser globals: jQuery\\r\\n        factory(window.jQuery);\\r\\n    }\\r\\n}(function($) {\\r\\n\\r\\n    if (!Array.prototype.reduce) {\\r\\n        /**\\r\\n         * Array.prototype.reduce polyfill\\r\\n         * @param {Function} callback\\r\\n         * @param {Value} [initialValue]\\r\\n         * @return {Value}\\r\\n         * @see http://goo.gl/WNriQD\\r\\n         */\\r\\n        Array.prototype.reduce = function(callback) {\\r\\n            var t = Object(this), len = t.length >>> 0, k = 0, value;\\r\\n\\r\\n            if (arguments.length === 2) {\\r\\n                value = arguments[1];\\r\\n            } else {\\r\\n                while (k < len && !(k in t)) {\\r\\n                    k++;\\r\\n                }\\r\\n                if (k >= len) {\\r\\n                    throw new TypeError('Reduce of empty array with no initial value');\\r\\n                }\\r\\n                value = t[k++];\\r\\n            }\\r\\n            for (; k < len; k++) {\\r\\n                if (k in t) {\\r\\n                    value = callback(value, t[k], k, t);\\r\\n                }\\r\\n            }\\r\\n            return value;\\r\\n        };\\r\\n    }\\r\\n\\r\\n    if ('function' !== typeof Array.prototype.filter) {\\r\\n        /**\\r\\n         * Array.prototype.filter polyfill\\r\\n         * @param {Function} func\\r\\n         * @return {Array}\\r\\n         * @see http://goo.gl/T1KFnq\\r\\n         */\\r\\n        Array.prototype.filter = function(func) {\\r\\n            var t = Object(this), len = t.length >>> 0;\\r\\n            var res = [];\\r\\n            var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\\r\\n\\r\\n            for (var i = 0; i < len; i++) {\\r\\n                if (i in t) {\\r\\n                    var val = t[i];\\r\\n\\r\\n                    if (func.call(thisArg, val, i, t)) {\\r\\n                        res.push(val);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            return res;\\r\\n        };\\r\\n    }\\r\\n\\r\\n    var isSupportAmd = typeof define === 'function' && define.amd;\\r\\n\\r\\n    /**\\r\\n     * returns whether font is installed or not.\\r\\n     * @param {String} fontName\\r\\n     * @return {Boolean}\\r\\n     */\\r\\n    var isFontInstalled = function(fontName) {\\r\\n        if (fontName === \\\"Roboto\\\") return true;\\r\\n        var testFontName = fontName === 'Comic Sans MS' ? 'Courier New' : 'Comic Sans MS';\\r\\n        var $tester = $('<div>').css({\\r\\n            position: 'absolute',\\r\\n            left: '-9999px',\\r\\n            top: '-9999px',\\r\\n            fontSize: '200px'\\r\\n        }).text('mmmmmmmmmwwwwwww').appendTo(document.body);\\r\\n\\r\\n        var originalWidth = $tester.css('fontFamily', testFontName).width();\\r\\n        var width = $tester.css('fontFamily', fontName + ',' + testFontName).width();\\r\\n\\r\\n        $tester.remove();\\r\\n\\r\\n        return originalWidth !== width;\\r\\n    };\\r\\n\\r\\n\\r\\n    var userAgent = navigator.userAgent;\\r\\n\\r\\n    /**\\r\\n     * @class core.agent\\r\\n     * Object which check platform and agent\\r\\n     * @singleton\\r\\n     * @alternateClassName agent\\r\\n     */\\r\\n    var agent = {\\r\\n        /** @property {Boolean} [isMac=false] true if this agent is Mac  */\\r\\n        isMac: navigator.appVersion.indexOf('Mac') > -1,\\r\\n        /** @property {Boolean} [isMSIE=false] true if this agent is a Internet Explorer  */\\r\\n        isMSIE: /MSIE|Trident/i.test(userAgent),\\r\\n        /** @property {Boolean} [isFF=false] true if this agent is a Firefox  */\\r\\n        isFF: /firefox/i.test(userAgent),\\r\\n        isWebkit: /webkit/i.test(userAgent),\\r\\n        /** @property {Boolean} [isSafari=false] true if this agent is a Safari  */\\r\\n        isSafari: /safari/i.test(userAgent),\\r\\n        /** @property {String} jqueryVersion current jQuery version string  */\\r\\n        jqueryVersion: parseFloat($.fn.jquery),\\r\\n        isSupportAmd: isSupportAmd,\\r\\n        hasCodeMirror: isSupportAmd ? require.specified('CodeMirror') : !!window.CodeMirror,\\r\\n        isFontInstalled: isFontInstalled,\\r\\n        isW3CRangeSupport: !!document.createRange\\r\\n    };\\r\\n\\r\\n    /**\\r\\n     * @class core.func\\r\\n     * func utils (for high-order func's arg)\\r\\n     * @singleton\\r\\n     * @alternateClassName func\\r\\n     */\\r\\n    var func = (function() {\\r\\n        var eq = function(itemA) {\\r\\n            return function(itemB) {\\r\\n                return itemA === itemB;\\r\\n            };\\r\\n        };\\r\\n\\r\\n        var eq2 = function(itemA, itemB) {\\r\\n            return itemA === itemB;\\r\\n        };\\r\\n\\r\\n        var peq2 = function(propName) {\\r\\n            return function(itemA, itemB) {\\r\\n                return itemA[propName] === itemB[propName];\\r\\n            };\\r\\n        };\\r\\n\\r\\n        var ok = function() {\\r\\n            return true;\\r\\n        };\\r\\n\\r\\n        var fail = function() {\\r\\n            return false;\\r\\n        };\\r\\n\\r\\n        var not = function(f) {\\r\\n            return function() {\\r\\n                return !f.apply(f, arguments);\\r\\n            };\\r\\n        };\\r\\n\\r\\n        var and = function(fA, fB) {\\r\\n            return function(item) {\\r\\n                return fA(item) && fB(item);\\r\\n            };\\r\\n        };\\r\\n\\r\\n        var self = function(a) {\\r\\n            return a;\\r\\n        };\\r\\n\\r\\n        var idCounter = 0;\\r\\n\\r\\n        /**\\r\\n         * generate a globally-unique id\\r\\n         * @param {String} [prefix]\\r\\n         */\\r\\n        var uniqueId = function(prefix) {\\r\\n            var id = ++idCounter + '';\\r\\n\\r\\n            return prefix ? prefix + id : id;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns bnd (bounds) from rect\\r\\n         * - IE Compatability Issue: http://goo.gl/sRLOAo\\r\\n         * - Scroll Issue: http://goo.gl/sNjUc\\r\\n         * @param {Rect} rect\\r\\n         * @return {Object} bounds\\r\\n         * @return {Number} bounds.top\\r\\n         * @return {Number} bounds.left\\r\\n         * @return {Number} bounds.width\\r\\n         * @return {Number} bounds.height\\r\\n         */\\r\\n        var rect2bnd = function(rect) {\\r\\n            var $document = $(document);\\r\\n            return {\\r\\n                top: rect.top + $document.scrollTop(),\\r\\n                left: rect.left + $document.scrollLeft(),\\r\\n                width: rect.right - rect.left,\\r\\n                height: rect.bottom - rect.top\\r\\n            };\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns a copy of the object where the keys have become the values and the values the keys.\\r\\n         * @param {Object} obj\\r\\n         * @return {Object}\\r\\n         */\\r\\n        var invertObject = function(obj) {\\r\\n            var inverted = {};\\r\\n\\r\\n            for (var key in obj) {\\r\\n                if (obj.hasOwnProperty(key)) {\\r\\n                    inverted[obj[key]] = key;\\r\\n                }\\r\\n            }\\r\\n            return inverted;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @param {String} namespace\\r\\n         * @param {String} [prefix]\\r\\n         * @return {String}\\r\\n         */\\r\\n        var namespaceToCamel = function(namespace, prefix) {\\r\\n            prefix = prefix || '';\\r\\n            return prefix + namespace.split('.').map(function(name) {\\r\\n                    return name.substring(0, 1).toUpperCase() + name.substring(1);\\r\\n                }).join('');\\r\\n        };\\r\\n\\r\\n        return {\\r\\n            eq: eq,\\r\\n            eq2: eq2,\\r\\n            peq2: peq2,\\r\\n            ok: ok,\\r\\n            fail: fail,\\r\\n            self: self,\\r\\n            not: not,\\r\\n            and: and,\\r\\n            uniqueId: uniqueId,\\r\\n            rect2bnd: rect2bnd,\\r\\n            invertObject: invertObject,\\r\\n            namespaceToCamel: namespaceToCamel\\r\\n        };\\r\\n    })(); //end func\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @class core.list\\r\\n     * list utils\\r\\n     * @singleton\\r\\n     * @alternateClassName list\\r\\n     */\\r\\n    var list = (function() {\\r\\n        /**\\r\\n         * returns the first item of an array.\\r\\n         * @param {Array} array\\r\\n         */\\r\\n        var head = function(array) {\\r\\n            return array[0];\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns the last item of an array.\\r\\n         * @param {Array} array\\r\\n         */\\r\\n        var last = function(array) {\\r\\n            return array[array.length - 1];\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns everything but the last entry of the array.\\r\\n         * @param {Array} array\\r\\n         */\\r\\n        var initial = function(array) {\\r\\n            return array.slice(0, array.length - 1);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns the rest of the items in an array.\\r\\n         * @param {Array} array\\r\\n         */\\r\\n        var tail = function(array) {\\r\\n            return array.slice(1);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns item of array\\r\\n         */\\r\\n        var find = function(array, pred) {\\r\\n            for (var idx = 0, len = array.length; idx < len; idx ++) {\\r\\n                var item = array[idx];\\r\\n\\r\\n                if (pred(item)) {\\r\\n                    return item;\\r\\n                }\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns true if all of the values in the array pass the predicate truth test.\\r\\n         */\\r\\n        var all = function(array, pred) {\\r\\n            for (var idx = 0, len = array.length; idx < len; idx ++) {\\r\\n                if (!pred(array[idx])) {\\r\\n                    return false;\\r\\n                }\\r\\n            }\\r\\n            return true;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns true if the value is present in the list.\\r\\n         */\\r\\n        var contains = function(array, item) {\\r\\n            return $.inArray(item, array) !== -1;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * get sum from a list\\r\\n         * @param {Array} array - array\\r\\n         * @param {Function} fn - iterator\\r\\n         */\\r\\n        var sum = function(array, fn) {\\r\\n            fn = fn || func.self;\\r\\n            return array.reduce(function(memo, v) {\\r\\n                return memo + fn(v);\\r\\n            }, 0);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns a copy of the collection with array type.\\r\\n         * @param {Collection} collection - collection eg) node.childNodes, ...\\r\\n         */\\r\\n        var from = function(collection) {\\r\\n            var result = [], idx = -1, length = collection.length;\\r\\n            while (++idx < length) {\\r\\n                result[idx] = collection[idx];\\r\\n            }\\r\\n            return result;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * cluster elements by predicate function.\\r\\n         * @param {Array} array - array\\r\\n         * @param {Function} fn - predicate function for cluster rule\\r\\n         * @param {Array[]}\\r\\n         */\\r\\n        var clusterBy = function(array, fn) {\\r\\n            if (!array.length) { return []; }\\r\\n            var aTail = tail(array);\\r\\n\\r\\n            return aTail.reduce(function(memo, v) {\\r\\n                var aLast = last(memo);\\r\\n                if (fn(last(aLast), v)) {\\r\\n                    aLast[aLast.length] = v;\\r\\n                } else {\\r\\n                    memo[memo.length] = [v];\\r\\n                }\\r\\n                return memo;\\r\\n            }, [[head(array)]]);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns a copy of the array with all falsy values removed\\r\\n         * @param {Array} array - array\\r\\n         * @param {Function} fn - predicate function for cluster rule\\r\\n         */\\r\\n        var compact = function(array) {\\r\\n            var aResult = [];\\r\\n\\r\\n            for (var idx = 0, len = array.length; idx < len; idx ++) {\\r\\n                if (array[idx]) { aResult.push(array[idx]); }\\r\\n            }\\r\\n            return aResult;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * produces a duplicate-free version of the array\\r\\n         * @param {Array} array\\r\\n         */\\r\\n        var unique = function(array) {\\r\\n            var results = [];\\r\\n\\r\\n            for (var idx = 0, len = array.length; idx < len; idx ++) {\\r\\n                if (!contains(results, array[idx])) {\\r\\n                    results.push(array[idx]);\\r\\n                }\\r\\n            }\\r\\n            return results;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns next item.\\r\\n         * @param {Array} array\\r\\n         */\\r\\n        var next = function(array, item) {\\r\\n            var idx = array.indexOf(item);\\r\\n\\r\\n            if (idx === -1) {return null;}\\r\\n            return array[idx + 1];\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns prev item.\\r\\n         * @param {Array} array\\r\\n         */\\r\\n        var prev = function(array, item) {\\r\\n            var idx = array.indexOf(item);\\r\\n\\r\\n            if (idx === -1) {return null;}\\r\\n            return array[idx - 1];\\r\\n        };\\r\\n\\r\\n\\r\\n        return {head: head, last: last, initial: initial, tail: tail, prev: prev, next: next, find: find, contains: contains, all: all, sum: sum, from: from, clusterBy: clusterBy, compact: compact, unique: unique};\\r\\n    })(); //end list\\r\\n\\r\\n\\r\\n    var NBSP_CHAR = String.fromCharCode(160);\\r\\n    var ZERO_WIDTH_NBSP_CHAR = '\\\\ufeff';\\r\\n\\r\\n    /**\\r\\n     * @class core.dom\\r\\n     * Dom functions\\r\\n     * @singleton\\r\\n     * @alternateClassName dom\\r\\n     */\\r\\n    var dom = (function() {\\r\\n        /**\\r\\n         * @method isEditable\\r\\n         * returns whether node is `note-editable` or not.\\r\\n         * @param {Node} node\\r\\n         * @return {Boolean}\\r\\n         */\\r\\n        var isEditable = function(node) {\\r\\n            return node && $(node).hasClass('note-editable');\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method isControlSizing\\r\\n         * returns whether node is `note-control-sizing` or not.\\r\\n         * @param {Node} node\\r\\n         * @return {Boolean}\\r\\n         */\\r\\n        var isControlSizing = function(node) {\\r\\n            return node && $(node).hasClass('note-control-sizing');\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method  buildLayoutInfo\\r\\n         * build layoutInfo from $editor(.note-editor)\\r\\n         * @param {jQuery} $editor\\r\\n         * @return {Object}\\r\\n         * @return {Function} return.editor\\r\\n         * @return {Node} return.dropzone\\r\\n         * @return {Node} return.toolbar\\r\\n         * @return {Node} return.editable\\r\\n         * @return {Node} return.codable\\r\\n         * @return {Node} return.popover\\r\\n         * @return {Node} return.handle\\r\\n         * @return {Node} return.dialog\\r\\n         */\\r\\n        var buildLayoutInfo = function($editor) {\\r\\n            var makeFinder;\\r\\n\\r\\n            // air mode\\r\\n            if ($editor.hasClass('note-air-editor')) {\\r\\n                var id = list.last($editor.attr('id').split('-'));\\r\\n\\r\\n                makeFinder = function(sIdPrefix) {\\r\\n                    return function() { return $(sIdPrefix + id); };\\r\\n                };\\r\\n\\r\\n                return {\\r\\n                    editor: function() { return $editor; },\\r\\n                    holder : function() { return $editor.data('holder'); },\\r\\n                    editable: function() { return $editor; },\\r\\n                    popover: makeFinder('#note-popover-'),\\r\\n                    handle: makeFinder('#note-handle-'),\\r\\n                    dialog: makeFinder('#note-dialog-')\\r\\n                };\\r\\n                // frame mode\\r\\n            } else {\\r\\n                makeFinder = function(sClassName) {\\r\\n                    return function() { return $editor.find(sClassName); };\\r\\n                };\\r\\n                return {\\r\\n                    editor: function() { return $editor; },\\r\\n                    holder : function() { return $editor.data('holder'); },\\r\\n                    dropzone: makeFinder('.note-dropzone'),\\r\\n                    toolbar: makeFinder('.note-toolbar'),\\r\\n                    editable: makeFinder('.note-editable'),\\r\\n                    codable: makeFinder('.note-codable'),\\r\\n                    statusbar: makeFinder('.note-statusbar'),\\r\\n                    popover: makeFinder('.note-popover'),\\r\\n                    handle: makeFinder('.note-handle'),\\r\\n                    dialog: makeFinder('.note-dialog')\\r\\n                };\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns makeLayoutInfo from editor's descendant node.\\r\\n         * @private\\r\\n         * @param {Node} descendant\\r\\n         * @return {Object}\\r\\n         */\\r\\n        var makeLayoutInfo = function(descenda\";\n  builder.string += \"nt) {\\r\\n            var $target = $(descendant).closest('.note-editor, .note-air-editor, .note-air-layout');\\r\\n\\r\\n            if (!$target.length) {\\r\\n                return null;\\r\\n            }\\r\\n            var $editor;\\r\\n\\r\\n            if ($target.is('.note-editor, .note-air-editor')) {\\r\\n                $editor = $target;\\r\\n            } else {\\r\\n                $editor = $('#note-editor-' + list.last($target.attr('id').split('-')));\\r\\n            }\\r\\n            return buildLayoutInfo($editor);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method makePredByNodeName\\r\\n         * returns predicate which judge whether nodeName is same\\r\\n         * @param {String} nodeName\\r\\n         * @return {Function}\\r\\n         */\\r\\n        var makePredByNodeName = function(nodeName) {\\r\\n            nodeName = nodeName.toUpperCase();\\r\\n            return function(node) {\\r\\n                return node && node.nodeName.toUpperCase() === nodeName;\\r\\n            };\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method isText\\r\\n         * @param {Node} node\\r\\n         * @return {Boolean} true if node's type is text(3)\\r\\n         */\\r\\n        var isText = function(node) {\\r\\n            return node && node.nodeType === 3;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * ex) br, col, embed, hr, img, input, ...\\r\\n         * @see http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements\\r\\n         */\\r\\n        var isVoid = function(node) {\\r\\n            return node && /^BR|^IMG|^HR/.test(node.nodeName.toUpperCase());\\r\\n        };\\r\\n\\r\\n        var isPara = function(node) {\\r\\n            if (isEditable(node)) {\\r\\n                return false;\\r\\n            }\\r\\n            // Chrome(v31.0), FF(v25.0.1) use DIV for paragraph\\r\\n            return node && /^DIV|^P|^LI|^H[1-7]/.test(node.nodeName.toUpperCase());\\r\\n        };\\r\\n\\r\\n        var isLi = makePredByNodeName('LI');\\r\\n\\r\\n        var isPurePara = function(node) {\\r\\n            return isPara(node) && !isLi(node);\\r\\n        };\\r\\n\\r\\n        var isTable = makePredByNodeName('TABLE');\\r\\n\\r\\n        var isInline = function(node) {\\r\\n            return !isBodyContainer(node) && !isList(node) && !isPara(node) && !isTable(node) && !isBlockquote(node);\\r\\n        };\\r\\n\\r\\n        var isList = function(node) {\\r\\n            return node && /^UL|^OL/.test(node.nodeName.toUpperCase());\\r\\n        };\\r\\n\\r\\n        var isCell = function(node) {\\r\\n            return node && /^TD|^TH/.test(node.nodeName.toUpperCase());\\r\\n        };\\r\\n\\r\\n        var isBlockquote = makePredByNodeName('BLOCKQUOTE');\\r\\n\\r\\n        var isBodyContainer = function(node) {\\r\\n            return isCell(node) || isBlockquote(node) || isEditable(node);\\r\\n        };\\r\\n\\r\\n        var isAnchor = makePredByNodeName('A');\\r\\n\\r\\n        var isParaInline = function(node) {\\r\\n            return isInline(node) && !!ancestor(node, isPara);\\r\\n        };\\r\\n\\r\\n        var isBodyInline = function(node) {\\r\\n            return isInline(node) && !ancestor(node, isPara);\\r\\n        };\\r\\n\\r\\n        var isBody = makePredByNodeName('BODY');\\r\\n\\r\\n        /**\\r\\n         * returns whether nodeB is closest sibling of nodeA\\r\\n         * @param {Node} nodeA\\r\\n         * @param {Node} nodeB\\r\\n         * @return {Boolean}\\r\\n         */\\r\\n        var isClosestSibling = function(nodeA, nodeB) {\\r\\n            return nodeA.nextSibling === nodeB || nodeA.previousSibling === nodeB;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns array of closest siblings with node\\r\\n         * @param {Node} node\\r\\n         * @param {function} [pred] - predicate function\\r\\n         * @return {Node[]}\\r\\n         */\\r\\n        var withClosestSiblings = function(node, pred) {\\r\\n            pred = pred || func.ok;\\r\\n            var siblings = [];\\r\\n\\r\\n            if (node.previousSibling && pred(node.previousSibling)) {\\r\\n                siblings.push(node.previousSibling);\\r\\n            }\\r\\n            siblings.push(node);\\r\\n            if (node.nextSibling && pred(node.nextSibling)) {\\r\\n                siblings.push(node.nextSibling);\\r\\n            }\\r\\n            return siblings;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * blank HTML for cursor position\\r\\n         * - [workaround] for MSIE IE doesn't works with bogus br\\r\\n         */\\r\\n        var blankHTML = agent.isMSIE ? '&nbsp;' : '<br>';\\r\\n\\r\\n        /**\\r\\n         * @method nodeLength\\r\\n         * returns #text's text size or element's childNodes size\\r\\n         * @param {Node} node\\r\\n         */\\r\\n        var nodeLength = function(node) {\\r\\n            if (isText(node)) {\\r\\n                return node.nodeValue.length;\\r\\n            }\\r\\n            return node.childNodes.length;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns whether node is empty or not.\\r\\n         * @param {Node} node\\r\\n         * @return {Boolean}\\r\\n         */\\r\\n        var isEmpty = function(node) {\\r\\n            var len = nodeLength(node);\\r\\n\\r\\n            if (len === 0) {\\r\\n                return true;\\r\\n            } else if (!isText(node) && len === 1 && node.innerHTML === blankHTML) {\\r\\n                return true;\\r\\n            } else if (list.all(node.childNodes, isText) && node.innerHTML === '') {\\r\\n                return true;\\r\\n            }\\r\\n            return false;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * padding blankHTML if node is empty (for cursor position)\\r\\n         */\\r\\n        var paddingBlankHTML = function(node) {\\r\\n            if (!isVoid(node) && !nodeLength(node)) {\\r\\n                node.innerHTML = blankHTML;\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * find nearest ancestor predicate hit\\r\\n         *\\r\\n         * @param {Node} node\\r\\n         * @param {Function} pred - predicate function\\r\\n         */\\r\\n        var ancestor = function(node, pred) {\\r\\n            while (node) {\\r\\n                if (pred(node)) { return node; }\\r\\n                if (isEditable(node)) { break; }\\r\\n\\r\\n                node = node.parentNode;\\r\\n            }\\r\\n            return null;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * find nearest ancestor only single child blood line and predicate hit\\r\\n         *\\r\\n         * @param {Node} node\\r\\n         * @param {Function} pred - predicate function\\r\\n         */\\r\\n        var singleChildAncestor = function(node, pred) {\\r\\n            node = node.parentNode;\\r\\n\\r\\n            while (node) {\\r\\n                if (nodeLength(node) !== 1) { break; }\\r\\n                if (pred(node)) { return node; }\\r\\n                if (isEditable(node)) { break; }\\r\\n\\r\\n                node = node.parentNode;\\r\\n            }\\r\\n            return null;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns new array of ancestor nodes (until predicate hit).\\r\\n         *\\r\\n         * @param {Node} node\\r\\n         * @param {Function} [optional] pred - predicate function\\r\\n         */\\r\\n        var listAncestor = function(node, pred) {\\r\\n            pred = pred || func.fail;\\r\\n\\r\\n            var ancestors = [];\\r\\n            ancestor(node, function(el) {\\r\\n                if (!isEditable(el)) {\\r\\n                    ancestors.push(el);\\r\\n                }\\r\\n\\r\\n                return pred(el);\\r\\n            });\\r\\n            return ancestors;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * find farthest ancestor predicate hit\\r\\n         */\\r\\n        var lastAncestor = function(node, pred) {\\r\\n            var ancestors = listAncestor(node);\\r\\n            return list.last(ancestors.filter(pred));\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns common ancestor node between two nodes.\\r\\n         *\\r\\n         * @param {Node} nodeA\\r\\n         * @param {Node} nodeB\\r\\n         */\\r\\n        var commonAncestor = function(nodeA, nodeB) {\\r\\n            var ancestors = listAncestor(nodeA);\\r\\n            for (var n = nodeB; n; n = n.parentNode) {\\r\\n                if ($.inArray(n, ancestors) > -1) { return n; }\\r\\n            }\\r\\n            return null; // difference document area\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * listing all previous siblings (until predicate hit).\\r\\n         *\\r\\n         * @param {Node} node\\r\\n         * @param {Function} [optional] pred - predicate function\\r\\n         */\\r\\n        var listPrev = function(node, pred) {\\r\\n            pred = pred || func.fail;\\r\\n\\r\\n            var nodes = [];\\r\\n            while (node) {\\r\\n                if (pred(node)) { break; }\\r\\n                nodes.push(node);\\r\\n                node = node.previousSibling;\\r\\n            }\\r\\n            return nodes;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * listing next siblings (until predicate hit).\\r\\n         *\\r\\n         * @param {Node} node\\r\\n         * @param {Function} [pred] - predicate function\\r\\n         */\\r\\n        var listNext = function(node, pred) {\\r\\n            pred = pred || func.fail;\\r\\n\\r\\n            var nodes = [];\\r\\n            while (node) {\\r\\n                if (pred(node)) { break; }\\r\\n                nodes.push(node);\\r\\n                node = node.nextSibling;\\r\\n            }\\r\\n            return nodes;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * listing descendant nodes\\r\\n         *\\r\\n         * @param {Node} node\\r\\n         * @param {Function} [pred] - predicate function\\r\\n         */\\r\\n        var listDescendant = function(node, pred) {\\r\\n            var descendents = [];\\r\\n            pred = pred || func.ok;\\r\\n\\r\\n            // start DFS(depth first search) with node\\r\\n            (function fnWalk(current) {\\r\\n                if (node !== current && pred(current)) {\\r\\n                    descendents.push(current);\\r\\n                }\\r\\n                for (var idx = 0, len = current.childNodes.length; idx < len; idx++) {\\r\\n                    fnWalk(current.childNodes[idx]);\\r\\n                }\\r\\n            })(node);\\r\\n\\r\\n            return descendents;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * wrap node with new tag.\\r\\n         *\\r\\n         * @param {Node} node\\r\\n         * @param {Node} tagName of wrapper\\r\\n         * @return {Node} - wrapper\\r\\n         */\\r\\n        var wrap = function(node, wrapperName) {\\r\\n            var parent = node.parentNode;\\r\\n            var wrapper = $('<' + wrapperName + '>')[0];\\r\\n\\r\\n            parent.insertBefore(wrapper, node);\\r\\n            wrapper.appendChild(node);\\r\\n\\r\\n            return wrapper;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * insert node after preceding\\r\\n         *\\r\\n         * @param {Node} node\\r\\n         * @param {Node} preceding - predicate function\\r\\n         */\\r\\n        var insertAfter = function(node, preceding) {\\r\\n            var next = preceding.nextSibling, parent = preceding.parentNode;\\r\\n            if (next) {\\r\\n                parent.insertBefore(node, next);\\r\\n            } else {\\r\\n                parent.appendChild(node);\\r\\n            }\\r\\n            return node;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * append elements.\\r\\n         *\\r\\n         * @param {Node} node\\r\\n         * @param {Collection} aChild\\r\\n         */\\r\\n        var appendChildNodes = function(node, aChild) {\\r\\n            $.each(aChild, function(idx, child) {\\r\\n                node.appendChild(child);\\r\\n            });\\r\\n            return node;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns whether boundaryPoint is left edge or not.\\r\\n         *\\r\\n         * @param {BoundaryPoint} point\\r\\n         * @return {Boolean}\\r\\n         */\\r\\n        var isLeftEdgePoint = function(point) {\\r\\n            return point.offset === 0;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns whether boundaryPoint is right edge or not.\\r\\n         *\\r\\n         * @param {BoundaryPoint} point\\r\\n         * @return {Boolean}\\r\\n         */\\r\\n        var isRightEdgePoint = function(point) {\\r\\n            return point.offset === nodeLength(point.node);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns whether boundaryPoint is edge or not.\\r\\n         *\\r\\n         * @param {BoundaryPoint} point\\r\\n         * @return {Boolean}\\r\\n         */\\r\\n        var isEdgePoint = function(point) {\\r\\n            return isLeftEdgePoint(point) || isRightEdgePoint(point);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns wheter node is left edge of ancestor or not.\\r\\n         *\\r\\n         * @param {Node} node\\r\\n         * @param {Node} ancestor\\r\\n         * @return {Boolean}\\r\\n         */\\r\\n        var isLeftEdgeOf = function(node, ancestor) {\\r\\n            while (node && node !== ancestor) {\\r\\n                if (position(node) !== 0) {\\r\\n                    return false;\\r\\n                }\\r\\n                node = node.parentNode;\\r\\n            }\\r\\n\\r\\n            return true;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns whether node is right edge of ancestor or not.\\r\\n         *\\r\\n         * @param {Node} node\\r\\n         * @param {Node} ancestor\\r\\n         * @return {Boolean}\\r\\n         */\\r\\n        var isRightEdgeOf = function(node, ancestor) {\\r\\n            while (node && node !== ancestor) {\\r\\n                if (position(node) !== nodeLength(node.parentNode) - 1) {\\r\\n                    return false;\\r\\n                }\\r\\n                node = node.parentNode;\\r\\n            }\\r\\n\\r\\n            return true;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns offset from parent.\\r\\n         *\\r\\n         * @param {Node} node\\r\\n         */\\r\\n        var position = function(node) {\\r\\n            var offset = 0;\\r\\n            while ((node = node.previousSibling)) {\\r\\n                offset += 1;\\r\\n            }\\r\\n            return offset;\\r\\n        };\\r\\n\\r\\n        var hasChildren = function(node) {\\r\\n            return !!(node && node.childNodes && node.childNodes.length);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns previous boundaryPoint\\r\\n         *\\r\\n         * @param {BoundaryPoint} point\\r\\n         * @param {Boolean} isSkipInnerOffset\\r\\n         * @return {BoundaryPoint}\\r\\n         */\\r\\n        var prevPoint = function(point, isSkipInnerOffset) {\\r\\n            var node, offset;\\r\\n\\r\\n            if (point.offset === 0) {\\r\\n                if (isEditable(point.node)) {\\r\\n                    return null;\\r\\n                }\\r\\n\\r\\n                node = point.node.parentNode;\\r\\n                offset = position(point.node);\\r\\n            } else if (hasChildren(point.node)) {\\r\\n                node = point.node.childNodes[point.offset - 1];\\r\\n                offset = nodeLength(node);\\r\\n            } else {\\r\\n                node = point.node;\\r\\n                offset = isSkipInnerOffset ? 0 : point.offset - 1;\\r\\n            }\\r\\n\\r\\n            return {\\r\\n                node: node,\\r\\n                offset: offset\\r\\n            };\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns next boundaryPoint\\r\\n         *\\r\\n         * @param {BoundaryPoint} point\\r\\n         * @param {Boolean} isSkipInnerOffset\\r\\n         * @return {BoundaryPoint}\\r\\n         */\\r\\n        var nextPoint = function(point, isSkipInnerOffset) {\\r\\n            var node, offset;\\r\\n\\r\\n            if (nodeLength(point.node) === point.offset) {\\r\\n                if (isEditable(point.node)) {\\r\\n                    return null;\\r\\n                }\\r\\n\\r\\n                node = point.node.parentNode;\\r\\n                offset = position(point.node) + 1;\\r\\n            } else if (hasChildren(point.node)) {\\r\\n                node = point.node.childNodes[point.offset];\\r\\n                offset = 0;\\r\\n            } else {\\r\\n                node = point.node;\\r\\n                offset = isSkipInnerOffset ? nodeLength(point.node) : point.offset + 1;\\r\\n            }\\r\\n\\r\\n            return {\\r\\n                node: node,\\r\\n                offset: offset\\r\\n            };\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns whether pointA and pointB is same or not.\\r\\n         *\\r\\n         * @param {BoundaryPoint} pointA\\r\\n         * @param {BoundaryPoint} pointB\\r\\n         * @return {Boolean}\\r\\n         */\\r\\n        var isSamePoint = function(pointA, pointB) {\\r\\n            return pointA.node === pointB.node && pointA.offset === pointB.offset;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns whether point is visible (can set cursor) or not.\\r\\n         *\\r\\n         * @param {BoundaryPoint} point\\r\\n         * @return {Boolean}\\r\\n         */\\r\\n        var isVisiblePoint = function(point) {\\r\\n            if (isText(point.node) || !hasChildren(point.node) || isEmpty(point.node)) {\\r\\n                return true;\\r\\n            }\\r\\n\\r\\n            var leftNode = point.node.childNodes[point.offset - 1];\\r\\n            var rightNode = point.node.childNodes[point.offset];\\r\\n            if ((!leftNode || isVoid(leftNode)) && (!rightNode || isVoid(rightNode))) {\\r\\n                return true;\\r\\n            }\\r\\n\\r\\n            return false;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method prevPointUtil\\r\\n         *\\r\\n         * @param {BoundaryPoint} point\\r\\n         * @param {Function} pred\\r\\n         * @return {BoundaryPoint}\\r\\n         */\\r\\n        var prevPointUntil = function(point, pred) {\\r\\n            while (point) {\\r\\n               \";\n  builder.string += \" if (pred(point)) {\\r\\n                    return point;\\r\\n                }\\r\\n\\r\\n                point = prevPoint(point);\\r\\n            }\\r\\n\\r\\n            return null;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method nextPointUntil\\r\\n         *\\r\\n         * @param {BoundaryPoint} point\\r\\n         * @param {Function} pred\\r\\n         * @return {BoundaryPoint}\\r\\n         */\\r\\n        var nextPointUntil = function(point, pred) {\\r\\n            while (point) {\\r\\n                if (pred(point)) {\\r\\n                    return point;\\r\\n                }\\r\\n\\r\\n                point = nextPoint(point);\\r\\n            }\\r\\n\\r\\n            return null;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns whether point has character or not.\\r\\n         *\\r\\n         * @param {Point} point\\r\\n         * @return {Boolean}\\r\\n         */\\r\\n        var isCharPoint = function(point) {\\r\\n            if (!isText(point.node)) {\\r\\n                return false;\\r\\n            }\\r\\n\\r\\n            var ch = point.node.nodeValue.charAt(point.offset - 1);\\r\\n            return ch && (ch !== ' ' && ch !== NBSP_CHAR);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method walkPoint\\r\\n         *\\r\\n         * @param {BoundaryPoint} startPoint\\r\\n         * @param {BoundaryPoint} endPoint\\r\\n         * @param {Function} handler\\r\\n         * @param {Boolean} isSkipInnerOffset\\r\\n         */\\r\\n        var walkPoint = function(startPoint, endPoint, handler, isSkipInnerOffset) {\\r\\n            var point = startPoint;\\r\\n\\r\\n            while (point) {\\r\\n                handler(point);\\r\\n\\r\\n                if (isSamePoint(point, endPoint)) {\\r\\n                    break;\\r\\n                }\\r\\n\\r\\n                var isSkipOffset = isSkipInnerOffset &&\\r\\n                    startPoint.node !== point.node &&\\r\\n                    endPoint.node !== point.node;\\r\\n                point = nextPoint(point, isSkipOffset);\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method makeOffsetPath\\r\\n         *\\r\\n         * return offsetPath(array of offset) from ancestor\\r\\n         *\\r\\n         * @param {Node} ancestor - ancestor node\\r\\n         * @param {Node} node\\r\\n         */\\r\\n        var makeOffsetPath = function(ancestor, node) {\\r\\n            var ancestors = listAncestor(node, func.eq(ancestor));\\r\\n            return $.map(ancestors, position).reverse();\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method fromOffsetPath\\r\\n         *\\r\\n         * return element from offsetPath(array of offset)\\r\\n         *\\r\\n         * @param {Node} ancestor - ancestor node\\r\\n         * @param {array} offsets - offsetPath\\r\\n         */\\r\\n        var fromOffsetPath = function(ancestor, offsets) {\\r\\n            var current = ancestor;\\r\\n            for (var i = 0, len = offsets.length; i < len; i++) {\\r\\n                if (current.childNodes.length <= offsets[i]) {\\r\\n                    current = current.childNodes[current.childNodes.length - 1];\\r\\n                } else {\\r\\n                    current = current.childNodes[offsets[i]];\\r\\n                }\\r\\n            }\\r\\n            return current;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method splitNode\\r\\n         *\\r\\n         * split element or #text\\r\\n         *\\r\\n         * @param {BoundaryPoint} point\\r\\n         * @param {Object} [options]\\r\\n         * @param {Boolean} [options.isSkipPaddingBlankHTML] - default: false\\r\\n         * @param {Boolean} [options.isNotSplitEdgePoint] - default: false\\r\\n         * @return {Node} right node of boundaryPoint\\r\\n         */\\r\\n        var splitNode = function(point, options) {\\r\\n            var isSkipPaddingBlankHTML = options && options.isSkipPaddingBlankHTML;\\r\\n            var isNotSplitEdgePoint = options && options.isNotSplitEdgePoint;\\r\\n\\r\\n            // edge case\\r\\n            if (isEdgePoint(point) && (isText(point.node) || isNotSplitEdgePoint)) {\\r\\n                if (isLeftEdgePoint(point)) {\\r\\n                    return point.node;\\r\\n                } else if (isRightEdgePoint(point)) {\\r\\n                    return point.node.nextSibling;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // split #text\\r\\n            if (isText(point.node)) {\\r\\n                return point.node.splitText(point.offset);\\r\\n            } else {\\r\\n                var childNode = point.node.childNodes[point.offset];\\r\\n                var clone = insertAfter(point.node.cloneNode(false), point.node);\\r\\n                appendChildNodes(clone, listNext(childNode));\\r\\n\\r\\n                if (!isSkipPaddingBlankHTML) {\\r\\n                    paddingBlankHTML(point.node);\\r\\n                    paddingBlankHTML(clone);\\r\\n                }\\r\\n\\r\\n                return clone;\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method splitTree\\r\\n         *\\r\\n         * split tree by point\\r\\n         *\\r\\n         * @param {Node} root - split root\\r\\n         * @param {BoundaryPoint} point\\r\\n         * @param {Object} [options]\\r\\n         * @param {Boolean} [options.isSkipPaddingBlankHTML] - default: false\\r\\n         * @param {Boolean} [options.isNotSplitEdgePoint] - default: false\\r\\n         * @return {Node} right node of boundaryPoint\\r\\n         */\\r\\n        var splitTree = function(root, point, options) {\\r\\n            // ex) [#text, <span>, <p>]\\r\\n            var ancestors = listAncestor(point.node, func.eq(root));\\r\\n\\r\\n            if (!ancestors.length) {\\r\\n                return null;\\r\\n            } else if (ancestors.length === 1) {\\r\\n                return splitNode(point, options);\\r\\n            }\\r\\n\\r\\n            return ancestors.reduce(function(node, parent) {\\r\\n                if (node === point.node) {\\r\\n                    node = splitNode(point, options);\\r\\n                }\\r\\n\\r\\n                return splitNode({\\r\\n                    node: parent,\\r\\n                    offset: node ? dom.position(node) : nodeLength(parent)\\r\\n                }, options);\\r\\n            });\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * split point\\r\\n         *\\r\\n         * @param {Point} point\\r\\n         * @param {Boolean} isInline\\r\\n         * @return {Object}\\r\\n         */\\r\\n        var splitPoint = function(point, isInline) {\\r\\n            // find splitRoot, container\\r\\n            //  - inline: splitRoot is a child of paragraph\\r\\n            //  - block: splitRoot is a child of bodyContainer\\r\\n            var pred = isInline ? isPara : isBodyContainer;\\r\\n            var ancestors = listAncestor(point.node, pred);\\r\\n            var topAncestor = list.last(ancestors) || point.node;\\r\\n\\r\\n            var splitRoot, container;\\r\\n            if (pred(topAncestor)) {\\r\\n                splitRoot = ancestors[ancestors.length - 2];\\r\\n                container = topAncestor;\\r\\n            } else {\\r\\n                splitRoot = topAncestor;\\r\\n                container = splitRoot.parentNode;\\r\\n            }\\r\\n\\r\\n            // if splitRoot is exists, split with splitTree\\r\\n            var pivot = splitRoot && splitTree(splitRoot, point, {\\r\\n                    isSkipPaddingBlankHTML: isInline,\\r\\n                    isNotSplitEdgePoint: isInline\\r\\n                });\\r\\n\\r\\n            // if container is point.node, find pivot with point.offset\\r\\n            if (!pivot && container === point.node) {\\r\\n                pivot = point.node.childNodes[point.offset];\\r\\n            }\\r\\n\\r\\n            return {\\r\\n                rightNode: pivot,\\r\\n                container: container\\r\\n            };\\r\\n        };\\r\\n\\r\\n        var create = function(nodeName) {\\r\\n            return document.createElement(nodeName);\\r\\n        };\\r\\n\\r\\n        var createText = function(text) {\\r\\n            return document.createTextNode(text);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method remove\\r\\n         *\\r\\n         * remove node, (isRemoveChild: remove child or not)\\r\\n         *\\r\\n         * @param {Node} node\\r\\n         * @param {Boolean} isRemoveChild\\r\\n         */\\r\\n        var remove = function(node, isRemoveChild) {\\r\\n            if (!node || !node.parentNode) { return; }\\r\\n            if (node.removeNode) { return node.removeNode(isRemoveChild); }\\r\\n\\r\\n            var parent = node.parentNode;\\r\\n            if (!isRemoveChild) {\\r\\n                var nodes = [];\\r\\n                var i, len;\\r\\n                for (i = 0, len = node.childNodes.length; i < len; i++) {\\r\\n                    nodes.push(node.childNodes[i]);\\r\\n                }\\r\\n\\r\\n                for (i = 0, len = nodes.length; i < len; i++) {\\r\\n                    parent.insertBefore(nodes[i], node);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            parent.removeChild(node);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method removeWhile\\r\\n         *\\r\\n         * @param {Node} node\\r\\n         * @param {Function} pred\\r\\n         */\\r\\n        var removeWhile = function(node, pred) {\\r\\n            while (node) {\\r\\n                if (isEditable(node) || !pred(node)) {\\r\\n                    break;\\r\\n                }\\r\\n\\r\\n                var parent = node.parentNode;\\r\\n                remove(node);\\r\\n                node = parent;\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method replace\\r\\n         *\\r\\n         * replace node with provided nodeName\\r\\n         *\\r\\n         * @param {Node} node\\r\\n         * @param {String} nodeName\\r\\n         * @return {Node} - new node\\r\\n         */\\r\\n        var replace = function(node, nodeName) {\\r\\n            if (node.nodeName.toUpperCase() === nodeName.toUpperCase()) {\\r\\n                return node;\\r\\n            }\\r\\n\\r\\n            var newNode = create(nodeName);\\r\\n\\r\\n            if (node.style.cssText) {\\r\\n                newNode.style.cssText = node.style.cssText;\\r\\n            }\\r\\n\\r\\n            appendChildNodes(newNode, list.from(node.childNodes));\\r\\n            insertAfter(newNode, node);\\r\\n            remove(node);\\r\\n\\r\\n            return newNode;\\r\\n        };\\r\\n\\r\\n        var isTextarea = makePredByNodeName('TEXTAREA');\\r\\n\\r\\n        /**\\r\\n         * @param {jQuery} $node\\r\\n         * @param {Boolean} [stripLinebreaks] - default: false\\r\\n         */\\r\\n        var value = function($node, stripLinebreaks) {\\r\\n            var val = isTextarea($node[0]) ? $node.val() : $node.html();\\r\\n            if (stripLinebreaks) {\\r\\n                return val.replace(/[\\\\n\\\\r]/g, '');\\r\\n            }\\r\\n            return val;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method html\\r\\n         *\\r\\n         * get the HTML contents of node\\r\\n         *\\r\\n         * @param {jQuery} $node\\r\\n         * @param {Boolean} [isNewlineOnBlock]\\r\\n         */\\r\\n        var html = function($node, isNewlineOnBlock) {\\r\\n            var markup = value($node);\\r\\n\\r\\n            if (isNewlineOnBlock) {\\r\\n                var regexTag = /<(\\\\/?)(\\\\b(?!!)[^>\\\\s]*)(.*?)(\\\\s*\\\\/?>)/g;\\r\\n                markup = markup.replace(regexTag, function(match, endSlash, name) {\\r\\n                    name = name.toUpperCase();\\r\\n                    var isEndOfInlineContainer = /^DIV|^TD|^TH|^P|^LI|^H[1-7]/.test(name) &&\\r\\n                        !!endSlash;\\r\\n                    var isBlockNode = /^BLOCKQUOTE|^TABLE|^TBODY|^TR|^HR|^UL|^OL/.test(name);\\r\\n\\r\\n                    return match + ((isEndOfInlineContainer || isBlockNode) ? '\\\\n' : '');\\r\\n                });\\r\\n                markup = $.trim(markup);\\r\\n            }\\r\\n\\r\\n            return markup;\\r\\n        };\\r\\n\\r\\n        return {\\r\\n            /** @property {String} NBSP_CHAR */\\r\\n            NBSP_CHAR: NBSP_CHAR,\\r\\n            /** @property {String} ZERO_WIDTH_NBSP_CHAR */\\r\\n            ZERO_WIDTH_NBSP_CHAR: ZERO_WIDTH_NBSP_CHAR,\\r\\n            /** @property {String} blank */\\r\\n            blank: blankHTML,\\r\\n            /** @property {String} emptyPara */\\r\\n            emptyPara: '<p>' + blankHTML + '<\\/p>',\\r\\n            makePredByNodeName: makePredByNodeName,\\r\\n            isEditable: isEditable,\\r\\n            isControlSizing: isControlSizing,\\r\\n            buildLayoutInfo: buildLayoutInfo,\\r\\n            makeLayoutInfo: makeLayoutInfo,\\r\\n            isText: isText,\\r\\n            isVoid: isVoid,\\r\\n            isPara: isPara,\\r\\n            isPurePara: isPurePara,\\r\\n            isInline: isInline,\\r\\n            isBlock: func.not(isInline),\\r\\n            isBodyInline: isBodyInline,\\r\\n            isBody: isBody,\\r\\n            isParaInline: isParaInline,\\r\\n            isList: isList,\\r\\n            isTable: isTable,\\r\\n            isCell: isCell,\\r\\n            isBlockquote: isBlockquote,\\r\\n            isBodyContainer: isBodyContainer,\\r\\n            isAnchor: isAnchor,\\r\\n            isDiv: makePredByNodeName('DIV'),\\r\\n            isLi: isLi,\\r\\n            isBR: makePredByNodeName('BR'),\\r\\n            isSpan: makePredByNodeName('SPAN'),\\r\\n            isB: makePredByNodeName('B'),\\r\\n            isU: makePredByNodeName('U'),\\r\\n            isS: makePredByNodeName('S'),\\r\\n            isI: makePredByNodeName('I'),\\r\\n            isImg: makePredByNodeName('IMG'),\\r\\n            isTextarea: isTextarea,\\r\\n            isEmpty: isEmpty,\\r\\n            isEmptyAnchor: func.and(isAnchor, isEmpty),\\r\\n            isClosestSibling: isClosestSibling,\\r\\n            withClosestSiblings: withClosestSiblings,\\r\\n            nodeLength: nodeLength,\\r\\n            isLeftEdgePoint: isLeftEdgePoint,\\r\\n            isRightEdgePoint: isRightEdgePoint,\\r\\n            isEdgePoint: isEdgePoint,\\r\\n            isLeftEdgeOf: isLeftEdgeOf,\\r\\n            isRightEdgeOf: isRightEdgeOf,\\r\\n            prevPoint: prevPoint,\\r\\n            nextPoint: nextPoint,\\r\\n            isSamePoint: isSamePoint,\\r\\n            isVisiblePoint: isVisiblePoint,\\r\\n            prevPointUntil: prevPointUntil,\\r\\n            nextPointUntil: nextPointUntil,\\r\\n            isCharPoint: isCharPoint,\\r\\n            walkPoint: walkPoint,\\r\\n            ancestor: ancestor,\\r\\n            singleChildAncestor: singleChildAncestor,\\r\\n            listAncestor: listAncestor,\\r\\n            lastAncestor: lastAncestor,\\r\\n            listNext: listNext,\\r\\n            listPrev: listPrev,\\r\\n            listDescendant: listDescendant,\\r\\n            commonAncestor: commonAncestor,\\r\\n            wrap: wrap,\\r\\n            insertAfter: insertAfter,\\r\\n            appendChildNodes: appendChildNodes,\\r\\n            position: position,\\r\\n            hasChildren: hasChildren,\\r\\n            makeOffsetPath: makeOffsetPath,\\r\\n            fromOffsetPath: fromOffsetPath,\\r\\n            splitTree: splitTree,\\r\\n            splitPoint: splitPoint,\\r\\n            create: create,\\r\\n            createText: createText,\\r\\n            remove: remove,\\r\\n            removeWhile: removeWhile,\\r\\n            replace: replace,\\r\\n            html: html,\\r\\n            value: value\\r\\n        };\\r\\n    })();\\r\\n\\r\\n\\r\\n    var range = (function() {\\r\\n\\r\\n        /**\\r\\n         * return boundaryPoint from TextRange, inspired by Andy Na's HuskyRange.js\\r\\n         *\\r\\n         * @param {TextRange} textRange\\r\\n         * @param {Boolean} isStart\\r\\n         * @return {BoundaryPoint}\\r\\n         *\\r\\n         * @see http://msdn.microsoft.com/en-us/library/ie/ms535872(v=vs.85).aspx\\r\\n         */\\r\\n        var textRangeToPoint = function(textRange, isStart) {\\r\\n            var container = textRange.parentElement(), offset;\\r\\n\\r\\n            var tester = document.body.createTextRange(), prevContainer;\\r\\n            var childNodes = list.from(container.childNodes);\\r\\n            for (offset = 0; offset < childNodes.length; offset++) {\\r\\n                if (dom.isText(childNodes[offset])) {\\r\\n                    continue;\\r\\n                }\\r\\n                tester.moveToElementText(childNodes[offset]);\\r\\n                if (tester.compareEndPoints('StartToStart', textRange) >= 0) {\\r\\n                    break;\\r\\n                }\\r\\n                prevContainer = childNodes[offset];\\r\\n            }\\r\\n\\r\\n            if (offset !== 0 && dom.isText(childNodes[offset - 1])) {\\r\\n                var textRangeStart = document.body.createTextRange(), curTextNode = null;\\r\\n                textRangeStart.moveToElementText(prevContainer || container);\\r\\n                textRangeStart.collapse(!prevContainer);\\r\\n                curTextNode = prevContainer ? prevContainer.nextSibling : container.firstChild;\\r\\n\\r\\n                var pointTester = textRange.duplicate();\\r\\n                pointTester.setEndPoint('StartToStart', textRangeStart);\\r\\n                var textCount = pointTester.text.replace(/[\\\\r\\\\n]/g, '').length;\\r\\n\\r\\n                while (textCount > curTextNode.nodeValue.length && curTextNode.nextSibling) {\\r\\n                    textCount -= curTextNode.nodeValue.length;\\r\\n                    curTextNode = curTextNode.nextSibling;\\r\\n                }\\r\\n\\r\\n                /* jshint ignore:start */\\r\\n                var dummy = curTextNode.nodeValue; // enforce IE to re-reference curTextNode, hack\\r\\n                /* jshint ignore:end */\\r\\n\\r\\n                if (isStart && curTextN\";\n  builder.string += \"ode.nextSibling && dom.isText(curTextNode.nextSibling) &&\\r\\n                    textCount === curTextNode.nodeValue.length) {\\r\\n                    textCount -= curTextNode.nodeValue.length;\\r\\n                    curTextNode = curTextNode.nextSibling;\\r\\n                }\\r\\n\\r\\n                container = curTextNode;\\r\\n                offset = textCount;\\r\\n            }\\r\\n\\r\\n            return {\\r\\n                cont: container,\\r\\n                offset: offset\\r\\n            };\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * return TextRange from boundary point (inspired by google closure-library)\\r\\n         * @param {BoundaryPoint} point\\r\\n         * @return {TextRange}\\r\\n         */\\r\\n        var pointToTextRange = function(point) {\\r\\n            var textRangeInfo = function(container, offset) {\\r\\n                var node, isCollapseToStart;\\r\\n\\r\\n                if (dom.isText(container)) {\\r\\n                    var prevTextNodes = dom.listPrev(container, func.not(dom.isText));\\r\\n                    var prevContainer = list.last(prevTextNodes).previousSibling;\\r\\n                    node =  prevContainer || container.parentNode;\\r\\n                    offset += list.sum(list.tail(prevTextNodes), dom.nodeLength);\\r\\n                    isCollapseToStart = !prevContainer;\\r\\n                } else {\\r\\n                    node = container.childNodes[offset] || container;\\r\\n                    if (dom.isText(node)) {\\r\\n                        return textRangeInfo(node, 0);\\r\\n                    }\\r\\n\\r\\n                    offset = 0;\\r\\n                    isCollapseToStart = false;\\r\\n                }\\r\\n\\r\\n                return {\\r\\n                    node: node,\\r\\n                    collapseToStart: isCollapseToStart,\\r\\n                    offset: offset\\r\\n                };\\r\\n            };\\r\\n\\r\\n            var textRange = document.body.createTextRange();\\r\\n            var info = textRangeInfo(point.node, point.offset);\\r\\n\\r\\n            textRange.moveToElementText(info.node);\\r\\n            textRange.collapse(info.collapseToStart);\\r\\n            textRange.moveStart('character', info.offset);\\r\\n            return textRange;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * Wrapped Range\\r\\n         *\\r\\n         * @constructor\\r\\n         * @param {Node} sc - start container\\r\\n         * @param {Number} so - start offset\\r\\n         * @param {Node} ec - end container\\r\\n         * @param {Number} eo - end offset\\r\\n         */\\r\\n        var WrappedRange = function(sc, so, ec, eo) {\\r\\n            this.sc = sc;\\r\\n            this.so = so;\\r\\n            this.ec = ec;\\r\\n            this.eo = eo;\\r\\n\\r\\n            // nativeRange: get nativeRange from sc, so, ec, eo\\r\\n            var nativeRange = function() {\\r\\n                if (agent.isW3CRangeSupport) {\\r\\n                    var w3cRange = document.createRange();\\r\\n                    w3cRange.setStart(sc, so);\\r\\n                    w3cRange.setEnd(ec, eo);\\r\\n\\r\\n                    return w3cRange;\\r\\n                } else {\\r\\n                    var textRange = pointToTextRange({\\r\\n                        node: sc,\\r\\n                        offset: so\\r\\n                    });\\r\\n\\r\\n                    textRange.setEndPoint('EndToEnd', pointToTextRange({\\r\\n                        node: ec,\\r\\n                        offset: eo\\r\\n                    }));\\r\\n\\r\\n                    return textRange;\\r\\n                }\\r\\n            };\\r\\n\\r\\n            this.getPoints = function() {\\r\\n                return {\\r\\n                    sc: sc,\\r\\n                    so: so,\\r\\n                    ec: ec,\\r\\n                    eo: eo\\r\\n                };\\r\\n            };\\r\\n\\r\\n            this.getStartPoint = function() {\\r\\n                return {\\r\\n                    node: sc,\\r\\n                    offset: so\\r\\n                };\\r\\n            };\\r\\n\\r\\n            this.getEndPoint = function() {\\r\\n                return {\\r\\n                    node: ec,\\r\\n                    offset: eo\\r\\n                };\\r\\n            };\\r\\n\\r\\n            /**\\r\\n             * select update visible range\\r\\n             */\\r\\n            this.select = function() {\\r\\n                var nativeRng = nativeRange();\\r\\n                if (agent.isW3CRangeSupport) {\\r\\n                    var selection = document.getSelection();\\r\\n                    if (selection.rangeCount > 0) {\\r\\n                        selection.removeAllRanges();\\r\\n                    }\\r\\n                    selection.addRange(nativeRng);\\r\\n                } else {\\r\\n                    nativeRng.select();\\r\\n                }\\r\\n\\r\\n                return this;\\r\\n            };\\r\\n\\r\\n            /**\\r\\n             * @return {WrappedRange}\\r\\n             */\\r\\n            this.normalize = function() {\\r\\n\\r\\n                /**\\r\\n                 * @param {BoundaryPoint} point\\r\\n                 * @return {BoundaryPoint}\\r\\n                 */\\r\\n                var getVisiblePoint = function(point) {\\r\\n                    if (!dom.isVisiblePoint(point)) {\\r\\n                        if (dom.isLeftEdgePoint(point)) {\\r\\n                            point = dom.nextPointUntil(point, dom.isVisiblePoint);\\r\\n                        } else {\\r\\n                            point = dom.prevPointUntil(point, dom.isVisiblePoint);\\r\\n                        }\\r\\n                    }\\r\\n                    return point;\\r\\n                };\\r\\n\\r\\n                var startPoint = getVisiblePoint(this.getStartPoint());\\r\\n                var endPoint = getVisiblePoint(this.getEndPoint());\\r\\n\\r\\n                return new WrappedRange(\\r\\n                    startPoint.node,\\r\\n                    startPoint.offset,\\r\\n                    endPoint.node,\\r\\n                    endPoint.offset\\r\\n                );\\r\\n            };\\r\\n\\r\\n            /**\\r\\n             * returns matched nodes on range\\r\\n             *\\r\\n             * @param {Function} [pred] - predicate function\\r\\n             * @param {Object} [options]\\r\\n             * @param {Boolean} [options.includeAncestor]\\r\\n             * @param {Boolean} [options.fullyContains]\\r\\n             * @return {Node[]}\\r\\n             */\\r\\n            this.nodes = function(pred, options) {\\r\\n                pred = pred || func.ok;\\r\\n\\r\\n                var includeAncestor = options && options.includeAncestor;\\r\\n                var fullyContains = options && options.fullyContains;\\r\\n\\r\\n                // TODO compare points and sort\\r\\n                var startPoint = this.getStartPoint();\\r\\n                var endPoint = this.getEndPoint();\\r\\n\\r\\n                var nodes = [];\\r\\n                var leftEdgeNodes = [];\\r\\n\\r\\n                dom.walkPoint(startPoint, endPoint, function(point) {\\r\\n                    if (dom.isEditable(point.node)) {\\r\\n                        return;\\r\\n                    }\\r\\n\\r\\n                    var node;\\r\\n                    if (fullyContains) {\\r\\n                        if (dom.isLeftEdgePoint(point)) {\\r\\n                            leftEdgeNodes.push(point.node);\\r\\n                        }\\r\\n                        if (dom.isRightEdgePoint(point) && list.contains(leftEdgeNodes, point.node)) {\\r\\n                            node = point.node;\\r\\n                        }\\r\\n                    } else if (includeAncestor) {\\r\\n                        node = dom.ancestor(point.node, pred);\\r\\n                    } else {\\r\\n                        node = point.node;\\r\\n                    }\\r\\n\\r\\n                    if (node && pred(node)) {\\r\\n                        nodes.push(node);\\r\\n                    }\\r\\n                }, true);\\r\\n\\r\\n                return list.unique(nodes);\\r\\n            };\\r\\n\\r\\n            /**\\r\\n             * returns commonAncestor of range\\r\\n             * @return {Element} - commonAncestor\\r\\n             */\\r\\n            this.commonAncestor = function() {\\r\\n                return dom.commonAncestor(sc, ec);\\r\\n            };\\r\\n\\r\\n            /**\\r\\n             * returns expanded range by pred\\r\\n             *\\r\\n             * @param {Function} pred - predicate function\\r\\n             * @return {WrappedRange}\\r\\n             */\\r\\n            this.expand = function(pred) {\\r\\n                var startAncestor = dom.ancestor(sc, pred);\\r\\n                var endAncestor = dom.ancestor(ec, pred);\\r\\n\\r\\n                if (!startAncestor && !endAncestor) {\\r\\n                    return new WrappedRange(sc, so, ec, eo);\\r\\n                }\\r\\n\\r\\n                var boundaryPoints = this.getPoints();\\r\\n\\r\\n                if (startAncestor) {\\r\\n                    boundaryPoints.sc = startAncestor;\\r\\n                    boundaryPoints.so = 0;\\r\\n                }\\r\\n\\r\\n                if (endAncestor) {\\r\\n                    boundaryPoints.ec = endAncestor;\\r\\n                    boundaryPoints.eo = dom.nodeLength(endAncestor);\\r\\n                }\\r\\n\\r\\n                return new WrappedRange(\\r\\n                    boundaryPoints.sc,\\r\\n                    boundaryPoints.so,\\r\\n                    boundaryPoints.ec,\\r\\n                    boundaryPoints.eo\\r\\n                );\\r\\n            };\\r\\n\\r\\n            /**\\r\\n             * @param {Boolean} isCollapseToStart\\r\\n             * @return {WrappedRange}\\r\\n             */\\r\\n            this.collapse = function(isCollapseToStart) {\\r\\n                if (isCollapseToStart) {\\r\\n                    return new WrappedRange(sc, so, sc, so);\\r\\n                } else {\\r\\n                    return new WrappedRange(ec, eo, ec, eo);\\r\\n                }\\r\\n            };\\r\\n\\r\\n            /**\\r\\n             * splitText on range\\r\\n             */\\r\\n            this.splitText = function() {\\r\\n                var isSameContainer = sc === ec;\\r\\n                var boundaryPoints = this.getPoints();\\r\\n\\r\\n                if (dom.isText(ec) && !dom.isEdgePoint(this.getEndPoint())) {\\r\\n                    ec.splitText(eo);\\r\\n                }\\r\\n\\r\\n                if (dom.isText(sc) && !dom.isEdgePoint(this.getStartPoint())) {\\r\\n                    boundaryPoints.sc = sc.splitText(so);\\r\\n                    boundaryPoints.so = 0;\\r\\n\\r\\n                    if (isSameContainer) {\\r\\n                        boundaryPoints.ec = boundaryPoints.sc;\\r\\n                        boundaryPoints.eo = eo - so;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                return new WrappedRange(\\r\\n                    boundaryPoints.sc,\\r\\n                    boundaryPoints.so,\\r\\n                    boundaryPoints.ec,\\r\\n                    boundaryPoints.eo\\r\\n                );\\r\\n            };\\r\\n\\r\\n            /**\\r\\n             * delete contents on range\\r\\n             * @return {WrappedRange}\\r\\n             */\\r\\n            this.deleteContents = function() {\\r\\n                if (this.isCollapsed()) {\\r\\n                    return this;\\r\\n                }\\r\\n\\r\\n                var rng = this.splitText();\\r\\n                var nodes = rng.nodes(null, {\\r\\n                    fullyContains: true\\r\\n                });\\r\\n\\r\\n                // find new cursor point\\r\\n                var point = dom.prevPointUntil(rng.getStartPoint(), function(point) {\\r\\n                    return !list.contains(nodes, point.node);\\r\\n                });\\r\\n\\r\\n                var emptyParents = [];\\r\\n                $.each(nodes, function(idx, node) {\\r\\n                    // find empty parents\\r\\n                    var parent = node.parentNode;\\r\\n                    if (point.node !== parent && dom.nodeLength(parent) === 1) {\\r\\n                        emptyParents.push(parent);\\r\\n                    }\\r\\n                    dom.remove(node, false);\\r\\n                });\\r\\n\\r\\n                // remove empty parents\\r\\n                $.each(emptyParents, function(idx, node) {\\r\\n                    dom.remove(node, false);\\r\\n                });\\r\\n\\r\\n                return new WrappedRange(\\r\\n                    point.node,\\r\\n                    point.offset,\\r\\n                    point.node,\\r\\n                    point.offset\\r\\n                ).normalize();\\r\\n            };\\r\\n\\r\\n            /**\\r\\n             * makeIsOn: return isOn(pred) function\\r\\n             */\\r\\n            var makeIsOn = function(pred) {\\r\\n                return function() {\\r\\n                    var ancestor = dom.ancestor(sc, pred);\\r\\n                    return !!ancestor && (ancestor === dom.ancestor(ec, pred));\\r\\n                };\\r\\n            };\\r\\n\\r\\n            // isOnEditable: judge whether range is on editable or not\\r\\n            this.isOnEditable = makeIsOn(dom.isEditable);\\r\\n            // isOnList: judge whether range is on list node or not\\r\\n            this.isOnList = makeIsOn(dom.isList);\\r\\n            // isOnAnchor: judge whether range is on anchor node or not\\r\\n            this.isOnAnchor = makeIsOn(dom.isAnchor);\\r\\n            // isOnAnchor: judge whether range is on cell node or not\\r\\n            this.isOnCell = makeIsOn(dom.isCell);\\r\\n\\r\\n            /**\\r\\n             * @param {Function} pred\\r\\n             * @return {Boolean}\\r\\n             */\\r\\n            this.isLeftEdgeOf = function(pred) {\\r\\n                if (!dom.isLeftEdgePoint(this.getStartPoint())) {\\r\\n                    return false;\\r\\n                }\\r\\n\\r\\n                var node = dom.ancestor(this.sc, pred);\\r\\n                return node && dom.isLeftEdgeOf(this.sc, node);\\r\\n            };\\r\\n\\r\\n            /**\\r\\n             * returns whether range was collapsed or not\\r\\n             */\\r\\n            this.isCollapsed = function() {\\r\\n                return sc === ec && so === eo;\\r\\n            };\\r\\n\\r\\n            /**\\r\\n             * wrap inline nodes which children of body with paragraph\\r\\n             *\\r\\n             * @return {WrappedRange}\\r\\n             */\\r\\n            this.wrapBodyInlineWithPara = function() {\\r\\n                if (dom.isBodyContainer(sc) && dom.isEmpty(sc)) {\\r\\n                    sc.innerHTML = dom.emptyPara;\\r\\n                    return new WrappedRange(sc.firstChild, 0, sc.firstChild, 0);\\r\\n                }\\r\\n\\r\\n                if (dom.isParaInline(sc) || dom.isPara(sc)) {\\r\\n                    return this.normalize();\\r\\n                }\\r\\n\\r\\n                // find inline top ancestor\\r\\n                var topAncestor;\\r\\n                if (dom.isInline(sc)) {\\r\\n                    var ancestors = dom.listAncestor(sc, func.not(dom.isInline));\\r\\n                    topAncestor = list.last(ancestors);\\r\\n                    if (!dom.isInline(topAncestor)) {\\r\\n                        topAncestor = ancestors[ancestors.length - 2] || sc.childNodes[so];\\r\\n                    }\\r\\n                } else {\\r\\n                    topAncestor = sc.childNodes[so > 0 ? so - 1 : 0];\\r\\n                }\\r\\n\\r\\n                // siblings not in paragraph\\r\\n                var inlineSiblings = dom.listPrev(topAncestor, dom.isParaInline).reverse();\\r\\n                inlineSiblings = inlineSiblings.concat(dom.listNext(topAncestor.nextSibling, dom.isParaInline));\\r\\n\\r\\n                // wrap with paragraph\\r\\n                if (inlineSiblings.length) {\\r\\n                    var para = dom.wrap(list.head(inlineSiblings), 'p');\\r\\n                    dom.appendChildNodes(para, list.tail(inlineSiblings));\\r\\n                }\\r\\n\\r\\n                return this.normalize();\\r\\n            };\\r\\n\\r\\n            /**\\r\\n             * insert node at current cursor\\r\\n             *\\r\\n             * @param {Node} node\\r\\n             * @return {Node}\\r\\n             */\\r\\n            this.insertNode = function(node) {\\r\\n                var rng = this.wrapBodyInlineWithPara().deleteContents();\\r\\n                var info = dom.splitPoint(rng.getStartPoint(), dom.isInline(node));\\r\\n\\r\\n                if (info.rightNode) {\\r\\n                    info.rightNode.parentNode.insertBefore(node, info.rightNode);\\r\\n                } else {\\r\\n                    info.container.appendChild(node);\\r\\n                }\\r\\n\\r\\n                return node;\\r\\n            };\\r\\n\\r\\n\\r\\n            /**\\r\\n             * insert html at current cursor\\r\\n             */\\r\\n            this.pasteHTML = function(markup) {\\r\\n                var self = this;\\r\\n                var contentsContainer = $('<div><\\/div>').html(markup)[0];\\r\\n                var childNodes = list.from(contentsContainer.childNodes);\\r\\n\\r\\n                this.wrapBodyInlineWithPara().deleteContents();\\r\\n\\r\\n                return $.map(childNodes.reverse(), function(childNode) {\\r\\n                    return self.insertNode(childNode);\\r\\n                }).reverse();\\r\\n            };\\r\\n\\r\\n            /**\\r\\n             * returns text in range\\r\\n             *\\r\\n             * @return {String}\\r\\n             */\\r\\n            this.toString = function() {\\r\\n                var nativeRng = nativeRange();\\r\\n                return agent.isW3CRangeSupport ? nativeRng.toString() : nativeRng.text;\\r\\n            };\\r\\n\\r\\n            /**\\r\\n             * ret\";\n  builder.string += \"urns range for word before cursor\\r\\n             *\\r\\n             * @param {Boolean} [findAfter] - find after cursor, default: false\\r\\n             * @return {WrappedRange}\\r\\n             */\\r\\n            this.getWordRange = function(findAfter) {\\r\\n                var endPoint = this.getEndPoint();\\r\\n\\r\\n                if (!dom.isCharPoint(endPoint)) {\\r\\n                    return this;\\r\\n                }\\r\\n\\r\\n                var startPoint = dom.prevPointUntil(endPoint, function(point) {\\r\\n                    return !dom.isCharPoint(point);\\r\\n                });\\r\\n\\r\\n                if (findAfter) {\\r\\n                    endPoint = dom.nextPointUntil(endPoint, function(point) {\\r\\n                        return !dom.isCharPoint(point);\\r\\n                    });\\r\\n                }\\r\\n\\r\\n                return new WrappedRange(\\r\\n                    startPoint.node,\\r\\n                    startPoint.offset,\\r\\n                    endPoint.node,\\r\\n                    endPoint.offset\\r\\n                );\\r\\n            };\\r\\n\\r\\n            /**\\r\\n             * create offsetPath bookmark\\r\\n             *\\r\\n             * @param {Node} editable\\r\\n             */\\r\\n            this.bookmark = function(editable) {\\r\\n                return {\\r\\n                    s: {\\r\\n                        path: dom.makeOffsetPath(editable, sc),\\r\\n                        offset: so\\r\\n                    },\\r\\n                    e: {\\r\\n                        path: dom.makeOffsetPath(editable, ec),\\r\\n                        offset: eo\\r\\n                    }\\r\\n                };\\r\\n            };\\r\\n\\r\\n            /**\\r\\n             * create offsetPath bookmark base on paragraph\\r\\n             *\\r\\n             * @param {Node[]} paras\\r\\n             */\\r\\n            this.paraBookmark = function(paras) {\\r\\n                return {\\r\\n                    s: {\\r\\n                        path: list.tail(dom.makeOffsetPath(list.head(paras), sc)),\\r\\n                        offset: so\\r\\n                    },\\r\\n                    e: {\\r\\n                        path: list.tail(dom.makeOffsetPath(list.last(paras), ec)),\\r\\n                        offset: eo\\r\\n                    }\\r\\n                };\\r\\n            };\\r\\n\\r\\n            /**\\r\\n             * getClientRects\\r\\n             * @return {Rect[]}\\r\\n             */\\r\\n            this.getClientRects = function() {\\r\\n                var nativeRng = nativeRange();\\r\\n                return nativeRng.getClientRects();\\r\\n            };\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @class core.range\\r\\n         *\\r\\n         * Data structure\\r\\n         *  * BoundaryPoint: a point of dom tree\\r\\n         *  * BoundaryPoints: two boundaryPoints corresponding to the start and the end of the Range\\r\\n         *\\r\\n         * See to http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-Position\\r\\n         *\\r\\n         * @singleton\\r\\n         * @alternateClassName range\\r\\n         */\\r\\n        return {\\r\\n            /**\\r\\n             * @method\\r\\n             *\\r\\n             * create Range Object From arguments or Browser Selection\\r\\n             *\\r\\n             * @param {Node} sc - start container\\r\\n             * @param {Number} so - start offset\\r\\n             * @param {Node} ec - end container\\r\\n             * @param {Number} eo - end offset\\r\\n             * @return {WrappedRange}\\r\\n             */\\r\\n            create : function(sc, so, ec, eo) {\\r\\n                if (!arguments.length) { // from Browser Selection\\r\\n                    if (agent.isW3CRangeSupport) {\\r\\n                        var selection = document.getSelection();\\r\\n                        if (!selection || selection.rangeCount === 0) {\\r\\n                            return null;\\r\\n                        } else if (dom.isBody(selection.anchorNode)) {\\r\\n                            // Firefox: returns entire body as range on initialization. We won't never need it.\\r\\n                            return null;\\r\\n                        }\\r\\n\\r\\n                        var nativeRng = selection.getRangeAt(0);\\r\\n                        sc = nativeRng.startContainer;\\r\\n                        so = nativeRng.startOffset;\\r\\n                        ec = nativeRng.endContainer;\\r\\n                        eo = nativeRng.endOffset;\\r\\n                    } else { // IE8: TextRange\\r\\n                        var textRange = document.selection.createRange();\\r\\n                        var textRangeEnd = textRange.duplicate();\\r\\n                        textRangeEnd.collapse(false);\\r\\n                        var textRangeStart = textRange;\\r\\n                        textRangeStart.collapse(true);\\r\\n\\r\\n                        var startPoint = textRangeToPoint(textRangeStart, true),\\r\\n                            endPoint = textRangeToPoint(textRangeEnd, false);\\r\\n\\r\\n                        // same visible point case: range was collapsed.\\r\\n                        if (dom.isText(startPoint.node) && dom.isLeftEdgePoint(startPoint) &&\\r\\n                            dom.isTextNode(endPoint.node) && dom.isRightEdgePoint(endPoint) &&\\r\\n                            endPoint.node.nextSibling === startPoint.node) {\\r\\n                            startPoint = endPoint;\\r\\n                        }\\r\\n\\r\\n                        sc = startPoint.cont;\\r\\n                        so = startPoint.offset;\\r\\n                        ec = endPoint.cont;\\r\\n                        eo = endPoint.offset;\\r\\n                    }\\r\\n                } else if (arguments.length === 2) { //collapsed\\r\\n                    ec = sc;\\r\\n                    eo = so;\\r\\n                }\\r\\n                return new WrappedRange(sc, so, ec, eo);\\r\\n            },\\r\\n\\r\\n            /**\\r\\n             * @method\\r\\n             *\\r\\n             * create WrappedRange from node\\r\\n             *\\r\\n             * @param {Node} node\\r\\n             * @return {WrappedRange}\\r\\n             */\\r\\n            createFromNode: function(node) {\\r\\n                var sc = node;\\r\\n                var so = 0;\\r\\n                var ec = node;\\r\\n                var eo = dom.nodeLength(ec);\\r\\n\\r\\n                // browsers can't target a picture or void node\\r\\n                if (dom.isVoid(sc)) {\\r\\n                    so = dom.listPrev(sc).length - 1;\\r\\n                    sc = sc.parentNode;\\r\\n                }\\r\\n                if (dom.isBR(ec)) {\\r\\n                    eo = dom.listPrev(ec).length - 1;\\r\\n                    ec = ec.parentNode;\\r\\n                } else if (dom.isVoid(ec)) {\\r\\n                    eo = dom.listPrev(ec).length;\\r\\n                    ec = ec.parentNode;\\r\\n                }\\r\\n\\r\\n                return this.create(sc, so, ec, eo);\\r\\n            },\\r\\n\\r\\n            /**\\r\\n             * create WrappedRange from node after position\\r\\n             *\\r\\n             * @param {Node} node\\r\\n             * @return {WrappedRange}\\r\\n             */\\r\\n            createFromNodeBefore: function(node) {\\r\\n                return this.createFromNode(node).collapse(true);\\r\\n            },\\r\\n\\r\\n            /**\\r\\n             * create WrappedRange from node after position\\r\\n             *\\r\\n             * @param {Node} node\\r\\n             * @return {WrappedRange}\\r\\n             */\\r\\n            createFromNodeAfter: function(node) {\\r\\n                return this.createFromNode(node).collapse();\\r\\n            },\\r\\n\\r\\n            /**\\r\\n             * @method\\r\\n             *\\r\\n             * create WrappedRange from bookmark\\r\\n             *\\r\\n             * @param {Node} editable\\r\\n             * @param {Object} bookmark\\r\\n             * @return {WrappedRange}\\r\\n             */\\r\\n            createFromBookmark : function(editable, bookmark) {\\r\\n                var sc = dom.fromOffsetPath(editable, bookmark.s.path);\\r\\n                var so = bookmark.s.offset;\\r\\n                var ec = dom.fromOffsetPath(editable, bookmark.e.path);\\r\\n                var eo = bookmark.e.offset;\\r\\n                return new WrappedRange(sc, so, ec, eo);\\r\\n            },\\r\\n\\r\\n            /**\\r\\n             * @method\\r\\n             *\\r\\n             * create WrappedRange from paraBookmark\\r\\n             *\\r\\n             * @param {Object} bookmark\\r\\n             * @param {Node[]} paras\\r\\n             * @return {WrappedRange}\\r\\n             */\\r\\n            createFromParaBookmark: function(bookmark, paras) {\\r\\n                var so = bookmark.s.offset;\\r\\n                var eo = bookmark.e.offset;\\r\\n                var sc = dom.fromOffsetPath(list.head(paras), bookmark.s.path);\\r\\n                var ec = dom.fromOffsetPath(list.last(paras), bookmark.e.path);\\r\\n\\r\\n                return new WrappedRange(sc, so, ec, eo);\\r\\n            }\\r\\n        };\\r\\n    })();\\r\\n\\r\\n    /**\\r\\n     * @class defaults\\r\\n     * @singleton\\r\\n     */\\r\\n    // >>>>>>> CK\\r\\n    var defaults = {\\r\\n        /** @property */\\r\\n        version: '0.6.9',\\r\\n\\r\\n        /**\\r\\n         * for event options, reference to EventHandler.attach\\r\\n         * @property {Object} options\\r\\n         * @property {String/Number} [options.width=null] set editor width\\r\\n         * @property {String/Number} [options.height=null] set editor height, ex) 300\\r\\n         * @property {String/Number} options.minHeight set minimum height of editor\\r\\n         * @property {String/Number} options.maxHeight\\r\\n         * @property {String/Number} options.focus\\r\\n         * @property {Number} options.tabsize\\r\\n         * @property {Boolean} options.styleWithSpan\\r\\n         * @property {Object} options.codemirror\\r\\n         * @property {Object} [options.codemirror.mode='text/html']\\r\\n         * @property {Object} [options.codemirror.htmlMode=true]\\r\\n         * @property {Object} [options.codemirror.lineNumbers=true]\\r\\n         * @property {String} [options.lang=en-US] language 'en-US', 'ko-KR', ...\\r\\n         * @property {String} [options.direction=null] text direction, ex) 'rtl'\\r\\n         * @property {Array} [options.toolbar]\\r\\n         * @property {Boolean} [options.airMode=false]\\r\\n         * @property {Array} [options.airPopover]\\r\\n         * @property {Fucntion} [options.onInit] initialize\\r\\n         * @property {Fucntion} [options.onsubmit]\\r\\n         */\\r\\n        options: {\\r\\n            // >>>>>>> CK extra options\\r\\n            defaultTextColor: '#212121',       // default text color (used by color tool)\\r\\n            defaultBackColor: '#ddd',          // default text color (used by color tool)\\r\\n            followingToolbar: true,            // make the toolbar follow on window scroll\\r\\n            otherStaticBarClass: \\\"staticTop\\\",  // default class for other static bars eventually used on webapp\\r\\n\\r\\n            width: null,                  // set editor width\\r\\n            height: null,                 // set editor height, ex) 300\\r\\n\\r\\n            minHeight: null,              // set minimum height of editor\\r\\n            maxHeight: null,              // set maximum height of editor\\r\\n\\r\\n            focus: false,                 // set focus to editable area after initializing materialnote\\r\\n\\r\\n            tabsize: 4,                   // size of tab ex) 2 or 4\\r\\n            styleWithSpan: true,          // style with span (Chrome and FF only)\\r\\n\\r\\n            disableLinkTarget: false,     // hide link Target Checkbox\\r\\n            disableDragAndDrop: false,    // disable drag and drop event\\r\\n            disableResizeEditor: false,   // disable resizing editor\\r\\n\\r\\n            shortcuts: true,              // enable keyboard shortcuts\\r\\n\\r\\n            placeholder: false,           // enable placeholder text\\r\\n            prettifyHtml: true,           // enable prettifying html while toggling codeview\\r\\n\\r\\n            iconPrefix: '',               // prefix for css icon classes\\r\\n            icons: {\\r\\n                font: {\\r\\n                    bold: 'format_bold',\\r\\n                    italic: 'format_italic',\\r\\n                    underline: 'format_underlined',\\r\\n                    clear: 'clear',\\r\\n                    height: 'format_size',\\r\\n                    strikethrough: 'strikethrough_s',\\r\\n                    superscript: 'vertical_align_top',\\r\\n                    subscript: 'vertical_align_bottom'\\r\\n                },\\r\\n                image: {\\r\\n                    image: 'image',\\r\\n                    floatLeft: 'format_align_left',\\r\\n                    floatRight: 'format_align_right',\\r\\n                    floatNone: 'format_align_justify',\\r\\n                    shapeRounded: 'crop_3_2',\\r\\n                    shapeCircle: 'panorama_fish_eye',\\r\\n                    shapeThumbnail: 'collections',\\r\\n                    bordered: 'border_outer',\\r\\n                    shapeNone: 'image',\\r\\n                    remove: 'delete'\\r\\n                },\\r\\n                link: {\\r\\n                    link: 'insert_link',\\r\\n                    unlink: 'clear',\\r\\n                    edit: 'create'\\r\\n                },\\r\\n                table: {\\r\\n                    table: 'border_all'\\r\\n                },\\r\\n                hr: {\\r\\n                    insert: 'add'\\r\\n                },\\r\\n                style: {\\r\\n                    style: 'border_color'\\r\\n                },\\r\\n                lists: {\\r\\n                    unordered: 'format_list_bulleted',\\r\\n                    ordered: 'format_list_numbered'\\r\\n                },\\r\\n                options: {\\r\\n                    help: 'help',\\r\\n                    fullscreen: 'settings_overscan',\\r\\n                    codeview: 'code'\\r\\n                },\\r\\n                paragraph: {\\r\\n                    paragraph: 'format_textdirection_l_to_r',\\r\\n                    outdent: 'format_indent_decrease',\\r\\n                    indent: 'format_indent_increase',\\r\\n                    left: 'format_align_left',\\r\\n                    center: 'format_align_center',\\r\\n                    right: 'format_align_right',\\r\\n                    justify: 'format_align_justify'\\r\\n                },\\r\\n                color: {\\r\\n                    recent: 'format_color_text'\\r\\n                },\\r\\n                history: {\\r\\n                    undo: 'undo',\\r\\n                    redo: 'redo'\\r\\n                },\\r\\n                misc: {\\r\\n                    check: 'check'\\r\\n                }\\r\\n            },\\r\\n\\r\\n            codemirror: {                 // codemirror options\\r\\n                mode: 'text/html',\\r\\n                htmlMode: true,\\r\\n                indentWithTabs: true,\\r\\n                tabSize: 4,\\r\\n                lineNumbers: true,\\r\\n                theme: 'monokai',\\r\\n                maxHighlightLength: 'Infinity'\\r\\n            },\\r\\n\\r\\n            // language\\r\\n            lang: 'en-US',                // language 'en-US', 'ko-KR', ...\\r\\n            direction: null,              // text direction, ex) 'rtl'\\r\\n\\r\\n            // toolbar\\r\\n            toolbar: [\\r\\n                ['style', ['style']],\\r\\n                ['font', ['bold', 'italic', 'underline', 'clear']],\\r\\n                // ['font', ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript', 'clear']],\\r\\n                ['fontname', ['fontname']],\\r\\n                ['fontsize', ['fontsize']],\\r\\n                ['color', ['color']],\\r\\n                ['para', ['ul', 'ol', 'paragraph']],\\r\\n                ['height', ['height']],\\r\\n                ['table', ['table']],\\r\\n                ['insert', ['link', 'picture', 'hr']],\\r\\n                ['view', ['fullscreen', 'codeview']],\\r\\n                ['help', ['help']]\\r\\n            ],\\r\\n\\r\\n            plugin : {},\\r\\n\\r\\n            // air mode: inline editor\\r\\n            airMode: false,\\r\\n            // airPopover: [\\r\\n            //   ['style', ['style']],\\r\\n            //   ['font', ['bold', 'italic', 'underline', 'clear']],\\r\\n            //   ['fontname', ['fontname']],\\r\\n            //   ['color', ['color']],\\r\\n            //   ['para', ['ul', 'ol', 'paragraph']],\\r\\n            //   ['height', ['height']],\\r\\n            //   ['table', ['table']],\\r\\n            //   ['insert', ['link', 'picture']],\\r\\n            //   ['help', ['help']]\\r\\n            // ],\\r\\n            airPopover: [\\r\\n                ['color', ['color']],\\r\\n                ['font', ['bold', 'underline', 'clear']],\\r\\n                ['para', ['ul', 'paragraph']],\\r\\n                ['table', ['table']],\\r\\n                ['insert', ['link', 'picture']]\\r\\n            ],\\r\\n\\r\\n            // style tag\\r\\n            styleTags: ['p', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\\r\\n\\r\\n            // default fontName\\r\\n            defaultFontName: 'Roboto',\\r\\n\\r\\n            // fontName\\r\\n            fontNames: [\\r\\n                'Roboto', 'Arial', 'Arial Black', 'Comic Sans MS', 'Courier New',\\r\\n                'Helvetica Neue', 'Helvetica', 'Impact', 'Times New Roman', 'Verdana'\\r\\n\";\n  builder.string += \"            ],\\r\\n            fontNamesIgnoreCheck: [],\\r\\n\\r\\n            fontSizes: ['12', '13', '14', '15', '16', '17', '18', '25', '37'],\\r\\n\\r\\n            // pallete colors(n x n)\\r\\n            colors: [//grey      brown      dpurple    purple     indigo     blue       cyan       green      lgreen     yellow     amber      orange     dorange    red        pink\\r\\n                ['#fafafa', '#efebe9', '#7e57c2', '#ab47bc', '#5c6bc0', '#42a5f5', '#26c6da', '#66bb6a', '#9ccc65', '#ffee58', '#ffca28', '#ffa726', '#ff7043', '#ef5350', '#ec407a'],\\r\\n                ['#f5f5f5', '#d7ccc8', '#673ab7', '#9c27b0', '#3f51b5', '#2196f3', '#00bcd4', '#4caf50', '#8bc34a', '#ffeb3b', '#ffc107', '#ff9800', '#ff5722', '#f44336', '#e91e63'],\\r\\n                ['#eeeeee', '#bcaaa4', '#5e35b1', '#8e24aa', '#3949ab', '#1e88e5', '#00acc1', '#43a047', '#7cb342', '#fdd835', '#ffb300', '#fb8c00', '#f4511e', '#e53935', '#d81b60'],\\r\\n                ['#e0e0e0', '#a1887f', '#512da8', '#7b1fa2', '#303f9f', '#1976d2', '#0097a7', '#388e3c', '#689f38', '#fbc02d', '#ffa000', '#f57c00', '#e64a19', '#d32f2f', '#c2185b'],\\r\\n                ['#bdbdbd', '#8d6e63', '#4527a0', '#6a1b9a', '#283593', '#1565c0', '#00838f', '#2e7d32', '#558b2f', '#f9a825', '#ff8f00', '#ef6c00', '#d84315', '#c62828', '#ad1457'],\\r\\n                ['#9e9e9e', '#795548', '#311b92', '#4a148c', '#1a237e', '#0d47a1', '#006064', '#1b5e20', '#33691e', '#f57f17', '#ff6f00', '#e65100', '#bf360c', '#b71c1c', '#880e4f'],\\r\\n                ['#757575', '#6d4c41', '#b388ff', '#ea80fc', '#8c9eff', '#82b1ff', '#84ffff', '#b9f6ca', '#ccff90', '#ffff8d', '#ffe57f', '#ffd180', '#ff9e80', '#ff8a80', '#ff80ab'],\\r\\n                ['#616161', '#5d4037', '#7c4dff', '#e040fb', '#536dfe', '#448aff', '#18ffff', '#69f0ae', '#b2ff59', '#ffff00', '#ffd740', '#ffab40', '#ff6e40', '#ff5252', '#ff4081'],\\r\\n                ['#424242', '#4e342e', '#651fff', '#d500f9', '#3d5afe', '#2979ff', '#00e5ff', '#00e676', '#76ff03', '#ffea00', '#ffc400', '#ff9100', '#ff3d00', '#ff1744', '#f50057'],\\r\\n                ['#212121', '#3e2723', '#6200ea', '#aa00ff', '#304ffe', '#2962ff', '#00b8d4', '#00c853', '#64dd17', '#ffd600', '#ffab00', '#ff6d00', '#dd2c00', '#d50000', '#c51162'],\\r\\n            ],\\r\\n            // pallete colors(n x n)\\r\\n            colorTitles: [\\r\\n                //grey            brown             dpurple                 purple             indigo             blue             cyan             green             lgreen                  yellow             amber             orange             dorange                 red             pink\\r\\n                ['grey lighten5', 'brown lighten5', 'deep-purple lighten1', 'purple lighten1', 'indigo lighten1', 'blue lighten1', 'cyan lighten1', 'green lighten1', 'light-green lighten1', 'yellow lighten1', 'amber lighten1', 'orange lighten1', 'deep-orange lighten1', 'red lighten1', 'pink lighten1'],\\r\\n                ['grey lighten4', 'brown lighten4', 'deep-purple',          'purple',          'indigo',          'blue',          'cyan',          'green',          'light-green',          'yellow',          'amber',          'orange',          'deep-orange',          'red',          'pink'         ],\\r\\n                ['grey lighten3', 'brown lighten3', 'deep-purple darken1',  'purple darken1',  'indigo darken1',  'blue darken1',  'cyan darken1',  'green darken1',  'light-green darken1',  'yellow darken1',  'amber darken1',  'orange darken1',  'deep-orange darken1',  'red darken1',  'pink darken1' ],\\r\\n                ['grey lighten2', 'brown lighten2', 'deep-purple darken2',  'purple darken2',  'indigo darken2',  'blue darken2',  'cyan darken2',  'green darken2',  'light-green darken2',  'yellow darken2',  'amber darken2',  'orange darken2',  'deep-orange darken2',  'red darken2',  'pink darken2' ],\\r\\n                ['grey lighten1', 'brown lighten1', 'deep-purple darken3',  'purple darken3',  'indigo darken3',  'blue darken3',  'cyan darken3',  'green darken3',  'light-green darken3',  'yellow darken3',  'amber darken3',  'orange darken3',  'deep-orange darken3',  'red darken3',  'pink darken3' ],\\r\\n                ['grey',          'brown',          'deep-purple darken4',  'purple darken4',  'indigo darken4',  'blue darken4',  'cyan darken4',  'green darken4',  'light-green darken4',  'yellow darken4',  'amber darken4',  'orange darken4',  'deep-orange darken4',  'red darken4',  'pink darken4' ],\\r\\n                ['grey darken1',  'brown darken1',  'deep-purple accent1',  'purple accent1',  'indigo accent1',  'blue accent1',  'cyan accent1',  'green accent1',  'light-green accent1',  'yellow accent1',  'amber accent1',  'orange accent1',  'deep-orange accent1',  'red accent1',  'pink accent1' ],\\r\\n                ['grey darken2',  'brown darken2',  'deep-purple accent2',  'purple accent2',  'indigo accent2',  'blue accent2',  'cyan accent2',  'green accent2',  'light-green accent2',  'yellow accent2',  'amber accent2',  'orange accent2',  'deep-orange accent2',  'red accent2',  'pink accent2' ],\\r\\n                ['grey darken3',  'brown darken3',  'deep-purple accent3',  'purple accent3',  'indigo accent3',  'blue accent3',  'cyan accent3',  'green accent3',  'light-green accent3',  'yellow accent3',  'amber accent3',  'orange accent3',  'deep-orange accent3',  'red accent3',  'pink accent3' ],\\r\\n                ['grey darken4',  'brown darken4',  'deep-purple accent4',  'purple accent4',  'indigo accent4',  'blue accent4',  'cyan accent4',  'green accent4',  'light-green accent4',  'yellow accent4',  'amber accent4',  'orange accent4',  'deep-orange accent4',  'red accent4',  'pink accent4' ],\\r\\n            ],\\r\\n\\r\\n            // lineHeight\\r\\n            lineHeights: ['1.0', '1.2', '1.4', '1.5', '1.6', '1.8', '2.0', '3.0'],\\r\\n\\r\\n            // insertTable max size\\r\\n            insertTableMaxSize: {\\r\\n                col: 12,\\r\\n                row: 10\\r\\n            },\\r\\n\\r\\n            // image\\r\\n            maximumImageFileSize: null, // size in bytes, null = no limit\\r\\n\\r\\n            // callbacks\\r\\n            oninit: null,             // initialize\\r\\n            onfocus: null,            // editable has focus\\r\\n            onblur: null,             // editable out of focus\\r\\n            onenter: null,            // enter key pressed\\r\\n            onkeyup: null,            // keyup\\r\\n            onkeydown: null,          // keydown\\r\\n            onImageUpload: null,      // imageUpload\\r\\n            onImageUploadError: null, // imageUploadError\\r\\n            onMediaDelete: null,      // media delete\\r\\n            onToolbarClick: null,\\r\\n            onsubmit: null,\\r\\n\\r\\n            /**\\r\\n             * manipulate link address when user create link\\r\\n             * @param {String} sLinkUrl\\r\\n             * @return {String}\\r\\n             */\\r\\n            onCreateLink: function(sLinkUrl) {\\r\\n                if (sLinkUrl.indexOf('@') !== -1 && sLinkUrl.indexOf(':') === -1) {\\r\\n                    sLinkUrl =  'mailto:' + sLinkUrl;\\r\\n                }\\r\\n\\r\\n                return sLinkUrl;\\r\\n            },\\r\\n\\r\\n            keyMap: {\\r\\n                pc: {\\r\\n                    'ENTER': 'insertParagraph',\\r\\n                    'CTRL+Z': 'undo',\\r\\n                    'CTRL+Y': 'redo',\\r\\n                    'TAB': 'tab',\\r\\n                    'SHIFT+TAB': 'untab',\\r\\n                    'CTRL+B': 'bold',\\r\\n                    'CTRL+I': 'italic',\\r\\n                    'CTRL+U': 'underline',\\r\\n                    'CTRL+SHIFT+S': 'strikethrough',\\r\\n                    'CTRL+BACKSLASH': 'removeFormat',\\r\\n                    'CTRL+SHIFT+L': 'justifyLeft',\\r\\n                    'CTRL+SHIFT+E': 'justifyCenter',\\r\\n                    'CTRL+SHIFT+R': 'justifyRight',\\r\\n                    'CTRL+SHIFT+J': 'justifyFull',\\r\\n                    'CTRL+SHIFT+NUM7': 'insertUnorderedList',\\r\\n                    'CTRL+SHIFT+NUM8': 'insertOrderedList',\\r\\n                    'CTRL+LEFTBRACKET': 'outdent',\\r\\n                    'CTRL+RIGHTBRACKET': 'indent',\\r\\n                    'CTRL+NUM0': 'formatPara',\\r\\n                    'CTRL+NUM1': 'formatH1',\\r\\n                    'CTRL+NUM2': 'formatH2',\\r\\n                    'CTRL+NUM3': 'formatH3',\\r\\n                    'CTRL+NUM4': 'formatH4',\\r\\n                    'CTRL+NUM5': 'formatH5',\\r\\n                    'CTRL+NUM6': 'formatH6',\\r\\n                    'CTRL+ENTER': 'insertHorizontalRule',\\r\\n                    'CTRL+K': 'showLinkDialog'\\r\\n                },\\r\\n\\r\\n                mac: {\\r\\n                    'ENTER': 'insertParagraph',\\r\\n                    'CMD+Z': 'undo',\\r\\n                    'CMD+SHIFT+Z': 'redo',\\r\\n                    'TAB': 'tab',\\r\\n                    'SHIFT+TAB': 'untab',\\r\\n                    'CMD+B': 'bold',\\r\\n                    'CMD+I': 'italic',\\r\\n                    'CMD+U': 'underline',\\r\\n                    'CMD+SHIFT+S': 'strikethrough',\\r\\n                    'CMD+BACKSLASH': 'removeFormat',\\r\\n                    'CMD+SHIFT+L': 'justifyLeft',\\r\\n                    'CMD+SHIFT+E': 'justifyCenter',\\r\\n                    'CMD+SHIFT+R': 'justifyRight',\\r\\n                    'CMD+SHIFT+J': 'justifyFull',\\r\\n                    'CMD+SHIFT+NUM7': 'insertUnorderedList',\\r\\n                    'CMD+SHIFT+NUM8': 'insertOrderedList',\\r\\n                    'CMD+LEFTBRACKET': 'outdent',\\r\\n                    'CMD+RIGHTBRACKET': 'indent',\\r\\n                    'CMD+NUM0': 'formatPara',\\r\\n                    'CMD+NUM1': 'formatH1',\\r\\n                    'CMD+NUM2': 'formatH2',\\r\\n                    'CMD+NUM3': 'formatH3',\\r\\n                    'CMD+NUM4': 'formatH4',\\r\\n                    'CMD+NUM5': 'formatH5',\\r\\n                    'CMD+NUM6': 'formatH6',\\r\\n                    'CMD+ENTER': 'insertHorizontalRule',\\r\\n                    'CMD+K': 'showLinkDialog'\\r\\n                }\\r\\n            }\\r\\n        },\\r\\n\\r\\n        // default language: en-US\\r\\n        lang: {\\r\\n            'en-US': {\\r\\n                font: {\\r\\n                    bold: 'Bold',\\r\\n                    italic: 'Italic',\\r\\n                    underline: 'Underline',\\r\\n                    clear: 'Remove Font Style',\\r\\n                    height: 'Line Height',\\r\\n                    name: 'Font Family',\\r\\n                    strikethrough: 'Strikethrough',\\r\\n                    subscript: 'Subscript',\\r\\n                    superscript: 'Superscript',\\r\\n                    size: 'Font Size'\\r\\n                },\\r\\n                image: {\\r\\n                    image: 'Picture',\\r\\n                    insert: 'Insert Image',\\r\\n                    resizeFull: 'Resize Full',\\r\\n                    resizeHalf: 'Resize Half',\\r\\n                    resizeQuarter: 'Resize Quarter',\\r\\n                    floatLeft: 'Float Left',\\r\\n                    floatRight: 'Float Right',\\r\\n                    floatNone: 'Float None',\\r\\n                    shapeRounded: 'Shape: Rounded',\\r\\n                    shapeCircle: 'Shape: Circle',\\r\\n                    bordered: 'Bordered',\\r\\n                    shapeThumbnail: 'Shape: Thumbnail',\\r\\n                    shapeNone: 'Shape: None',\\r\\n                    dragImageHere: 'Drag image or text here',\\r\\n                    dropImage: 'Drop image or Text',\\r\\n                    selectFromFiles: 'Select from files',\\r\\n                    maximumFileSize: 'Maximum file size',\\r\\n                    maximumFileSizeError: 'Maximum file size exceeded.',\\r\\n                    url: 'Image URL',\\r\\n                    remove: 'Remove Image'\\r\\n                },\\r\\n                link: {\\r\\n                    link: 'Link',\\r\\n                    insert: 'Insert Link',\\r\\n                    unlink: 'Unlink',\\r\\n                    edit: 'Edit',\\r\\n                    textToDisplay: 'Text to display',\\r\\n                    url: 'To what URL should this link go?',\\r\\n                    openInNewWindow: 'Open in new window'\\r\\n                },\\r\\n                table: {\\r\\n                    table: 'Table',\\r\\n                    striped: 'Striped',\\r\\n                    hoverable: 'Hoverable',\\r\\n                    responsive: 'Responsive',\\r\\n                    bordered: 'Bordered'\\r\\n                },\\r\\n                hr: {\\r\\n                    insert: 'Insert Horizontal Rule'\\r\\n                },\\r\\n                style: {\\r\\n                    style: 'Style',\\r\\n                    normal: 'Normal',\\r\\n                    blockquote: 'Quote',\\r\\n                    pre: 'Code',\\r\\n                    h1: 'Header 1',\\r\\n                    h2: 'Header 2',\\r\\n                    h3: 'Header 3',\\r\\n                    h4: 'Header 4',\\r\\n                    h5: 'Header 5',\\r\\n                    h6: 'Header 6'\\r\\n                },\\r\\n                lists: {\\r\\n                    unordered: 'Unordered list',\\r\\n                    ordered: 'Ordered list'\\r\\n                },\\r\\n                options: {\\r\\n                    help: 'Help',\\r\\n                    fullscreen: 'Full Screen',\\r\\n                    codeview: 'Code View'\\r\\n                },\\r\\n                paragraph: {\\r\\n                    paragraph: 'Paragraph',\\r\\n                    outdent: 'Outdent',\\r\\n                    indent: 'Indent',\\r\\n                    left: 'Align left',\\r\\n                    center: 'Align center',\\r\\n                    right: 'Align right',\\r\\n                    justify: 'Justify full'\\r\\n                },\\r\\n                color: {\\r\\n                    recent: 'Recent Color',\\r\\n                    more: 'More Color',\\r\\n                    background: 'Back',\\r\\n                    foreground: 'Text',\\r\\n                    transparent: 'Transparent',\\r\\n                    setTransparent: 'Transparent',\\r\\n                    reset: 'Reset',\\r\\n                    resetToDefault: 'Default'\\r\\n                },\\r\\n                shortcut: {\\r\\n                    shortcuts: 'Keyboard shortcuts',\\r\\n                    close: 'Close',\\r\\n                    textFormatting: 'Text formatting',\\r\\n                    action: 'Action',\\r\\n                    paragraphFormatting: 'Paragraph formatting',\\r\\n                    documentStyle: 'Document Style',\\r\\n                    extraKeys: 'Extra keys'\\r\\n                },\\r\\n                history: {\\r\\n                    undo: 'Undo',\\r\\n                    redo: 'Redo'\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    };\\r\\n\\r\\n    /**\\r\\n     * @class core.async\\r\\n     *\\r\\n     * Async functions which returns `Promise`\\r\\n     *\\r\\n     * @singleton\\r\\n     * @alternateClassName async\\r\\n     */\\r\\n    var async = (function() {\\r\\n        /**\\r\\n         * @method readFileAsDataURL\\r\\n         *\\r\\n         * read contents of file as representing URL\\r\\n         *\\r\\n         * @param {File} file\\r\\n         * @return {Promise} - then: sDataUrl\\r\\n         */\\r\\n        var readFileAsDataURL = function(file) {\\r\\n            return $.Deferred(function(deferred) {\\r\\n                $.extend(new FileReader(), {\\r\\n                    onload: function(e) {\\r\\n                        var sDataURL = e.target.result;\\r\\n                        deferred.resolve(sDataURL);\\r\\n                    },\\r\\n                    onerror: function() {\\r\\n                        deferred.reject(this);\\r\\n                    }\\r\\n                }).readAsDataURL(file);\\r\\n            }).promise();\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method createImage\\r\\n         *\\r\\n         * create `<image>` from url string\\r\\n         *\\r\\n         * @param {String} sUrl\\r\\n         * @param {String} filename\\r\\n         * @return {Promise} - then: $image\\r\\n         */\\r\\n        var createImage = function(sUrl, filename) {\\r\\n            return $.Deferred(function(deferred) {\\r\\n                var $img = $('<img>');\\r\\n\\r\\n                $img.one('load', function() {\\r\\n                    $img.off('error abort');\\r\\n                    deferred.resolve($img);\\r\\n                }).one('error abort', function() {\\r\\n                    $img.off('load').detach();\\r\\n                    deferred.reject($img);\\r\\n                }).css({\\r\\n                    display: 'none'\\r\\n                }).appendTo(document.body).attr({\\r\\n                    'src': sUrl,\\r\\n                    'data-filename': filename\\r\\n                });\\r\\n            }).promise();\\r\\n        };\\r\\n\\r\\n        return {\\r\\n            readFileAsDataURL: readFileAsDataURL,\\r\\n            createImage: createImage\\r\\n        };\\r\\n    })();\\r\\n\\r\\n    /**\\r\\n     * @class core.key\\r\\n     *\\r\\n     * Object for keycodes.\\r\\n     *\\r\\n     * @singleton\\r\\n     * @alternateClassName key\\r\\n     */\\r\\n    var key = (function() {\\r\\n        var keyMap = {\\r\\n            'BACKSPACE': 8,\\r\\n            'TAB': 9,\\r\";\n  builder.string += \"\\n            'ENTER': 13,\\r\\n            'SPACE': 32,\\r\\n\\r\\n            // Number: 0-9\\r\\n            'NUM0': 48,\\r\\n            'NUM1': 49,\\r\\n            'NUM2': 50,\\r\\n            'NUM3': 51,\\r\\n            'NUM4': 52,\\r\\n            'NUM5': 53,\\r\\n            'NUM6': 54,\\r\\n            'NUM7': 55,\\r\\n            'NUM8': 56,\\r\\n\\r\\n            // Alphabet: a-z\\r\\n            'B': 66,\\r\\n            'E': 69,\\r\\n            'I': 73,\\r\\n            'J': 74,\\r\\n            'K': 75,\\r\\n            'L': 76,\\r\\n            'R': 82,\\r\\n            'S': 83,\\r\\n            'U': 85,\\r\\n            'Y': 89,\\r\\n            'Z': 90,\\r\\n\\r\\n            'SLASH': 191,\\r\\n            'LEFTBRACKET': 219,\\r\\n            'BACKSLASH': 220,\\r\\n            'RIGHTBRACKET': 221\\r\\n        };\\r\\n\\r\\n        return {\\r\\n            /**\\r\\n             * @method isEdit\\r\\n             *\\r\\n             * @param {Number} keyCode\\r\\n             * @return {Boolean}\\r\\n             */\\r\\n            isEdit: function(keyCode) {\\r\\n                return list.contains([8, 9, 13, 32], keyCode);\\r\\n            },\\r\\n            /**\\r\\n             * @method isMove\\r\\n             *\\r\\n             * @param {Number} keyCode\\r\\n             * @return {Boolean}\\r\\n             */\\r\\n            isMove: function(keyCode) {\\r\\n                return list.contains([37, 38, 39, 40], keyCode);\\r\\n            },\\r\\n            /**\\r\\n             * @property {Object} nameFromCode\\r\\n             * @property {String} nameFromCode.8 \\\"BACKSPACE\\\"\\r\\n             */\\r\\n            nameFromCode: func.invertObject(keyMap),\\r\\n            code: keyMap\\r\\n        };\\r\\n    })();\\r\\n\\r\\n    /**\\r\\n     * @class editing.History\\r\\n     *\\r\\n     * Editor History\\r\\n     *\\r\\n     */\\r\\n    var History = function($editable) {\\r\\n        var stack = [], stackOffset = -1;\\r\\n        var editable = $editable[0];\\r\\n\\r\\n        var makeSnapshot = function() {\\r\\n            var rng = range.create();\\r\\n            var emptyBookmark = {s: {path: [], offset: 0}, e: {path: [], offset: 0}};\\r\\n\\r\\n            return {\\r\\n                contents: $editable.html(),\\r\\n                bookmark: (rng ? rng.bookmark(editable) : emptyBookmark)\\r\\n            };\\r\\n        };\\r\\n\\r\\n        var applySnapshot = function(snapshot) {\\r\\n            if (snapshot.contents !== null) {\\r\\n                $editable.html(snapshot.contents);\\r\\n            }\\r\\n            if (snapshot.bookmark !== null) {\\r\\n                range.createFromBookmark(editable, snapshot.bookmark).select();\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * undo\\r\\n         */\\r\\n        this.undo = function() {\\r\\n            if (0 < stackOffset) {\\r\\n                stackOffset--;\\r\\n                applySnapshot(stack[stackOffset]);\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * redo\\r\\n         */\\r\\n        this.redo = function() {\\r\\n            if (stack.length - 1 > stackOffset) {\\r\\n                stackOffset++;\\r\\n                applySnapshot(stack[stackOffset]);\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * recorded undo\\r\\n         */\\r\\n        this.recordUndo = function() {\\r\\n            stackOffset++;\\r\\n\\r\\n            // Wash out stack after stackOffset\\r\\n            if (stack.length > stackOffset) {\\r\\n                stack = stack.slice(0, stackOffset);\\r\\n            }\\r\\n\\r\\n            // Create new snapshot and push it to the end\\r\\n            stack.push(makeSnapshot());\\r\\n        };\\r\\n\\r\\n        // Create first undo stack\\r\\n        this.recordUndo();\\r\\n    };\\r\\n\\r\\n    /**\\r\\n     * @class editing.Style\\r\\n     *\\r\\n     * Style\\r\\n     *\\r\\n     */\\r\\n    var Style = function() {\\r\\n        /**\\r\\n         * @method jQueryCSS\\r\\n         *\\r\\n         * [workaround] for old jQuery\\r\\n         * passing an array of style properties to .css()\\r\\n         * will result in an object of property-value pairs.\\r\\n         * (compability with version < 1.9)\\r\\n         *\\r\\n         * @private\\r\\n         * @param  {jQuery} $obj\\r\\n         * @param  {Array} propertyNames - An array of one or more CSS properties.\\r\\n         * @return {Object}\\r\\n         */\\r\\n        var jQueryCSS = function($obj, propertyNames) {\\r\\n            if (agent.jqueryVersion < 1.9) {\\r\\n                var result = {};\\r\\n                $.each(propertyNames, function(idx, propertyName) {\\r\\n                    result[propertyName] = $obj.css(propertyName);\\r\\n                });\\r\\n                return result;\\r\\n            }\\r\\n            return $obj.css.call($obj, propertyNames);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * paragraph level style\\r\\n         *\\r\\n         * @param {WrappedRange} rng\\r\\n         * @param {Object} styleInfo\\r\\n         */\\r\\n        this.stylePara = function(rng, styleInfo) {\\r\\n            $.each(rng.nodes(dom.isPara, {\\r\\n                includeAncestor: true\\r\\n            }), function(idx, para) {\\r\\n                $(para).css(styleInfo);\\r\\n            });\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * insert and returns styleNodes on range.\\r\\n         *\\r\\n         * @param {WrappedRange} rng\\r\\n         * @param {Object} [options] - options for styleNodes\\r\\n         * @param {String} [options.nodeName] - default: `SPAN`\\r\\n         * @param {Boolean} [options.expandClosestSibling] - default: `false`\\r\\n         * @param {Boolean} [options.onlyPartialContains] - default: `false`\\r\\n         * @return {Node[]}\\r\\n         */\\r\\n        this.styleNodes = function(rng, options) {\\r\\n            rng = rng.splitText();\\r\\n\\r\\n            var nodeName = options && options.nodeName || 'SPAN';\\r\\n            var expandClosestSibling = !!(options && options.expandClosestSibling);\\r\\n            var onlyPartialContains = !!(options && options.onlyPartialContains);\\r\\n\\r\\n            if (rng.isCollapsed()) {\\r\\n                return [rng.insertNode(dom.create(nodeName))];\\r\\n            }\\r\\n\\r\\n            var pred = dom.makePredByNodeName(nodeName);\\r\\n            var nodes = $.map(rng.nodes(dom.isText, {\\r\\n                fullyContains: true\\r\\n            }), function(text) {\\r\\n                return dom.singleChildAncestor(text, pred) || dom.wrap(text, nodeName);\\r\\n            });\\r\\n\\r\\n            if (expandClosestSibling) {\\r\\n                if (onlyPartialContains) {\\r\\n                    var nodesInRange = rng.nodes();\\r\\n                    // compose with partial contains predication\\r\\n                    pred = func.and(pred, function(node) {\\r\\n                        return list.contains(nodesInRange, node);\\r\\n                    });\\r\\n                }\\r\\n\\r\\n                return $.map(nodes, function(node) {\\r\\n                    var siblings = dom.withClosestSiblings(node, pred);\\r\\n                    var head = list.head(siblings);\\r\\n                    var tails = list.tail(siblings);\\r\\n                    $.each(tails, function(idx, elem) {\\r\\n                        dom.appendChildNodes(head, elem.childNodes);\\r\\n                        dom.remove(elem);\\r\\n                    });\\r\\n                    return list.head(siblings);\\r\\n                });\\r\\n            } else {\\r\\n                return nodes;\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * get current style on cursor\\r\\n         *\\r\\n         * @param {WrappedRange} rng\\r\\n         * @param {Node} target - target element on event\\r\\n         * @return {Object} - object contains style properties.\\r\\n         */\\r\\n        this.current = function(rng, target) {\\r\\n            var $cont = $(dom.isText(rng.sc) ? rng.sc.parentNode : rng.sc);\\r\\n            var properties = ['font-family', 'font-size', 'text-align', 'list-style-type', 'line-height'];\\r\\n            var styleInfo = jQueryCSS($cont, properties) || {};\\r\\n\\r\\n            styleInfo['font-size'] = parseInt(styleInfo['font-size'], 10);\\r\\n\\r\\n            // document.queryCommandState for toggle state\\r\\n            styleInfo['font-bold'] = document.queryCommandState('bold') ? 'bold' : 'normal';\\r\\n            styleInfo['font-italic'] = document.queryCommandState('italic') ? 'italic' : 'normal';\\r\\n            styleInfo['font-underline'] = document.queryCommandState('underline') ? 'underline' : 'normal';\\r\\n            styleInfo['font-strikethrough'] = document.queryCommandState('strikeThrough') ? 'strikethrough' : 'normal';\\r\\n            styleInfo['font-superscript'] = document.queryCommandState('superscript') ? 'superscript' : 'normal';\\r\\n            styleInfo['font-subscript'] = document.queryCommandState('subscript') ? 'subscript' : 'normal';\\r\\n\\r\\n            // list-style-type to list-style(unordered, ordered)\\r\\n            if (!rng.isOnList()) {\\r\\n                styleInfo['list-style'] = 'none';\\r\\n            } else {\\r\\n                var aOrderedType = ['circle', 'disc', 'disc-leading-zero', 'square'];\\r\\n                var isUnordered = $.inArray(styleInfo['list-style-type'], aOrderedType) > -1;\\r\\n                styleInfo['list-style'] = isUnordered ? 'unordered' : 'ordered';\\r\\n            }\\r\\n\\r\\n            var para = dom.ancestor(rng.sc, dom.isPara);\\r\\n            if (para && para.style['line-height']) {\\r\\n                styleInfo['line-height'] = para.style.lineHeight;\\r\\n            } else {\\r\\n                var lineHeight = parseInt(styleInfo['line-height'], 10) / parseInt(styleInfo['font-size'], 10);\\r\\n                styleInfo['line-height'] = lineHeight.toFixed(1);\\r\\n            }\\r\\n\\r\\n            styleInfo.image = dom.isImg(target) && target;\\r\\n            styleInfo.anchor = rng.isOnAnchor() && dom.ancestor(rng.sc, dom.isAnchor);\\r\\n            styleInfo.ancestors = dom.listAncestor(rng.sc, dom.isEditable);\\r\\n            styleInfo.range = rng;\\r\\n\\r\\n            return styleInfo;\\r\\n        };\\r\\n    };\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @class editing.Bullet\\r\\n     *\\r\\n     * @alternateClassName Bullet\\r\\n     */\\r\\n    var Bullet = function() {\\r\\n        /**\\r\\n         * @method insertOrderedList\\r\\n         *\\r\\n         * toggle ordered list\\r\\n         *\\r\\n         * @type command\\r\\n         */\\r\\n        this.insertOrderedList = function() {\\r\\n            this.toggleList('OL');\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method insertUnorderedList\\r\\n         *\\r\\n         * toggle unordered list\\r\\n         *\\r\\n         * @type command\\r\\n         */\\r\\n        this.insertUnorderedList = function() {\\r\\n            this.toggleList('UL');\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method indent\\r\\n         *\\r\\n         * indent\\r\\n         *\\r\\n         * @type command\\r\\n         */\\r\\n        this.indent = function() {\\r\\n            var self = this;\\r\\n            var rng = range.create().wrapBodyInlineWithPara();\\r\\n\\r\\n            var paras = rng.nodes(dom.isPara, { includeAncestor: true });\\r\\n            var clustereds = list.clusterBy(paras, func.peq2('parentNode'));\\r\\n\\r\\n            $.each(clustereds, function(idx, paras) {\\r\\n                var head = list.head(paras);\\r\\n                if (dom.isLi(head)) {\\r\\n                    self.wrapList(paras, head.parentNode.nodeName);\\r\\n                } else {\\r\\n                    $.each(paras, function(idx, para) {\\r\\n                        $(para).css('marginLeft', function(idx, val) {\\r\\n                            return (parseInt(val, 10) || 0) + 25;\\r\\n                        });\\r\\n                    });\\r\\n                }\\r\\n            });\\r\\n\\r\\n            rng.select();\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method outdent\\r\\n         *\\r\\n         * outdent\\r\\n         *\\r\\n         * @type command\\r\\n         */\\r\\n        this.outdent = function() {\\r\\n            var self = this;\\r\\n            var rng = range.create().wrapBodyInlineWithPara();\\r\\n\\r\\n            var paras = rng.nodes(dom.isPara, { includeAncestor: true });\\r\\n            var clustereds = list.clusterBy(paras, func.peq2('parentNode'));\\r\\n\\r\\n            $.each(clustereds, function(idx, paras) {\\r\\n                var head = list.head(paras);\\r\\n                if (dom.isLi(head)) {\\r\\n                    self.releaseList([paras]);\\r\\n                } else {\\r\\n                    $.each(paras, function(idx, para) {\\r\\n                        $(para).css('marginLeft', function(idx, val) {\\r\\n                            val = (parseInt(val, 10) || 0);\\r\\n                            return val > 25 ? val - 25 : '';\\r\\n                        });\\r\\n                    });\\r\\n                }\\r\\n            });\\r\\n\\r\\n            rng.select();\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method toggleList\\r\\n         *\\r\\n         * toggle list\\r\\n         *\\r\\n         * @param {String} listName - OL or UL\\r\\n         */\\r\\n        this.toggleList = function(listName) {\\r\\n            var self = this;\\r\\n            var rng = range.create().wrapBodyInlineWithPara();\\r\\n\\r\\n            var paras = rng.nodes(dom.isPara, { includeAncestor: true });\\r\\n            var bookmark = rng.paraBookmark(paras);\\r\\n            var clustereds = list.clusterBy(paras, func.peq2('parentNode'));\\r\\n\\r\\n            // paragraph to list\\r\\n            if (list.find(paras, dom.isPurePara)) {\\r\\n                var wrappedParas = [];\\r\\n                $.each(clustereds, function(idx, paras) {\\r\\n                    wrappedParas = wrappedParas.concat(self.wrapList(paras, listName));\\r\\n                });\\r\\n                paras = wrappedParas;\\r\\n                // list to paragraph or change list style\\r\\n            } else {\\r\\n                var diffLists = rng.nodes(dom.isList, {\\r\\n                    includeAncestor: true\\r\\n                }).filter(function(listNode) {\\r\\n                    return !$.nodeName(listNode, listName);\\r\\n                });\\r\\n\\r\\n                if (diffLists.length) {\\r\\n                    $.each(diffLists, function(idx, listNode) {\\r\\n                        dom.replace(listNode, listName);\\r\\n                    });\\r\\n                } else {\\r\\n                    paras = this.releaseList(clustereds, true);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            range.createFromParaBookmark(bookmark, paras).select();\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method wrapList\\r\\n         *\\r\\n         * @param {Node[]} paras\\r\\n         * @param {String} listName\\r\\n         * @return {Node[]}\\r\\n         */\\r\\n        this.wrapList = function(paras, listName) {\\r\\n            var head = list.head(paras);\\r\\n            var last = list.last(paras);\\r\\n\\r\\n            var prevList = dom.isList(head.previousSibling) && head.previousSibling;\\r\\n            var nextList = dom.isList(last.nextSibling) && last.nextSibling;\\r\\n\\r\\n            var listNode = prevList || dom.insertAfter(dom.create(listName || 'UL'), last);\\r\\n\\r\\n            // P to LI\\r\\n            paras = $.map(paras, function(para) {\\r\\n                return dom.isPurePara(para) ? dom.replace(para, 'LI') : para;\\r\\n            });\\r\\n\\r\\n            // append to list(<ul>, <ol>)\\r\\n            dom.appendChildNodes(listNode, paras);\\r\\n\\r\\n            if (nextList) {\\r\\n                dom.appendChildNodes(listNode, list.from(nextList.childNodes));\\r\\n                dom.remove(nextList);\\r\\n            }\\r\\n\\r\\n            return paras;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method releaseList\\r\\n         *\\r\\n         * @param {Array[]} clustereds\\r\\n         * @param {Boolean} isEscapseToBody\\r\\n         * @return {Node[]}\\r\\n         */\\r\\n        this.releaseList = function(clustereds, isEscapseToBody) {\\r\\n            var releasedParas = [];\\r\\n\\r\\n            $.each(clustereds, function(idx, paras) {\\r\\n                var head = list.head(paras);\\r\\n                var last = list.last(paras);\\r\\n\\r\\n                var headList = isEscapseToBody ? dom.lastAncestor(head, dom.isList) :\\r\\n                    head.parentNode;\\r\\n                var lastList = headList.childNodes.length > 1 ? dom.splitTree(headList, {\\r\\n                    node: last.parentNode,\\r\\n                    offset: dom.position(last) + 1\\r\\n                }, {\\r\\n                    isSkipPaddingBlankHTML: true\\r\\n                }) : null;\\r\\n\\r\\n                var middleList = dom.splitTree(headList, {\\r\\n                    node: head.parentNode,\\r\\n                    offset: dom.position(head)\\r\\n                }, {\\r\\n                    isSkipPaddingBlankHTML: true\\r\\n                });\\r\\n\\r\\n                paras = isEscapseToBody ? dom.listDescendant(middleList, dom.isLi) :\\r\\n                    list.from(middleList.childNodes).filter(dom.isLi);\\r\\n\\r\\n                // LI to P\\r\\n                if (isEscapseToBody || !dom.isList(headList.parentNode)) {\\r\\n                    paras = $.map(paras, function(para) {\\r\\n                        return dom.replace(para, 'P');\\r\\n                    });\\r\\n                }\\r\\n\\r\\n                $.each(list.from(paras).reverse(), function(idx, para) {\\r\\n                    dom.insertAfter(para, headList);\\r\\n                });\\r\\n\\r\\n                // remove empty lists\\r\\n                var rootLists = list.compact([headList, middleList, lastList]);\\r\\n                $.each(roo\";\n  builder.string += \"tLists, function(idx, rootList) {\\r\\n                    var listNodes = [rootList].concat(dom.listDescendant(rootList, dom.isList));\\r\\n                    $.each(listNodes.reverse(), function(idx, listNode) {\\r\\n                        if (!dom.nodeLength(listNode)) {\\r\\n                            dom.remove(listNode, true);\\r\\n                        }\\r\\n                    });\\r\\n                });\\r\\n\\r\\n                releasedParas = releasedParas.concat(paras);\\r\\n            });\\r\\n\\r\\n            return releasedParas;\\r\\n        };\\r\\n    };\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @class editing.Typing\\r\\n     *\\r\\n     * Typing\\r\\n     *\\r\\n     */\\r\\n    var Typing = function() {\\r\\n\\r\\n        // a Bullet instance to toggle lists off\\r\\n        var bullet = new Bullet();\\r\\n\\r\\n        /**\\r\\n         * insert tab\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {WrappedRange} rng\\r\\n         * @param {Number} tabsize\\r\\n         */\\r\\n        this.insertTab = function($editable, rng, tabsize) {\\r\\n            var tab = dom.createText(new Array(tabsize + 1).join(dom.NBSP_CHAR));\\r\\n            rng = rng.deleteContents();\\r\\n            rng.insertNode(tab, true);\\r\\n\\r\\n            rng = range.create(tab, tabsize);\\r\\n            rng.select();\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * insert paragraph\\r\\n         */\\r\\n        this.insertParagraph = function() {\\r\\n            var rng = range.create();\\r\\n\\r\\n            // deleteContents on range.\\r\\n            rng = rng.deleteContents();\\r\\n\\r\\n            // Wrap range if it needs to be wrapped by paragraph\\r\\n            rng = rng.wrapBodyInlineWithPara();\\r\\n\\r\\n            // finding paragraph\\r\\n            var splitRoot = dom.ancestor(rng.sc, dom.isPara);\\r\\n\\r\\n            var nextPara;\\r\\n            // on paragraph: split paragraph\\r\\n            if (splitRoot) {\\r\\n                // if it is an empty line with li\\r\\n                if (dom.isEmpty(splitRoot) && dom.isLi(splitRoot)) {\\r\\n                    // disable UL/OL and escape!\\r\\n                    bullet.toggleList(splitRoot.parentNode.nodeName);\\r\\n                    return;\\r\\n                    // if new line has content (not a line break)\\r\\n                } else {\\r\\n                    nextPara = dom.splitTree(splitRoot, rng.getStartPoint());\\r\\n\\r\\n                    var emptyAnchors = dom.listDescendant(splitRoot, dom.isEmptyAnchor);\\r\\n                    emptyAnchors = emptyAnchors.concat(dom.listDescendant(nextPara, dom.isEmptyAnchor));\\r\\n\\r\\n                    $.each(emptyAnchors, function(idx, anchor) {\\r\\n                        dom.remove(anchor);\\r\\n                    });\\r\\n                }\\r\\n                // no paragraph: insert empty paragraph\\r\\n            } else {\\r\\n                var next = rng.sc.childNodes[rng.so];\\r\\n                nextPara = $(dom.emptyPara)[0];\\r\\n                if (next) {\\r\\n                    rng.sc.insertBefore(nextPara, next);\\r\\n                } else {\\r\\n                    rng.sc.appendChild(nextPara);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            range.create(nextPara, 0).normalize().select();\\r\\n\\r\\n        };\\r\\n\\r\\n    };\\r\\n\\r\\n    /**\\r\\n     * @class editing.Table\\r\\n     *\\r\\n     * Table\\r\\n     *\\r\\n     */\\r\\n    var Table = function() {\\r\\n        /**\\r\\n         * handle tab key\\r\\n         *\\r\\n         * @param {WrappedRange} rng\\r\\n         * @param {Boolean} isShift\\r\\n         */\\r\\n        this.tab = function(rng, isShift) {\\r\\n            var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);\\r\\n            var table = dom.ancestor(cell, dom.isTable);\\r\\n            var cells = dom.listDescendant(table, dom.isCell);\\r\\n\\r\\n            var nextCell = list[isShift ? 'prev' : 'next'](cells, cell);\\r\\n            if (nextCell) {\\r\\n                range.create(nextCell, 0).select();\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * create empty table element\\r\\n         *\\r\\n         * @param {Number} rowCount\\r\\n         * @param {Number} colCount\\r\\n         * @return {Node}\\r\\n         */\\r\\n        this.createTable = function(tOptions) {\\r\\n            var tds = [], tdHTML;\\r\\n            var theaders = [];\\r\\n            var colCount = tOptions[0];\\r\\n            var rowCount = tOptions[1];\\r\\n            var classes = tOptions.slice(2, tOptions.length);\\r\\n\\r\\n            for (var idxCol = 0; idxCol < colCount; idxCol++) {\\r\\n                //tds.push('<td>' + dom.blank + '<\\/td>');\\r\\n                tds.push('<td>(item)<\\/td>');\\r\\n                theaders.push('<th>header<\\/th>');\\r\\n            }\\r\\n            tdHTML = tds.join('');\\r\\n            theaders = theaders.join('');\\r\\n\\r\\n            var trs = [], trHTML;\\r\\n            for (var idxRow = 0; idxRow < rowCount; idxRow++) {\\r\\n                trs.push('<tr>' + tdHTML + '<\\/tr>');\\r\\n            }\\r\\n            trHTML = trs.join('');\\r\\n\\r\\n            return $('<table class=\\\"' + classes.join(' ') + '\\\"><thead><tr>' + theaders + '<\\/tr><\\/thead><tbody>' + trHTML + '<\\/tbody><\\/table>')[0];\\r\\n        };\\r\\n    };\\r\\n\\r\\n\\r\\n    var KEY_BOGUS = 'bogus';\\r\\n\\r\\n    /**\\r\\n     * @class editing.Editor\\r\\n     *\\r\\n     * Editor\\r\\n     *\\r\\n     */\\r\\n    var Editor = function(handler) {\\r\\n\\r\\n        var style = new Style();\\r\\n        var table = new Table();\\r\\n        var typing = new Typing();\\r\\n        var bullet = new Bullet();\\r\\n\\r\\n        /**\\r\\n         * @method createRange\\r\\n         *\\r\\n         * create range\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         * @return {WrappedRange}\\r\\n         */\\r\\n        this.createRange = function($editable) {\\r\\n            this.focus($editable);\\r\\n            return range.create();\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method saveRange\\r\\n         *\\r\\n         * save current range\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {Boolean} [thenCollapse=false]\\r\\n         */\\r\\n        this.saveRange = function($editable, thenCollapse) {\\r\\n            this.focus($editable);\\r\\n            $editable.data('range', range.create());\\r\\n            if (thenCollapse) {\\r\\n                range.create().collapse().select();\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method saveRange\\r\\n         *\\r\\n         * save current node list to $editable.data('childNodes')\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         */\\r\\n        this.saveNode = function($editable) {\\r\\n            // copy child node reference\\r\\n            var copy = [];\\r\\n            for (var key  = 0, len = $editable[0].childNodes.length; key < len; key++) {\\r\\n                copy.push($editable[0].childNodes[key]);\\r\\n            }\\r\\n            $editable.data('childNodes', copy);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method restoreRange\\r\\n         *\\r\\n         * restore lately range\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         */\\r\\n        this.restoreRange = function($editable) {\\r\\n            var rng = $editable.data('range');\\r\\n            if (rng) {\\r\\n                rng.select();\\r\\n                this.focus($editable);\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method restoreNode\\r\\n         *\\r\\n         * restore lately node list\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         */\\r\\n        this.restoreNode = function($editable) {\\r\\n            $editable.html('');\\r\\n            var child = $editable.data('childNodes');\\r\\n            for (var index = 0, len = child.length; index < len; index++) {\\r\\n                $editable[0].appendChild(child[index]);\\r\\n            }\\r\\n        };\\r\\n\\r\\n        this.reset = function($editable) {\\r\\n            $editable.html('');\\r\\n        };\\r\\n\\r\\n        this.html = function($editable, html) {\\r\\n            $editable.html(html);\\r\\n        };\\r\\n\\r\\n        this.getHTML = function($editable) {\\r\\n            return $editable.html();\\r\\n        };\\r\\n        /**\\r\\n         * @method currentStyle\\r\\n         *\\r\\n         * current style\\r\\n         *\\r\\n         * @param {Node} target\\r\\n         * @return {Boolean} false if range is no\\r\\n         */\\r\\n        this.currentStyle = function(target) {\\r\\n            var rng = range.create();\\r\\n            return rng ? rng.isOnEditable() && style.current(rng, target) : false;\\r\\n        };\\r\\n\\r\\n        var triggerOnBeforeChange = function($editable) {\\r\\n            var $holder = dom.makeLayoutInfo($editable).holder();\\r\\n            handler.bindCustomEvent(\\r\\n                $holder, $editable.data('callbacks'), 'before.command'\\r\\n            )($editable.html(), $editable);\\r\\n        };\\r\\n\\r\\n        var triggerOnChange = function($editable) {\\r\\n            var $holder = dom.makeLayoutInfo($editable).holder();\\r\\n            handler.bindCustomEvent(\\r\\n                $holder, $editable.data('callbacks'), 'change'\\r\\n            )($editable.html(), $editable);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method undo\\r\\n         * undo\\r\\n         * @param {jQuery} $editable\\r\\n         */\\r\\n        this.undo = function($editable) {\\r\\n            triggerOnBeforeChange($editable);\\r\\n            $editable.data('NoteHistory').undo();\\r\\n            triggerOnChange($editable);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method redo\\r\\n         * redo\\r\\n         * @param {jQuery} $editable\\r\\n         */\\r\\n        this.redo = function($editable) {\\r\\n            triggerOnBeforeChange($editable);\\r\\n            $editable.data('NoteHistory').redo();\\r\\n            triggerOnChange($editable);\\r\\n        };\\r\\n\\r\\n        var self = this;\\r\\n        /**\\r\\n         * @method beforeCommand\\r\\n         * before command\\r\\n         * @param {jQuery} $editable\\r\\n         */\\r\\n        var beforeCommand = this.beforeCommand = function($editable) {\\r\\n            triggerOnBeforeChange($editable);\\r\\n            // keep focus on editable before command execution\\r\\n            self.focus($editable);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method afterCommand\\r\\n         * after command\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {Boolean} isPreventTrigger\\r\\n         */\\r\\n        var afterCommand = this.afterCommand = function($editable, isPreventTrigger) {\\r\\n            $editable.data('NoteHistory').recordUndo();\\r\\n            if (!isPreventTrigger) {\\r\\n                triggerOnChange($editable);\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method bold\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {Mixed} value\\r\\n         */\\r\\n\\r\\n        /**\\r\\n         * @method italic\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {Mixed} value\\r\\n         */\\r\\n\\r\\n        /**\\r\\n         * @method underline\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {Mixed} value\\r\\n         */\\r\\n\\r\\n        /**\\r\\n         * @method strikethrough\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {Mixed} value\\r\\n         */\\r\\n\\r\\n        /**\\r\\n         * @method formatBlock\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {Mixed} value\\r\\n         */\\r\\n\\r\\n        /**\\r\\n         * @method superscript\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {Mixed} value\\r\\n         */\\r\\n\\r\\n        /**\\r\\n         * @method subscript\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {Mixed} value\\r\\n         */\\r\\n\\r\\n        /**\\r\\n         * @method justifyLeft\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {Mixed} value\\r\\n         */\\r\\n\\r\\n        /**\\r\\n         * @method justifyCenter\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {Mixed} value\\r\\n         */\\r\\n\\r\\n        /**\\r\\n         * @method justifyRight\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {Mixed} value\\r\\n         */\\r\\n\\r\\n        /**\\r\\n         * @method justifyFull\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {Mixed} value\\r\\n         */\\r\\n\\r\\n        /**\\r\\n         * @method formatBlock\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {Mixed} value\\r\\n         */\\r\\n\\r\\n        /**\\r\\n         * @method removeFormat\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {Mixed} value\\r\\n         */\\r\\n\\r\\n        /**\\r\\n         * @method backColor\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {Mixed} value\\r\\n         */\\r\\n\\r\\n        /**\\r\\n         * @method foreColor\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {Mixed} value\\r\\n         */\\r\\n\\r\\n        /**\\r\\n         * @method insertHorizontalRule\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {Mixed} value\\r\\n         */\\r\\n\\r\\n        /**\\r\\n         * @method fontName\\r\\n         *\\r\\n         * change font name\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {Mixed} value\\r\\n         */\\r\\n\\r\\n        /* jshint ignore:start */\\r\\n        // native commands(with execCommand), generate function for execCommand\\r\\n        // >>>>>>> CK\\r\\n        var commands = ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript',\\r\\n            'justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull',\\r\\n            'formatBlock', 'removeFormat',\\r\\n            'backColor', 'foreColor', 'fontName'];\\r\\n\\r\\n        for (var idx = 0, len = commands.length; idx < len; idx ++) {\\r\\n            this[commands[idx]] = (function(sCmd) {\\r\\n                return function($editable, value) {\\r\\n                    beforeCommand($editable);\\r\\n\\r\\n                    document.execCommand(sCmd, false, value);\\r\\n\\r\\n                    afterCommand($editable, true);\\r\\n                };\\r\\n            })(commands[idx]);\\r\\n        }\\r\\n        /* jshint ignore:end */\\r\\n\\r\\n        this.insertHorizontalRule = function() {\\r\\n            var hrNode = $('<div />');\\r\\n            hrNode.addClass('divider');\\r\\n\\r\\n            range.create().insertNode(hrNode[0]);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method tab\\r\\n         *\\r\\n         * handle tab key\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {Object} options\\r\\n         */\\r\\n        this.tab = function($editable, options) {\\r\\n            var rng = this.createRange($editable);\\r\\n            if (rng.isCollapsed() && rng.isOnCell()) {\\r\\n                table.tab(rng);\\r\\n            } else {\\r\\n                beforeCommand($editable);\\r\\n                typing.insertTab($editable, rng, options.tabsize);\\r\\n                afterCommand($editable);\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method untab\\r\\n         *\\r\\n         * handle shift+tab key\\r\\n         *\\r\\n         */\\r\\n        this.untab = function($editable) {\\r\\n            var rng = this.createRange($editable);\\r\\n            if (rng.isCollapsed() && rng.isOnCell()) {\\r\\n                table.tab(rng, true);\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method insertParagraph\\r\\n         *\\r\\n         * insert paragraph\\r\\n         *\\r\\n         * @param {Node} $editable\\r\\n         */\\r\\n        this.insertParagraph = function($editable) {\\r\\n            beforeCommand($editable);\\r\\n            typing.insertParagraph($editable);\\r\\n            afterCommand($editable);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method insertOrderedList\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         */\\r\\n        this.insertOrderedList = function($editable) {\\r\\n            beforeCommand($editable);\\r\\n            bullet.insertOrderedList($editable);\\r\\n            afterCommand($editable);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @param {jQuery} $editable\\r\\n         */\\r\\n        this.insertUnorderedList = function($editable) {\\r\\n            beforeCommand($editable);\\r\\n            bullet.insertUnorderedList($editable);\\r\\n            afterCommand($editable);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @param {jQuery} $editable\\r\\n         */\\r\\n        this.indent = function($editable) {\\r\\n            beforeCommand($editable);\\r\\n            bullet.indent($editable);\\r\\n            afterCommand($editable);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @param {jQuery} $editable\\r\\n         */\\r\\n        this.outdent = function($editable) {\\r\\n            beforeCommand($editable);\\r\\n            bullet.outdent($editable);\\r\\n            afterCommand($editable);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * insert image\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {String} sUrl\\r\\n         */\\r\\n        this.insertImage = function($editable, sUrl, filename) {\\r\\n            async.createImage(sUrl, filename).then(function($image) {\\r\\n                beforeCommand($editable);\\r\\n                $image.css({\\r\\n                    display: '',\\r\\n                    width: Math.min($editable.width(), $image.width())\\r\\n                });\\r\\n                range.create().insertNode($image[0]);\\r\\n                range.createFromNodeAfter($image[0]).select();\\r\\n                afterCommand($editable);\\r\\n            }).fail(function() {\\r\\n                var $holder = dom.makeLayoutInfo($editable).holder();\\r\\n                handler.bindCustomEvent(\\r\\n                    $holder, $editable.\";\n  builder.string += \"data('callbacks'), 'image.upload.error'\\r\\n                )();\\r\\n            });\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @method insertNode\\r\\n         * insert node\\r\\n         * @param {Node} $editable\\r\\n         * @param {Node} node\\r\\n         */\\r\\n        this.insertNode = function($editable, node) {\\r\\n            beforeCommand($editable);\\r\\n            range.create().insertNode(node);\\r\\n            range.createFromNodeAfter(node).select();\\r\\n            afterCommand($editable);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * insert text\\r\\n         * @param {Node} $editable\\r\\n         * @param {String} text\\r\\n         */\\r\\n        this.insertText = function($editable, text) {\\r\\n            beforeCommand($editable);\\r\\n            var textNode = range.create().insertNode(dom.createText(text));\\r\\n            range.create(textNode, dom.nodeLength(textNode)).select();\\r\\n            afterCommand($editable);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * paste HTML\\r\\n         * @param {Node} $editable\\r\\n         * @param {String} markup\\r\\n         */\\r\\n        this.pasteHTML = function($editable, markup) {\\r\\n            beforeCommand($editable);\\r\\n            var contents = range.create().pasteHTML(markup);\\r\\n            range.createFromNodeAfter(list.last(contents)).select();\\r\\n            afterCommand($editable);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * formatBlock\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {String} tagName\\r\\n         */\\r\\n        this.formatBlock = function($editable, tagName) {\\r\\n            beforeCommand($editable);\\r\\n            // [workaround] for MSIE, IE need `<`\\r\\n            tagName = agent.isMSIE ? '<' + tagName + '>' : tagName;\\r\\n            document.execCommand('FormatBlock', false, tagName);\\r\\n            afterCommand($editable);\\r\\n        };\\r\\n\\r\\n        this.formatPara = function($editable) {\\r\\n            beforeCommand($editable);\\r\\n            this.formatBlock($editable, 'P');\\r\\n            afterCommand($editable);\\r\\n        };\\r\\n\\r\\n        /* jshint ignore:start */\\r\\n        for (var idx = 1; idx <= 6; idx ++) {\\r\\n            this['formatH' + idx] = function(idx) {\\r\\n                return function($editable) {\\r\\n                    this.formatBlock($editable, 'H' + idx);\\r\\n                };\\r\\n            }(idx);\\r\\n        };\\r\\n        /* jshint ignore:end */\\r\\n\\r\\n        /**\\r\\n         * fontSize\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {String} value - px\\r\\n         */\\r\\n        this.fontSize = function($editable, value) {\\r\\n            var rng = range.create();\\r\\n            var isCollapsed = rng.isCollapsed();\\r\\n\\r\\n            if (isCollapsed) {\\r\\n                var spans = style.styleNodes(rng);\\r\\n                var firstSpan = list.head(spans);\\r\\n\\r\\n                $(spans).css({\\r\\n                    'font-size': value + 'px'\\r\\n                });\\r\\n\\r\\n                // [workaround] added styled bogus span for style\\r\\n                //  - also bogus character needed for cursor position\\r\\n                if (firstSpan && !dom.nodeLength(firstSpan)) {\\r\\n                    firstSpan.innerHTML = dom.ZERO_WIDTH_NBSP_CHAR;\\r\\n                    range.createFromNodeAfter(firstSpan.firstChild).select();\\r\\n                    $editable.data(KEY_BOGUS, firstSpan);\\r\\n                }\\r\\n            } else {\\r\\n                beforeCommand($editable);\\r\\n                $(style.styleNodes(rng)).css({\\r\\n                    'font-size': value + 'px'\\r\\n                });\\r\\n                afterCommand($editable);\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * remove bogus node and character\\r\\n         */\\r\\n        this.removeBogus = function($editable) {\\r\\n            var bogusNode = $editable.data(KEY_BOGUS);\\r\\n            if (!bogusNode) {\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            var textNode = list.find(list.from(bogusNode.childNodes), dom.isText);\\r\\n\\r\\n            var bogusCharIdx = textNode.nodeValue.indexOf(dom.ZERO_WIDTH_NBSP_CHAR);\\r\\n            if (bogusCharIdx !== -1) {\\r\\n                textNode.deleteData(bogusCharIdx, 1);\\r\\n            }\\r\\n\\r\\n            if (dom.isEmpty(bogusNode)) {\\r\\n                dom.remove(bogusNode);\\r\\n            }\\r\\n\\r\\n            $editable.removeData(KEY_BOGUS);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * lineHeight\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {String} value\\r\\n         */\\r\\n        this.lineHeight = function($editable, value) {\\r\\n            beforeCommand($editable);\\r\\n            style.stylePara(range.create(), {\\r\\n                lineHeight: value\\r\\n            });\\r\\n            afterCommand($editable);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * unlink\\r\\n         *\\r\\n         * @type command\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         */\\r\\n        this.unlink = function($editable) {\\r\\n            var rng = this.createRange($editable);\\r\\n            if (rng.isOnAnchor()) {\\r\\n                var anchor = dom.ancestor(rng.sc, dom.isAnchor);\\r\\n                rng = range.createFromNode(anchor);\\r\\n                rng.select();\\r\\n\\r\\n                beforeCommand($editable);\\r\\n                document.execCommand('unlink');\\r\\n                afterCommand($editable);\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * create link (command)\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {Object} linkInfo\\r\\n         * @param {Object} options\\r\\n         */\\r\\n        this.createLink = function($editable, linkInfo, options) {\\r\\n            var linkUrl = linkInfo.url;\\r\\n            var linkText = linkInfo.text;\\r\\n            var isNewWindow = linkInfo.newWindow;\\r\\n            var rng = linkInfo.range;\\r\\n            var isTextChanged = rng.toString() !== linkText;\\r\\n\\r\\n            beforeCommand($editable);\\r\\n\\r\\n            if (options.onCreateLink) {\\r\\n                linkUrl = options.onCreateLink(linkUrl);\\r\\n            }\\r\\n\\r\\n            var anchors = [];\\r\\n            if (isTextChanged) {\\r\\n                // Create a new link when text changed.\\r\\n                var anchor = rng.insertNode($('<A>' + linkText + '<\\/A>')[0]);\\r\\n                anchors.push(anchor);\\r\\n            } else {\\r\\n                anchors = style.styleNodes(rng, {\\r\\n                    nodeName: 'A',\\r\\n                    expandClosestSibling: true,\\r\\n                    onlyPartialContains: true\\r\\n                });\\r\\n            }\\r\\n\\r\\n            $.each(anchors, function(idx, anchor) {\\r\\n                $(anchor).attr('href', linkUrl);\\r\\n                if (isNewWindow) {\\r\\n                    $(anchor).attr('target', '_blank');\\r\\n                } else {\\r\\n                    $(anchor).removeAttr('target');\\r\\n                }\\r\\n            });\\r\\n\\r\\n            var startRange = range.createFromNodeBefore(list.head(anchors));\\r\\n            var startPoint = startRange.getStartPoint();\\r\\n            var endRange = range.createFromNodeAfter(list.last(anchors));\\r\\n            var endPoint = endRange.getEndPoint();\\r\\n\\r\\n            range.create(\\r\\n                startPoint.node,\\r\\n                startPoint.offset,\\r\\n                endPoint.node,\\r\\n                endPoint.offset\\r\\n            ).select();\\r\\n\\r\\n            afterCommand($editable);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns link info\\r\\n         *\\r\\n         * @return {Object}\\r\\n         * @return {WrappedRange} return.range\\r\\n         * @return {String} return.text\\r\\n         * @return {Boolean} [return.isNewWindow=true]\\r\\n         * @return {String} [return.url='']\\r\\n         */\\r\\n        this.getLinkInfo = function($editable) {\\r\\n            this.focus($editable);\\r\\n\\r\\n            var rng = range.create().expand(dom.isAnchor);\\r\\n\\r\\n            // Get the first anchor on range(for edit).\\r\\n            var $anchor = $(list.head(rng.nodes(dom.isAnchor)));\\r\\n\\r\\n            return {\\r\\n                range: rng,\\r\\n                text: rng.toString(),\\r\\n                isNewWindow: $anchor.length ? $anchor.attr('target') === '_blank' : false,\\r\\n                url: $anchor.length ? $anchor.attr('href') : ''\\r\\n            };\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * setting color\\r\\n         *\\r\\n         * @param {Node} $editable\\r\\n         * @param {Object} sObjColor  color code\\r\\n         * @param {String} sObjColor.foreColor foreground color\\r\\n         * @param {String} sObjColor.backColor background color\\r\\n         */\\r\\n        this.color = function($editable, sObjColor) {\\r\\n            var oColor = JSON.parse(sObjColor);\\r\\n            var foreColor = oColor.foreColor, backColor = oColor.backColor;\\r\\n\\r\\n            beforeCommand($editable);\\r\\n\\r\\n            if (foreColor) { document.execCommand('foreColor', false, foreColor); }\\r\\n            if (backColor) { document.execCommand('backColor', false, backColor); }\\r\\n\\r\\n            afterCommand($editable);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * insert Table\\r\\n         *\\r\\n         * @param {Node} $editable\\r\\n         * @param {String} sDim dimension of table (ex : \\\"5x5\\\")\\r\\n         */\\r\\n        this.insertTable = function($editable, sDim) {\\r\\n            var tOptions = sDim.split('x');\\r\\n            beforeCommand($editable);\\r\\n\\r\\n            var rng = range.create().deleteContents();\\r\\n            rng.insertNode(table.createTable(tOptions));\\r\\n            afterCommand($editable);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * float me\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {String} value\\r\\n         * @param {jQuery} $target\\r\\n         */\\r\\n        this.floatMe = function($editable, value, $target) {\\r\\n            beforeCommand($editable);\\r\\n            $target.css('float', value);\\r\\n            afterCommand($editable);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * change image shape\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {String} value css class\\r\\n         * @param {Node} $target\\r\\n         */\\r\\n        this.imageShape = function($editable, value, $target) {\\r\\n            beforeCommand($editable);\\r\\n\\r\\n            $target.removeClass('img-rounded img-circle img-thumbnail img-bordered');\\r\\n\\r\\n            if (value) {\\r\\n                $target.addClass(value);\\r\\n            }\\r\\n\\r\\n            afterCommand($editable);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * >>>>>>> CK\\r\\n         * change image class\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {String} value css class\\r\\n         * @param {Node} $target\\r\\n         */\\r\\n        this.imageClass = function($editable, value, $target) {\\r\\n            beforeCommand($editable);\\r\\n\\r\\n            if (value) {\\r\\n                if ($target.hasClass(value)) {\\r\\n                    $target.removeClass(value);\\r\\n                } else {\\r\\n                    $target.addClass(value);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            afterCommand($editable);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * resize overlay element\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {String} value\\r\\n         * @param {jQuery} $target - target element\\r\\n         */\\r\\n        this.resize = function($editable, value, $target) {\\r\\n            beforeCommand($editable);\\r\\n\\r\\n            $target.css({\\r\\n                width: value * 100 + '%',\\r\\n                height: ''\\r\\n            });\\r\\n\\r\\n            afterCommand($editable);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @param {Position} pos\\r\\n         * @param {jQuery} $target - target element\\r\\n         * @param {Boolean} [bKeepRatio] - keep ratio\\r\\n         */\\r\\n        this.resizeTo = function(pos, $target, bKeepRatio) {\\r\\n            var imageSize;\\r\\n            if (bKeepRatio) {\\r\\n                var newRatio = pos.y / pos.x;\\r\\n                var ratio = $target.data('ratio');\\r\\n                imageSize = {\\r\\n                    width: ratio > newRatio ? pos.x : pos.y / ratio,\\r\\n                    height: ratio > newRatio ? pos.x * ratio : pos.y\\r\\n                };\\r\\n            } else {\\r\\n                imageSize = {\\r\\n                    width: pos.x,\\r\\n                    height: pos.y\\r\\n                };\\r\\n            }\\r\\n\\r\\n            $target.css(imageSize);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * remove media object\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {String} value - dummy argument (for keep interface)\\r\\n         * @param {jQuery} $target - target element\\r\\n         */\\r\\n        this.removeMedia = function($editable, value, $target) {\\r\\n            beforeCommand($editable);\\r\\n            $target.detach();\\r\\n\\r\\n            handler.bindCustomEvent(\\r\\n                $(), $editable.data('callbacks'), 'media.delete'\\r\\n            )($target, $editable);\\r\\n\\r\\n            afterCommand($editable);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * set focus\\r\\n         *\\r\\n         * @param $editable\\r\\n         */\\r\\n        this.focus = function($editable) {\\r\\n            $editable.focus();\\r\\n\\r\\n            // [workaround] for firefox bug http://goo.gl/lVfAaI\\r\\n            if (agent.isFF && !range.create().isOnEditable()) {\\r\\n                range.createFromNode($editable[0])\\r\\n                    .normalize()\\r\\n                    .collapse()\\r\\n                    .select();\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns whether contents is empty or not.\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         * @return {Boolean}\\r\\n         */\\r\\n        this.isEmpty = function($editable) {\\r\\n            return dom.isEmpty($editable[0]) || dom.emptyPara === $editable.html();\\r\\n        };\\r\\n    };\\r\\n\\r\\n    /**\\r\\n     * @class module.Button\\r\\n     *\\r\\n     * Button\\r\\n     */\\r\\n    var Button = function() {\\r\\n        /**\\r\\n         * update button status\\r\\n         *\\r\\n         * @param {jQuery} $container\\r\\n         * @param {Object} styleInfo\\r\\n         */\\r\\n        this.update = function($container, styleInfo) {\\r\\n            /**\\r\\n             * handle dropdown's check mark (for fontname, fontsize, lineHeight).\\r\\n             * @param {jQuery} $btn\\r\\n             * @param {Number} value\\r\\n             */\\r\\n            var checkDropdownMenu = function($btn, value) {\\r\\n                $btn.find('.dropdown-menu li').each(function() {\\r\\n\\r\\n                    var div = $(this).children('div');\\r\\n                    var currentValue = div.data('value');\\r\\n\\r\\n                    // always compare string to avoid creating another func.\\r\\n                    if ((currentValue + '') === (value + '')) {\\r\\n                        div.children('i').removeClass('transparent');\\r\\n                    } else {\\r\\n                        div.children('i').addClass('transparent');\\r\\n                    }\\r\\n                });\\r\\n            };\\r\\n\\r\\n            /**\\r\\n             * update button state(active or not).\\r\\n             *\\r\\n             * @private\\r\\n             * @param {String} selector\\r\\n             * @param {Function} pred\\r\\n             */\\r\\n            var btnState = function(selector, pred) {\\r\\n                var $btn = $container.find(selector);\\r\\n\\r\\n                $btn.toggleClass('active', pred());\\r\\n            };\\r\\n\\r\\n            if (styleInfo.image) {\\r\\n                var $img = $(styleInfo.image);\\r\\n\\r\\n                btnState('.btn[data-event=\\\"imageClass\\\"][data-value=\\\"img-rounded\\\"]', function() {\\r\\n                    return $img.hasClass('img-rounded');\\r\\n                });\\r\\n                btnState('.btn[data-event=\\\"imageClass\\\"][data-value=\\\"img-circle\\\"]', function() {\\r\\n                    return $img.hasClass('img-circle');\\r\\n                });\\r\\n                btnState('.btn[data-event=\\\"imageClass\\\"][data-value=\\\"img-thumbnail\\\"]', function() {\\r\\n                    return $img.hasClass('img-thumbnail');\\r\\n                });\\r\\n                btnState('.btn[data-event=\\\"imageClass\\\"][data-value=\\\"img-bordered\\\"]', function() {\\r\\n                    return $img.hasClass('img-bordered');\\r\\n                });\\r\\n                btnState('.btn[data-event=\\\"imageShape\\\"]:not([data-value])', function() {\\r\\n                    return !$img.is('.img-rounded, .img-circle, .img-thumbnail, .img-bordered');\\r\\n                });\\r\\n\\r\\n                var imgFloat = $img.css('float');\\r\\n                btnState('.btn[data-event=\\\"floatMe\\\"][data-value=\\\"left\\\"]', function() {\\r\\n                    return imgFloat === 'left';\\r\\n                });\\r\\n                btnState('.btn[data-event=\\\"floatMe\\\"][data-value=\\\"right\\\"]', function() {\\r\\n                    return imgFloat === 'right';\\r\\n                });\\r\\n                btnState('.btn[data-event=\\\"floatMe\\\"][data-value=\\\"none\\\"]', function() {\\r\\n                    return imgFloat !== 'left' && imgFloat !== 'right';\\r\\n                });\\r\\n\\r\\n                var style = $img.attr('style');\\r\\n                btnState('.btn[data-event=\\\"resize\\\"][data-value=\\\"1\";\n  builder.string += \"\\\"]', function() {\\r\\n                    return !!/(^|\\\\s)(max-)?width\\\\s*:\\\\s*100%/.test(style);\\r\\n                });\\r\\n                btnState('.btn[data-event=\\\"resize\\\"][data-value=\\\"0.5\\\"]', function() {\\r\\n                    return !!/(^|\\\\s)(max-)?width\\\\s*:\\\\s*50%/.test(style);\\r\\n                });\\r\\n                btnState('.btn[data-event=\\\"resize\\\"][data-value=\\\"0.25\\\"]', function() {\\r\\n                    return !!/(^|\\\\s)(max-)?width\\\\s*:\\\\s*25%/.test(style);\\r\\n                });\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            // fontname\\r\\n            var $fontname = $container.find('.note-fontname[data-name=fontname]');\\r\\n            if ($fontname.length) {\\r\\n                var selectedFont = styleInfo['font-family'];\\r\\n                if (!!selectedFont) {\\r\\n\\r\\n                    var list = selectedFont.split(',');\\r\\n                    for (var i = 0, len = list.length; i < len; i++) {\\r\\n                        selectedFont = list[i].replace(/[\\\\'\\\\\\\"]/g, '').replace(/\\\\s+$/, '').replace(/^\\\\s+/, '');\\r\\n                        if (agent.isFontInstalled(selectedFont)) {\\r\\n                            break;\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    $fontname.find('.note-current-fontname').text(selectedFont);\\r\\n                    checkDropdownMenu($fontname, selectedFont);\\r\\n\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // fontsize\\r\\n            var $fontsize = $container.find('.note-fontsize[data-name=fontsize]');\\r\\n            $fontsize.find('.note-current-fontsize').text(styleInfo['font-size']);\\r\\n            checkDropdownMenu($fontsize, parseFloat(styleInfo['font-size']));\\r\\n\\r\\n            // lineheight\\r\\n            var $lineHeight = $container.find('.note-height[data-name=lineheight]');\\r\\n            checkDropdownMenu($lineHeight, parseFloat(styleInfo['line-height']));\\r\\n\\r\\n            btnState('.btn[data-event=\\\"bold\\\"]', function() {\\r\\n                return styleInfo['font-bold'] === 'bold';\\r\\n            });\\r\\n            btnState('.btn[data-event=\\\"italic\\\"]', function() {\\r\\n                return styleInfo['font-italic'] === 'italic';\\r\\n            });\\r\\n            btnState('.btn[data-event=\\\"underline\\\"]', function() {\\r\\n                return styleInfo['font-underline'] === 'underline';\\r\\n            });\\r\\n            btnState('.btn[data-event=\\\"strikethrough\\\"]', function() {\\r\\n                return styleInfo['font-strikethrough'] === 'strikethrough';\\r\\n            });\\r\\n            btnState('.btn[data-event=\\\"superscript\\\"]', function() {\\r\\n                return styleInfo['font-superscript'] === 'superscript';\\r\\n            });\\r\\n            btnState('.btn[data-event=\\\"subscript\\\"]', function() {\\r\\n                return styleInfo['font-subscript'] === 'subscript';\\r\\n            });\\r\\n            btnState('.btn[data-event=\\\"justifyLeft\\\"]', function() {\\r\\n                return styleInfo['text-align'] === 'left' || styleInfo['text-align'] === 'start';\\r\\n            });\\r\\n            btnState('.btn[data-event=\\\"justifyCenter\\\"]', function() {\\r\\n                return styleInfo['text-align'] === 'center';\\r\\n            });\\r\\n            btnState('.btn[data-event=\\\"justifyRight\\\"]', function() {\\r\\n                return styleInfo['text-align'] === 'right';\\r\\n            });\\r\\n            btnState('.btn[data-event=\\\"justifyFull\\\"]', function() {\\r\\n                return styleInfo['text-align'] === 'justify';\\r\\n            });\\r\\n            btnState('.btn[data-event=\\\"insertUnorderedList\\\"]', function() {\\r\\n                return styleInfo['list-style'] === 'unordered';\\r\\n            });\\r\\n            btnState('.btn[data-event=\\\"insertOrderedList\\\"]', function() {\\r\\n                return styleInfo['list-style'] === 'ordered';\\r\\n            });\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * update recent color\\r\\n         *\\r\\n         * @param {Node} button\\r\\n         * @param {String} eventName\\r\\n         * @param {Mixed} value\\r\\n         */\\r\\n        this.updateRecentColor = function(button, eventName, value) {\\r\\n            var $color = $(button).closest('.note-color');\\r\\n            var $recentColor = $color.find('.note-recent-color');\\r\\n            var colorInfo = JSON.parse($recentColor.attr('data-value'));\\r\\n            var sKey = eventName === 'backColor' ? 'background-color' : 'color';\\r\\n\\r\\n            colorInfo[eventName] = value;\\r\\n            $recentColor.attr('data-value', JSON.stringify(colorInfo));\\r\\n            $recentColor.css(sKey, value);\\r\\n        };\\r\\n    };\\r\\n\\r\\n    /**\\r\\n     * @class module.Toolbar\\r\\n     *\\r\\n     * Toolbar\\r\\n     */\\r\\n    var Toolbar = function() {\\r\\n        var button = new Button();\\r\\n\\r\\n        this.update = function($toolbar, styleInfo) {\\r\\n            button.update($toolbar, styleInfo);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @param {Node} button\\r\\n         * @param {String} eventName\\r\\n         * @param {String} value\\r\\n         */\\r\\n        this.updateRecentColor = function(buttonNode, eventName, value) {\\r\\n            button.updateRecentColor(buttonNode, eventName, value);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * activate buttons exclude codeview\\r\\n         * @param {jQuery} $toolbar\\r\\n         */\\r\\n        this.activate = function($toolbar) {\\r\\n            $toolbar.find('button, .btn')\\r\\n                .not('.btn[data-event=\\\"codeview\\\"]')\\r\\n                .removeClass('disabled');\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * deactivate buttons exclude codeview\\r\\n         * @param {jQuery} $toolbar\\r\\n         */\\r\\n        this.deactivate = function($toolbar) {\\r\\n            $toolbar.find('button, .btn')\\r\\n                .not('.btn[data-event=\\\"codeview\\\"]')\\r\\n                .addClass('disabled');\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @param {jQuery} $container\\r\\n         * @param {Boolean} [bFullscreen=false]\\r\\n         */\\r\\n        this.updateFullscreen = function($container, bFullscreen) {\\r\\n            var $btn = $container.find('.btn[data-event=\\\"fullscreen\\\"]');\\r\\n            $btn.toggleClass('active', bFullscreen);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @param {jQuery} $container\\r\\n         * @param {Boolean} [isCodeview=false]\\r\\n         */\\r\\n        this.updateCodeview = function($container, isCodeview) {\\r\\n            var $btn = $container.find('.btn[data-event=\\\"codeview\\\"]');\\r\\n            $btn.toggleClass('active', isCodeview);\\r\\n\\r\\n            if (isCodeview) {\\r\\n                this.deactivate($container);\\r\\n            } else {\\r\\n                this.activate($container);\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * get button in toolbar\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {String} name\\r\\n         * @return {jQuery}\\r\\n         */\\r\\n        this.get = function($editable, name) {\\r\\n            var $toolbar = dom.makeLayoutInfo($editable).toolbar();\\r\\n\\r\\n            return $toolbar.find('[data-name=' + name + ']');\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * set button state\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {String} name\\r\\n         * @param {Boolean} [isActive=true]\\r\\n         */\\r\\n        this.setButtonState = function($editable, name, isActive) {\\r\\n            isActive = (isActive === false) ? false : true;\\r\\n\\r\\n            var $button = this.get($editable, name);\\r\\n            $button.toggleClass('active', isActive);\\r\\n        };\\r\\n    };\\r\\n\\r\\n    var EDITABLE_PADDING = 24;\\r\\n\\r\\n    var Statusbar = function() {\\r\\n        var $document = $(document);\\r\\n\\r\\n        this.attach = function(layoutInfo, options) {\\r\\n            if (!options.disableResizeEditor) {\\r\\n                layoutInfo.statusbar().on('mousedown', hStatusbarMousedown);\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * `mousedown` event handler on statusbar\\r\\n         *\\r\\n         * @param {MouseEvent} event\\r\\n         */\\r\\n        var hStatusbarMousedown = function(event) {\\r\\n            event.preventDefault();\\r\\n            event.stopPropagation();\\r\\n\\r\\n            var $editable = dom.makeLayoutInfo(event.target).editable();\\r\\n            var editableTop = $editable.offset().top - $document.scrollTop();\\r\\n\\r\\n            var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target);\\r\\n            var options = layoutInfo.editor().data('options');\\r\\n\\r\\n            $document.on('mousemove', function(event) {\\r\\n                var nHeight = event.clientY - (editableTop + EDITABLE_PADDING);\\r\\n\\r\\n                nHeight = (options.minHeight > 0) ? Math.max(nHeight, options.minHeight) : nHeight;\\r\\n                nHeight = (options.maxHeight > 0) ? Math.min(nHeight, options.maxHeight) : nHeight;\\r\\n\\r\\n                $editable.height(nHeight);\\r\\n            }).one('mouseup', function() {\\r\\n                $document.off('mousemove');\\r\\n            });\\r\\n        };\\r\\n    };\\r\\n\\r\\n    /**\\r\\n     * @class module.Popover\\r\\n     *\\r\\n     * Popover (http://getbootstrap.com/javascript/#popovers)\\r\\n     *\\r\\n     */\\r\\n    var Popover = function() {\\r\\n        var button = new Button();\\r\\n\\r\\n        /**\\r\\n         * returns position from placeholder\\r\\n         *\\r\\n         * @private\\r\\n         * @param {Node} placeholder\\r\\n         * @param {Boolean} isAirMode\\r\\n         * @return {Object}\\r\\n         * @return {Number} return.left\\r\\n         * @return {Number} return.top\\r\\n         */\\r\\n        var posFromPlaceholder = function(placeholder, isAirMode) {\\r\\n            var $placeholder = $(placeholder);\\r\\n            var pos = isAirMode ? $placeholder.offset() : $placeholder.position();\\r\\n            var height = $placeholder.outerHeight(true); // include margin\\r\\n\\r\\n            // popover below placeholder.\\r\\n            return {\\r\\n                left: pos.left,\\r\\n                top: pos.top + height\\r\\n            };\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * show popover\\r\\n         *\\r\\n         * @private\\r\\n         * @param {jQuery} popover\\r\\n         * @param {Position} pos\\r\\n         */\\r\\n        var showPopover = function($popover, pos) {\\r\\n            $popover.css({\\r\\n                display: 'block',\\r\\n                left: pos.left,\\r\\n                top: pos.top\\r\\n            });\\r\\n        };\\r\\n\\r\\n        var PX_POPOVER_ARROW_OFFSET_X = 20;\\r\\n\\r\\n        /**\\r\\n         * update current state\\r\\n         * @param {jQuery} $popover - popover container\\r\\n         * @param {Object} styleInfo - style object\\r\\n         * @param {Boolean} isAirMode\\r\\n         */\\r\\n        this.update = function($popover, styleInfo, isAirMode) {\\r\\n            button.update($popover, styleInfo);\\r\\n\\r\\n            var $linkPopover = $popover.find('.note-link-popover');\\r\\n            if (styleInfo.anchor) {\\r\\n                var $anchor = $linkPopover.find('a');\\r\\n                var href = $(styleInfo.anchor).attr('href');\\r\\n                var target = $(styleInfo.anchor).attr('target');\\r\\n                $anchor.attr('href', href).html(href);\\r\\n                if (!target) {\\r\\n                    $anchor.removeAttr('target');\\r\\n                } else {\\r\\n                    $anchor.attr('target', '_blank');\\r\\n                }\\r\\n                showPopover($linkPopover, posFromPlaceholder(styleInfo.anchor, isAirMode));\\r\\n            } else {\\r\\n                $linkPopover.hide();\\r\\n            }\\r\\n\\r\\n            var $imagePopover = $popover.find('.note-image-popover');\\r\\n            if (styleInfo.image) {\\r\\n                showPopover($imagePopover, posFromPlaceholder(styleInfo.image, isAirMode));\\r\\n            } else {\\r\\n                $imagePopover.hide();\\r\\n            }\\r\\n\\r\\n            var $airPopover = $popover.find('.note-air-popover');\\r\\n            if (isAirMode && !styleInfo.range.isCollapsed()) {\\r\\n                var rect = list.last(styleInfo.range.getClientRects());\\r\\n                if (rect) {\\r\\n                    var bnd = func.rect2bnd(rect);\\r\\n                    showPopover($airPopover, {\\r\\n                        left: Math.max(bnd.left + bnd.width / 2 - PX_POPOVER_ARROW_OFFSET_X, 0),\\r\\n                        top: bnd.top + bnd.height\\r\\n                    });\\r\\n                }\\r\\n            } else {\\r\\n                $airPopover.hide();\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @param {Node} button\\r\\n         * @param {String} eventName\\r\\n         * @param {String} value\\r\\n         */\\r\\n        this.updateRecentColor = function(button, eventName, value) {\\r\\n            button.updateRecentColor(button, eventName, value);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * hide all popovers\\r\\n         * @param {jQuery} $popover - popover container\\r\\n         */\\r\\n        this.hide = function($popover) {\\r\\n            $popover.children().hide();\\r\\n        };\\r\\n    };\\r\\n\\r\\n    /**\\r\\n     * @class module.Handle\\r\\n     *\\r\\n     * Handle\\r\\n     */\\r\\n    var Handle = function(handler) {\\r\\n        var $document = $(document);\\r\\n\\r\\n        /**\\r\\n         * `mousedown` event handler on $handle\\r\\n         *  - controlSizing: resize image\\r\\n         *\\r\\n         * @param {MouseEvent} event\\r\\n         */\\r\\n        var hHandleMousedown = function(event) {\\r\\n            if (dom.isControlSizing(event.target)) {\\r\\n                event.preventDefault();\\r\\n                event.stopPropagation();\\r\\n\\r\\n                var layoutInfo = dom.makeLayoutInfo(event.target),\\r\\n                    $handle = layoutInfo.handle(),\\r\\n                    $popover = layoutInfo.popover(),\\r\\n                    $editable = layoutInfo.editable(),\\r\\n                    $editor = layoutInfo.editor();\\r\\n\\r\\n                var target = $handle.find('.note-control-selection').data('target'),\\r\\n                    $target = $(target), posStart = $target.offset(),\\r\\n                    scrollTop = $document.scrollTop();\\r\\n\\r\\n                var isAirMode = $editor.data('options').airMode;\\r\\n\\r\\n                $document.on('mousemove', function(event) {\\r\\n                    handler.invoke('editor.resizeTo', {\\r\\n                        x: event.clientX - posStart.left,\\r\\n                        y: event.clientY - (posStart.top - scrollTop)\\r\\n                    }, $target, !event.shiftKey);\\r\\n\\r\\n                    handler.invoke('handle.update', $handle, {image: target}, isAirMode);\\r\\n                    handler.invoke('popover.update', $popover, {image: target}, isAirMode);\\r\\n                }).one('mouseup', function() {\\r\\n                    $document.off('mousemove');\\r\\n                    handler.invoke('editor.afterCommand', $editable);\\r\\n                });\\r\\n\\r\\n                if (!$target.data('ratio')) { // original ratio.\\r\\n                    $target.data('ratio', $target.height() / $target.width());\\r\\n                }\\r\\n            }\\r\\n        };\\r\\n\\r\\n        this.attach = function(layoutInfo) {\\r\\n            layoutInfo.handle().on('mousedown', hHandleMousedown);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * update handle\\r\\n         * @param {jQuery} $handle\\r\\n         * @param {Object} styleInfo\\r\\n         * @param {Boolean} isAirMode\\r\\n         */\\r\\n        this.update = function($handle, styleInfo, isAirMode) {\\r\\n            var $selection = $handle.find('.note-control-selection');\\r\\n            if (styleInfo.image) {\\r\\n                var $image = $(styleInfo.image);\\r\\n                var pos = isAirMode ? $image.offset() : $image.position();\\r\\n\\r\\n                // include margin\\r\\n                var imageSize = {\\r\\n                    w: $image.outerWidth(true),\\r\\n                    h: $image.outerHeight(true)\\r\\n                };\\r\\n\\r\\n                $selection.css({\\r\\n                    display: 'block',\\r\\n                    left: pos.left,\\r\\n                    top: pos.top,\\r\\n                    width: imageSize.w,\\r\\n                    height: imageSize.h\\r\\n                }).data('target', styleInfo.image); // save current image element.\\r\\n                var sizingText = imageSize.w + 'x' + imageSize.h;\\r\\n                $selection.find('.note-control-selection-info').text(sizingText);\\r\\n            } else {\\r\\n                $selection.hide();\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * hide\\r\\n         *\\r\\n         * @param {jQuery} $handle\\r\\n         */\\r\\n        this.hide = function($handle) {\\r\\n            $handle.children().hide();\\r\\n        };\\r\\n    };\\r\\n\\r\\n    var Fullscreen = function(handler) {\\r\\n        var $window = $(window);\\r\\n        var $scrollbar = $('html, body');\\r\\n\\r\\n        /**\\r\\n         * toggle fullscreen\\r\\n         *\\r\\n         * @param {Object} layoutInfo\\r\\n         */\\r\\n        this.toggle = function(layoutInfo) {\\r\\n\\r\\n            var $editor = layoutInfo.editor(),\\r\\n                $toolbar = layoutInfo.toolbar(),\\r\\n                $editable = layoutInfo.editable(),\\r\\n                $codable = layoutInfo.codable();\\r\\n\\r\\n            var resize = function(size) {\\r\\n                $editable.css('height', size.h);\\r\\n        \";\n  builder.string += \"        $codable.css('height', size.h);\\r\\n                if ($codable.data('cmeditor')) {\\r\\n                    $codable.data('cmeditor').setsize(null, size.h);\\r\\n                }\\r\\n            };\\r\\n\\r\\n            $editor.toggleClass('fullscreen');\\r\\n            var isFullscreen = $editor.hasClass('fullscreen');\\r\\n            if (isFullscreen) {\\r\\n\\r\\n                $editable.data('orgheight', $editable.css('height'));\\r\\n\\r\\n                $window.on('resize', function() {\\r\\n                    resize({\\r\\n                        h: $window.height() - $toolbar.outerHeight()\\r\\n                    });\\r\\n                }).trigger('resize');\\r\\n\\r\\n                $scrollbar.css('overflow', 'hidden');\\r\\n                $toolbar.css('top', 0);\\r\\n            } else {\\r\\n                $window.off('resize');\\r\\n                resize({\\r\\n                    h: $editable.data('orgheight')\\r\\n                });\\r\\n                $scrollbar.css('overflow', 'visible');\\r\\n            }\\r\\n\\r\\n            handler.invoke('toolbar.updateFullscreen', $toolbar, isFullscreen);\\r\\n        };\\r\\n    };\\r\\n\\r\\n\\r\\n    var CodeMirror;\\r\\n    if (agent.hasCodeMirror) {\\r\\n        if (agent.isSupportAmd) {\\r\\n            require(['CodeMirror'], function(cm) {\\r\\n                CodeMirror = cm;\\r\\n            });\\r\\n        } else {\\r\\n            CodeMirror = window.CodeMirror;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @class Codeview\\r\\n     */\\r\\n    var Codeview = function(handler) {\\r\\n\\r\\n        this.sync = function(layoutInfo) {\\r\\n            var isCodeview = handler.invoke('codeview.isActivated', layoutInfo);\\r\\n            if (isCodeview && agent.hasCodeMirror) {\\r\\n                layoutInfo.codable().data('cmEditor').save();\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @param {Object} layoutInfo\\r\\n         * @return {Boolean}\\r\\n         */\\r\\n        this.isActivated = function(layoutInfo) {\\r\\n            var $editor = layoutInfo.editor();\\r\\n            return $editor.hasClass('codeview');\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * toggle codeview\\r\\n         *\\r\\n         * @param {Object} layoutInfo\\r\\n         */\\r\\n        this.toggle = function(layoutInfo) {\\r\\n            if (this.isActivated(layoutInfo)) {\\r\\n                this.deactivate(layoutInfo);\\r\\n            } else {\\r\\n                this.activate(layoutInfo);\\r\\n            }\\r\\n        };\\r\\n\\r\\n        //var originalValue;\\r\\n        /**\\r\\n         * activate code view\\r\\n         *\\r\\n         * @param {Object} layoutInfo\\r\\n         */\\r\\n        this.activate = function(layoutInfo) {\\r\\n            var $editor = layoutInfo.editor(),\\r\\n                $toolbar = layoutInfo.toolbar(),\\r\\n                $editable = layoutInfo.editable(),\\r\\n                $codable = layoutInfo.codable(),\\r\\n                $popover = layoutInfo.popover(),\\r\\n                $handle = layoutInfo.handle();\\r\\n\\r\\n            var options = $editor.data('options');\\r\\n            var codeString = dom.html($editable, false);\\r\\n\\r\\n            // >>>>>>> CK indentation function\\r\\n            function beautifyHTML(code, level, insideLastBlock, dictionary) {\\r\\n                var openTag = code.indexOf('<');\\r\\n                var closeTag = code.indexOf('>');\\r\\n                var chunk;\\r\\n\\r\\n                if (openTag === 0) {\\r\\n                    //first thing is a tag\\r\\n                    chunk = code.substring(0, closeTag + 1);\\r\\n                    code = code.substring(closeTag + 1);\\r\\n\\r\\n                    if (chunk.indexOf(\\\"<\\/\\\") === 0) {\\r\\n                        level--;\\r\\n                        nsideLastBlock = false;\\r\\n                    } else {\\r\\n                        if (insideLastBlock) {\\r\\n                            level++;\\r\\n                        }\\r\\n\\r\\n                        //check if current tag is a self closing tag (no indent next line in this case)\\r\\n                        var found = false;\\r\\n\\r\\n                        for (var i = 0; i < dictionary.length; i++) {\\r\\n                            if (chunk.indexOf(dictionary[i]) === 0) {\\r\\n                                found = true;\\r\\n                                break;\\r\\n                            }\\r\\n                        }\\r\\n                        if (!found) {\\r\\n                            insideLastBlock = true;\\r\\n                        } else {\\r\\n                            insideLastBlock = false;\\r\\n                        }\\r\\n                    }\\r\\n                } else {\\r\\n                    //first thing is content\\r\\n                    chunk = code.substring(0, openTag);\\r\\n                    code = code.substring(openTag);\\r\\n\\r\\n                    if (insideLastBlock) {\\r\\n                        level++;\\r\\n                    }\\r\\n                    insideLastBlock = false;\\r\\n                }\\r\\n                chunk = new Array(level + 1).join('    ') + chunk.trim();\\r\\n\\r\\n                if (code.length === 0) {\\r\\n                    return chunk;\\r\\n                }\\r\\n                return chunk + \\\"\\\\n\\\" + beautifyHTML(code.trim(), level, insideLastBlock, dictionary);\\r\\n            }\\r\\n\\r\\n            //originalValue = codeString;\\r\\n\\r\\n            var selfCloseTags = ['<img', '<br', '<hr'];\\r\\n            codeString = beautifyHTML(codeString, 0, false, selfCloseTags);\\r\\n            // CK end -----------------------\\r\\n\\r\\n            $codable.val(codeString);\\r\\n\\r\\n            var buttonHeight = $toolbar.find('.btn[data-event=codeview]').height();\\r\\n            var areaHeight = $(window).height() - buttonHeight;\\r\\n            $codable.height($editable.height());\\r\\n\\r\\n            handler.invoke('toolbar.updateCodeview', $toolbar, true);\\r\\n            handler.invoke('popover.hide', $popover);\\r\\n            handler.invoke('handle.hide', $handle);\\r\\n\\r\\n            $editor.addClass('codeview');\\r\\n\\r\\n            $codable.focus();\\r\\n\\r\\n            // activate CodeMirror as codable\\r\\n            if (agent.hasCodeMirror) {\\r\\n                var cmEditor = CodeMirror.fromTextArea($codable[0], options.codemirror);\\r\\n\\r\\n                // CodeMirror TernServer\\r\\n                if (options.codemirror.tern) {\\r\\n                    var server = new CodeMirror.TernServer(options.codemirror.tern);\\r\\n                    cmEditor.ternServer = server;\\r\\n                    cmEditor.on('cursorActivity', function(cm) {\\r\\n                        server.updateArgHints(cm);\\r\\n                    });\\r\\n                }\\r\\n\\r\\n                // CodeMirror hasn't Padding.\\r\\n                if ($editor.hasClass('fullscreen')) {\\r\\n                    cmEditor.setSize(null, areaHeight);\\r\\n                }\\r\\n                else {\\r\\n                    cmEditor.setSize(null, $editable.outerHeight());\\r\\n                }\\r\\n\\r\\n                $codable.data('cmEditor', cmEditor);\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * deactivate code view\\r\\n         *\\r\\n         * @param {Object} layoutInfo\\r\\n         */\\r\\n        this.deactivate = function(layoutInfo) {\\r\\n            var $holder = layoutInfo.holder(),\\r\\n                $editor = layoutInfo.editor(),\\r\\n                $toolbar = layoutInfo.toolbar(),\\r\\n                $editable = layoutInfo.editable(),\\r\\n                $codable = layoutInfo.codable();\\r\\n\\r\\n            var options = $editor.data('options');\\r\\n\\r\\n            // deactivate CodeMirror as codable\\r\\n            if (agent.hasCodeMirror) {\\r\\n                var cmEditor = $codable.data('cmEditor');\\r\\n                $codable.val(cmEditor.getValue());\\r\\n                cmEditor.toTextArea();\\r\\n            }\\r\\n\\r\\n            var value = dom.value($codable, options.prettifyHtml) || dom.emptyPara;\\r\\n            //var value = originalValue;\\r\\n            var isChange = $editable.html() !== value;\\r\\n\\r\\n            $editable.html(value);\\r\\n            $editable.height(options.height ? $codable.height() : 'auto');\\r\\n            $editor.removeClass('codeview');\\r\\n\\r\\n            if (isChange) {\\r\\n                handler.bindCustomEvent(\\r\\n                    $holder, $editable.data('callbacks'), 'change'\\r\\n                )($editable.html(), $editable);\\r\\n            }\\r\\n\\r\\n            $editable.focus();\\r\\n\\r\\n            handler.invoke('toolbar.updateCodeview', $toolbar, false);\\r\\n        };\\r\\n    };\\r\\n\\r\\n    var DragAndDrop = function(handler) {\\r\\n        var $document = $(document);\\r\\n\\r\\n        /**\\r\\n         * attach Drag and Drop Events\\r\\n         *\\r\\n         * @param {Object} layoutInfo - layout Informations\\r\\n         * @param {Object} options\\r\\n         */\\r\\n        this.attach = function(layoutInfo, options) {\\r\\n            if (options.airMode || options.disableDragAndDrop) {\\r\\n                // prevent default drop event\\r\\n                $document.on('drop', function(e) {\\r\\n                    e.preventDefault();\\r\\n                });\\r\\n            } else {\\r\\n                this.attachDragAndDropEvent(layoutInfo, options);\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * attach Drag and Drop Events\\r\\n         *\\r\\n         * @param {Object} layoutInfo - layout Informations\\r\\n         * @param {Object} options\\r\\n         */\\r\\n        this.attachDragAndDropEvent = function(layoutInfo, options) {\\r\\n            var collection = $(),\\r\\n                $editor = layoutInfo.editor(),\\r\\n                $dropzone = layoutInfo.dropzone(),\\r\\n                $dropzoneMessage = $dropzone.find('.note-dropzone-message');\\r\\n\\r\\n            // show dropzone on dragenter when dragging a object to document\\r\\n            // -but only if the editor is visible, i.e. has a positive width and height\\r\\n            $document.on('dragenter', function(e) {\\r\\n                var isCodeview = handler.invoke('codeview.isActivated', layoutInfo);\\r\\n                var hasEditorSize = $editor.width() > 0 && $editor.height() > 0;\\r\\n                if (!isCodeview && !collection.length && hasEditorSize) {\\r\\n                    $editor.addClass('dragover');\\r\\n                    $dropzone.width($editor.width());\\r\\n                    $dropzone.height($editor.height());\\r\\n                    $dropzoneMessage.text(options.langInfo.image.dragImageHere);\\r\\n                }\\r\\n                collection = collection.add(e.target);\\r\\n            }).on('dragleave', function(e) {\\r\\n                collection = collection.not(e.target);\\r\\n                if (!collection.length) {\\r\\n                    $editor.removeClass('dragover');\\r\\n                }\\r\\n            }).on('drop', function() {\\r\\n                collection = $();\\r\\n                $editor.removeClass('dragover');\\r\\n            });\\r\\n\\r\\n            // change dropzone's message on hover.\\r\\n            $dropzone.on('dragenter', function() {\\r\\n                $dropzone.addClass('hover');\\r\\n                $dropzoneMessage.text(options.langInfo.image.dropImage);\\r\\n            }).on('dragleave', function() {\\r\\n                $dropzone.removeClass('hover');\\r\\n                $dropzoneMessage.text(options.langInfo.image.dragImageHere);\\r\\n            });\\r\\n\\r\\n            // attach dropImage\\r\\n            $dropzone.on('drop', function(event) {\\r\\n\\r\\n                var dataTransfer = event.originalEvent.dataTransfer;\\r\\n                var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target);\\r\\n\\r\\n                if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {\\r\\n                    event.preventDefault();\\r\\n                    layoutInfo.editable().focus();\\r\\n                    handler.insertImages(layoutInfo, dataTransfer.files);\\r\\n                } else {\\r\\n                    var insertNodefunc = function() {\\r\\n                        layoutInfo.holder().materialnote('insertNode', this);\\r\\n                    };\\r\\n\\r\\n                    for (var i = 0, len = dataTransfer.types.length; i < len; i++) {\\r\\n                        var type = dataTransfer.types[i];\\r\\n                        var content = dataTransfer.getData(type);\\r\\n\\r\\n                        if (type.toLowerCase().indexOf('text') > -1) {\\r\\n                            layoutInfo.holder().materialnote('pasteHTML', content);\\r\\n                        } else {\\r\\n                            $(content).each(insertNodefunc);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }).on('dragover', false); // prevent default dragover event\\r\\n        };\\r\\n    };\\r\\n\\r\\n    var Clipboard = function(handler) {\\r\\n\\r\\n        var $paste;\\r\\n\\r\\n        this.attach = function(layoutInfo) {\\r\\n\\r\\n            if (window.clipboardData || agent.isFF) {\\r\\n                $paste = $('<div />').attr('contenteditable', true).css({\\r\\n                    position : 'absolute',\\r\\n                    left : -100000,\\r\\n                    'opacity' : 0\\r\\n                });\\r\\n                layoutInfo.editable().after($paste);\\r\\n                $paste.one('paste', hPasteClipboardImage);\\r\\n\\r\\n                layoutInfo.editable().on('keydown', function(e) {\\r\\n                    if (e.ctrlKey && e.keyCode === 86) {  // CTRL+V\\r\\n                        handler.invoke('saveRange', layoutInfo.editable());\\r\\n                        if ($paste) {\\r\\n                            $paste.focus();\\r\\n                        }\\r\\n                    }\\r\\n                });\\r\\n            }\\r\\n\\r\\n            layoutInfo.editable().on('paste', hPasteClipboardImage);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * paste clipboard image\\r\\n         *\\r\\n         * @param {Event} event\\r\\n         */\\r\\n        var hPasteClipboardImage = function(event) {\\r\\n\\r\\n            var clipboardData = event.originalEvent.clipboardData;\\r\\n            var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target);\\r\\n            var $editable = layoutInfo.editable();\\r\\n\\r\\n            if (!clipboardData || !clipboardData.items || !clipboardData.items.length) {\\r\\n\\r\\n                var callbacks = $editable.data('callbacks');\\r\\n                // only can run if it has onImageUpload method\\r\\n                if (!callbacks.onImageUpload) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                setTimeout(function() {\\r\\n                    if (!$paste) {\\r\\n                        return;\\r\\n                    }\\r\\n\\r\\n                    var imgNode = $paste[0].firstChild;\\r\\n                    if (!imgNode) {\\r\\n                        return;\\r\\n                    }\\r\\n\\r\\n                    handler.invoke('restoreRange', $editable);\\r\\n                    if (!dom.isImg(imgNode)) {\\r\\n                        handler.invoke('pasteHTML', $editable, $paste.html());\\r\\n                    } else {\\r\\n                        var datauri = imgNode.src;\\r\\n\\r\\n                        var data = atob(datauri.split(',')[1]);\\r\\n                        var array = new Uint8Array(data.length);\\r\\n                        for (var i = 0; i < data.length; i++) {\\r\\n                            array[i] = data.charCodeAt(i);\\r\\n                        }\\r\\n\\r\\n                        var blob = new Blob([array], { type : 'image/png' });\\r\\n                        blob.name = 'clipboard.png';\\r\\n                        handler.invoke('focus', $editable);\\r\\n                        handler.insertImages(layoutInfo, [blob]);\\r\\n                    }\\r\\n\\r\\n                    $paste.remove();\\r\\n\\r\\n                }, 0);\\r\\n\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            var item = list.head(clipboardData.items);\\r\\n            var isClipboardImage = item.kind === 'file' && item.type.indexOf('image/') !== -1;\\r\\n\\r\\n            if (isClipboardImage) {\\r\\n                handler.insertImages(layoutInfo, [item.getAsFile()]);\\r\\n            }\\r\\n\\r\\n            handler.invoke('editor.afterCommand', $editable);\\r\\n        };\\r\\n    };\\r\\n\\r\\n    var LinkDialog = function(handler) {\\r\\n\\r\\n        /**\\r\\n         * toggle button status\\r\\n         *\\r\\n         * @private\\r\\n         * @param {jQuery} $btn\\r\\n         * @param {Boolean} isEnable\\r\\n         */\\r\\n        var toggleBtn = function($btn, isEnable) {\\r\\n            $btn.toggleClass('disabled', !isEnable);\\r\\n            $btn.attr('disabled', !isEnable);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * bind enter key\\r\\n         *\\r\\n         * @private\\r\\n         * @param {jQuery} $input\\r\\n         * @param {jQuery} $btn\\r\\n         */\\r\\n        var bindEnterKey = function($input, $btn) {\\r\\n            $input.on('keypress', function(event) {\\r\\n                if (event.keyCode === key.code.ENTER) {\\r\\n                    $btn.trigger('click');\\r\\n                }\\r\\n            });\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * Show link dialog and set event handlers on dialog controls.\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {jQuery} $dialog\\r\\n         * @param {Object} linkInfo\\r\\n         * @return {Promise}\\r\\n         */\\r\\n        this.showLinkDialog = function($editable, $dialo\";\n  builder.string += \"g, linkInfo) {\\r\\n            return $.Deferred(function(deferred) {\\r\\n                var $linkDialog = $dialog.find('.note-link-dialog');\\r\\n                var $linkText = $linkDialog.find('.note-link-text'),\\r\\n                    $linkTextLabel = $linkText.next('label'),\\r\\n                    $linkUrl = $linkDialog.find('.note-link-url'),\\r\\n                    $linkBtn = $linkDialog.find('.note-link-btn'),\\r\\n                    $closeBtn = $linkDialog.find('.btnClose');\\r\\n                var $openInNewWindow = $linkDialog.find('input[type=checkbox]');\\r\\n\\r\\n                $linkDialog.openModal();\\r\\n                $linkText.val(linkInfo.text);\\r\\n                if (linkInfo.text.length > 0) $linkTextLabel.addClass('active');\\r\\n\\r\\n                $linkText.on('keyup', function() {\\r\\n                    toggleBtn($linkBtn, $linkText.val() && $linkUrl.val());\\r\\n                    // if linktext was modified by keyup,\\r\\n                    // stop cloning text from linkUrl\\r\\n                    linkInfo.text = $linkText.val();\\r\\n                });\\r\\n\\r\\n                $closeBtn.click(function(event) {\\r\\n                    event.preventDefault();\\r\\n\\r\\n                    $linkDialog.closeModal();\\r\\n                });\\r\\n\\r\\n                // if no url was given, copy text to url\\r\\n                if (!linkInfo.url) {\\r\\n                    linkInfo.url = linkInfo.text || 'http://';\\r\\n                    toggleBtn($linkBtn, linkInfo.text);\\r\\n                }\\r\\n\\r\\n                $linkUrl.on('keyup', function() {\\r\\n                    toggleBtn($linkBtn, $linkText.val() && $linkUrl.val());\\r\\n                    // display same link on `Text to display` input\\r\\n                    // when create a new link\\r\\n                    if (!linkInfo.text) {\\r\\n                        $linkTextLabel.addClass('active');\\r\\n                        $linkText.val($linkUrl.val());\\r\\n                    }\\r\\n                }).val(linkInfo.url).trigger('focus').trigger('select');\\r\\n\\r\\n                bindEnterKey($linkUrl, $linkBtn);\\r\\n                bindEnterKey($linkText, $linkBtn);\\r\\n\\r\\n                $openInNewWindow.prop('checked', linkInfo.newWindow);\\r\\n\\r\\n                $linkBtn.one('click', function(event) {\\r\\n                    event.preventDefault();\\r\\n\\r\\n                    deferred.resolve({\\r\\n                        range: linkInfo.range,\\r\\n                        url: $linkUrl.val(),\\r\\n                        text: $linkText.val(),\\r\\n                        newWindow: $openInNewWindow.is(':checked')\\r\\n                    });\\r\\n\\r\\n                    $('.note-link-text').val('');\\r\\n                    $('.note-link-text').next('label').removeClass('active');\\r\\n                    $('.note-link-url').val('');\\r\\n                    $linkDialog.closeModal();\\r\\n                });\\r\\n            }).promise();\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @param {Object} layoutInfo\\r\\n         */\\r\\n        this.show = function(layoutInfo) {\\r\\n            var $editor = layoutInfo.editor(),\\r\\n                $dialog = layoutInfo.dialog(),\\r\\n                $editable = layoutInfo.editable(),\\r\\n                $popover = layoutInfo.popover(),\\r\\n                linkInfo = handler.invoke('editor.getLinkInfo', $editable);\\r\\n\\r\\n            var options = $editor.data('options');\\r\\n\\r\\n            handler.invoke('editor.saveRange', $editable);\\r\\n            this.showLinkDialog($editable, $dialog, linkInfo).then(function(linkInfo) {\\r\\n                handler.invoke('editor.restoreRange', $editable);\\r\\n                handler.invoke('editor.createLink', $editable, linkInfo, options);\\r\\n                // hide popover after creating link\\r\\n                handler.invoke('popover.hide', $popover);\\r\\n            }).fail(function() {\\r\\n                handler.invoke('editor.restoreRange', $editable);\\r\\n            });\\r\\n        };\\r\\n    };\\r\\n\\r\\n    var ImageDialog = function(handler) {\\r\\n        /**\\r\\n         * toggle button status\\r\\n         *\\r\\n         * @private\\r\\n         * @param {jQuery} $btn\\r\\n         * @param {Boolean} isEnable\\r\\n         */\\r\\n        var toggleBtn = function($btn, isEnable) {\\r\\n            $btn.toggleClass('disabled', !isEnable);\\r\\n            $btn.attr('disabled', !isEnable);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * bind enter key\\r\\n         *\\r\\n         * @private\\r\\n         * @param {jQuery} $input\\r\\n         * @param {jQuery} $btn\\r\\n         */\\r\\n        var bindEnterKey = function($input, $btn) {\\r\\n            $input.on('keypress', function(event) {\\r\\n                if (event.keyCode === key.code.ENTER) {\\r\\n                    $btn.trigger('click');\\r\\n                }\\r\\n            });\\r\\n        };\\r\\n\\r\\n        this.show = function(layoutInfo) {\\r\\n            var $dialog = layoutInfo.dialog(),\\r\\n                $editable = layoutInfo.editable();\\r\\n\\r\\n            handler.invoke('editor.saveRange', $editable);\\r\\n            this.showImageDialog($editable, $dialog).then(function(data) {\\r\\n                handler.invoke('editor.restoreRange', $editable);\\r\\n\\r\\n                if (typeof data === 'string') {\\r\\n                    // image url\\r\\n                    handler.invoke('editor.insertImage', $editable, data);\\r\\n                } else {\\r\\n                    // array of files\\r\\n                    handler.insertImages(layoutInfo, data);\\r\\n                }\\r\\n            }).fail(function() {\\r\\n                handler.invoke('editor.restoreRange', $editable);\\r\\n            });\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * show image dialog\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {jQuery} $dialog\\r\\n         * @return {Promise}\\r\\n         */\\r\\n        this.showImageDialog = function($editable, $dialog) {\\r\\n            return $.Deferred(function(deferred) {\\r\\n                var $imageDialog = $dialog.find('.note-image-dialog');\\r\\n                var $imageInput = $dialog.find('.note-image-input'),\\r\\n                    $imageUrl = $dialog.find('.note-image-url'),\\r\\n                    $imageBtn = $dialog.find('.note-image-btn'),\\r\\n                    $closeBtn = $imageDialog.find('.btnClose');\\r\\n\\r\\n                $imageDialog.openModal();\\r\\n                // Cloning imageInput to clear element.\\r\\n                $imageInput.replaceWith($imageInput.clone()\\r\\n                    .on('change', function() {\\r\\n                        deferred.resolve(this.files || this.value);\\r\\n                        $imageUrl.val('');\\r\\n                        $imageDialog.closeModal();\\r\\n                        deferred.resolve();\\r\\n                    })\\r\\n                    .val('')\\r\\n                );\\r\\n\\r\\n                $imageBtn.click(function(event) {\\r\\n                    event.preventDefault();\\r\\n\\r\\n                    deferred.resolve($imageUrl.val());\\r\\n                    $imageUrl.val('');\\r\\n                    $imageDialog.closeModal();\\r\\n                    deferred.resolve();\\r\\n                });\\r\\n\\r\\n                $closeBtn.click(function(event) {\\r\\n                    event.preventDefault();\\r\\n\\r\\n                    $imageDialog.closeModal();\\r\\n                });\\r\\n\\r\\n                $imageUrl.on('keyup paste', function(event) {\\r\\n                    var url;\\r\\n\\r\\n                    if (event.type === 'paste') {\\r\\n                        url = event.originalEvent.clipboardData.getData('text');\\r\\n                    } else {\\r\\n                        url = $imageUrl.val();\\r\\n                    }\\r\\n                    toggleBtn($imageBtn, url);\\r\\n                });\\r\\n\\r\\n                bindEnterKey($imageUrl, $imageBtn);\\r\\n            });\\r\\n        };\\r\\n    };\\r\\n\\r\\n    var HelpDialog = function(handler) {\\r\\n        /**\\r\\n         * show help dialog\\r\\n         *\\r\\n         * @param {jQuery} $editable\\r\\n         * @param {jQuery} $dialog\\r\\n         * @return {Promise}\\r\\n         */\\r\\n        this.showHelpDialog = function($editable, $dialog) {\\r\\n            return $.Deferred(function(deferred) {\\r\\n                var $helpDialog = $dialog.find('.note-help-dialog');\\r\\n\\r\\n                $helpDialog.openModal();\\r\\n                deferred.resolve();\\r\\n            }).promise();\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @param {Object} layoutInfo\\r\\n         */\\r\\n        this.show = function(layoutInfo) {\\r\\n            var $dialog = layoutInfo.dialog(),\\r\\n                $editable = layoutInfo.editable();\\r\\n\\r\\n            handler.invoke('editor.saveRange', $editable, true);\\r\\n            this.showHelpDialog($editable, $dialog).then(function() {\\r\\n                handler.invoke('editor.restoreRange', $editable);\\r\\n            });\\r\\n        };\\r\\n    };\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @class EventHandler\\r\\n     *\\r\\n     * EventHandler\\r\\n     *  - TODO: new instance per a editor\\r\\n     */\\r\\n    var EventHandler = function() {\\r\\n        /**\\r\\n         * Modules\\r\\n         */\\r\\n        var modules = this.modules = {\\r\\n            editor: new Editor(this),\\r\\n            toolbar: new Toolbar(this),\\r\\n            statusbar: new Statusbar(this),\\r\\n            popover: new Popover(this),\\r\\n            handle: new Handle(this),\\r\\n            fullscreen: new Fullscreen(this),\\r\\n            codeview: new Codeview(this),\\r\\n            dragAndDrop: new DragAndDrop(this),\\r\\n            clipboard: new Clipboard(this),\\r\\n            linkDialog: new LinkDialog(this),\\r\\n            imageDialog: new ImageDialog(this),\\r\\n            helpDialog: new HelpDialog(this)\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * invoke module's method\\r\\n         *\\r\\n         * @param {String} moduleAndMethod - ex) 'editor.redo'\\r\\n         * @param {...*} arguments - arguments of method\\r\\n         * @return {*}\\r\\n         */\\r\\n        this.invoke = function() {\\r\\n            var moduleAndMethod = list.head(list.from(arguments));\\r\\n            var args = list.tail(list.from(arguments));\\r\\n\\r\\n            var splits = moduleAndMethod.split('.');\\r\\n            var hasSeparator = splits.length > 1;\\r\\n            var moduleName = hasSeparator && list.head(splits);\\r\\n            var methodName = hasSeparator ? list.last(splits) : list.head(splits);\\r\\n\\r\\n            var module = this.getModule(moduleName);\\r\\n            var method = module[methodName];\\r\\n\\r\\n            return method && method.apply(module, args);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns module\\r\\n         *\\r\\n         * @param {String} moduleName - name of module\\r\\n         * @return {Module} - defaults is editor\\r\\n         */\\r\\n        this.getModule = function(moduleName) {\\r\\n            return this.modules[moduleName] || this.modules.editor;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * @param {jQuery} $holder\\r\\n         * @param {Object} callbacks\\r\\n         * @param {String} eventNamespace\\r\\n         * @returns {Function}\\r\\n         */\\r\\n        var bindCustomEvent = this.bindCustomEvent = function($holder, callbacks, eventNamespace) {\\r\\n            return function() {\\r\\n                var callback = callbacks[func.namespaceToCamel(eventNamespace, 'on')];\\r\\n                if (callback) {\\r\\n                    callback.apply($holder[0], arguments);\\r\\n                }\\r\\n                return $holder.trigger('materialnote.' + eventNamespace, arguments);\\r\\n            };\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * insert Images from file array.\\r\\n         *\\r\\n         * @private\\r\\n         * @param {Object} layoutInfo\\r\\n         * @param {File[]} files\\r\\n         */\\r\\n        this.insertImages = function(layoutInfo, files) {\\r\\n            var $editor = layoutInfo.editor(),\\r\\n                $editable = layoutInfo.editable(),\\r\\n                $holder = layoutInfo.holder();\\r\\n\\r\\n            var callbacks = $editable.data('callbacks');\\r\\n            var options = $editor.data('options');\\r\\n\\r\\n            // If onImageUpload options setted\\r\\n            if (callbacks.onImageUpload) {\\r\\n                bindCustomEvent($holder, callbacks, 'image.upload')(files);\\r\\n                // else insert Image as dataURL\\r\\n            } else {\\r\\n                $.each(files, function(idx, file) {\\r\\n                    var filename = file.name;\\r\\n                    if (options.maximumImageFileSize && options.maximumImageFileSize < file.size) {\\r\\n                        bindCustomEvent($holder, callbacks, 'image.upload.error')(options.langInfo.image.maximumFileSizeError);\\r\\n                    } else {\\r\\n                        async.readFileAsDataURL(file).then(function(sDataURL) {\\r\\n                            modules.editor.insertImage($editable, sDataURL, filename);\\r\\n                        }).fail(function() {\\r\\n                            bindCustomEvent($holder, callbacks, 'image.upload.error')(options.langInfo.image.maximumFileSizeError);\\r\\n                        });\\r\\n                    }\\r\\n                });\\r\\n            }\\r\\n        };\\r\\n\\r\\n        var commands = {\\r\\n            /**\\r\\n             * @param {Object} layoutInfo\\r\\n             */\\r\\n            showLinkDialog: function(layoutInfo) {\\r\\n                modules.linkDialog.show(layoutInfo);\\r\\n            },\\r\\n\\r\\n            /**\\r\\n             * @param {Object} layoutInfo\\r\\n             */\\r\\n            showImageDialog: function(layoutInfo) {\\r\\n                modules.imageDialog.show(layoutInfo);\\r\\n            },\\r\\n\\r\\n            /**\\r\\n             * @param {Object} layoutInfo\\r\\n             */\\r\\n            showHelpDialog: function(layoutInfo) {\\r\\n                modules.helpDialog.show(layoutInfo);\\r\\n            },\\r\\n\\r\\n            /**\\r\\n             * @param {Object} layoutInfo\\r\\n             */\\r\\n            fullscreen: function(layoutInfo) {\\r\\n                modules.fullscreen.toggle(layoutInfo);\\r\\n            },\\r\\n\\r\\n            /**\\r\\n             * @param {Object} layoutInfo\\r\\n             */\\r\\n            codeview: function(layoutInfo) {\\r\\n                modules.codeview.toggle(layoutInfo);\\r\\n            }\\r\\n        };\\r\\n\\r\\n        var hMousedown = function(event) {\\r\\n            //preventDefault Selection for FF, IE8+\\r\\n            if (dom.isImg(event.target)) {\\r\\n                event.preventDefault();\\r\\n            }\\r\\n        };\\r\\n\\r\\n        var hKeyupAndMouseup = function(event) {\\r\\n            var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target);\\r\\n            modules.editor.removeBogus(layoutInfo.editable());\\r\\n            hToolbarAndPopoverUpdate(event);\\r\\n        };\\r\\n\\r\\n        var hToolbarAndPopoverUpdate = function(event) {\\r\\n            // delay for range after mouseup\\r\\n            setTimeout(function() {\\r\\n                var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target);\\r\\n                var styleInfo = modules.editor.currentStyle(event.target);\\r\\n                if (!styleInfo) { return; }\\r\\n\\r\\n                var isAirMode = layoutInfo.editor().data('options').airMode;\\r\\n                if (!isAirMode) {\\r\\n                    modules.toolbar.update(layoutInfo.toolbar(), styleInfo);\\r\\n                }\\r\\n\\r\\n                modules.popover.update(layoutInfo.popover(), styleInfo, isAirMode);\\r\\n                modules.handle.update(layoutInfo.handle(), styleInfo, isAirMode);\\r\\n            }, 0);\\r\\n        };\\r\\n\\r\\n        var hScroll = function(event) {\\r\\n            var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target);\\r\\n            //hide popover and handle when scrolled\\r\\n            modules.popover.hide(layoutInfo.popover());\\r\\n            modules.handle.hide(layoutInfo.handle());\\r\\n        };\\r\\n\\r\\n        var hToolbarAndPopoverMousedown = function(event) {\\r\\n            // prevent default event when insertTable (FF, Webkit)\\r\\n            var $btn = $(event.target).closest('[data-event]');\\r\\n            if ($btn.length) {\\r\\n                event.preventDefault();\\r\\n            }\\r\\n        };\\r\\n\\r\\n        var hToolbarAndPopoverClick = function(event) {\\r\\n            var $btn = $(event.target).closest('[data-event]');\\r\\n\\r\\n            if ($btn.length) {\\r\\n                var eventName = $btn.attr('data-event'),\\r\\n                    value = $btn.attr('data-value'),\\r\\n                    hide = $btn.attr('data-hide');\\r\\n\\r\\n                var layoutInfo = dom.makeLayoutInfo(event.target);\\r\\n\\r\\n                // before command: detect control selection element($target)\\r\\n                var $target;\\r\\n                if ($.inArray(eventName, ['resize', 'floatMe', 'removeMedia', 'imageShape', 'imageClass']) !== -1) {\\r\\n                    var $selection = layoutInfo.handle().find('.note-control-selection');\\r\\n                    $target = $($selection.data('target'));\\r\\n                }\\r\\n\\r\\n                // If requested, hide the popover when the button is clicked.\\r\\n                // Useful for things like showHelpDialog.\\r\\n                if (hide) {\\r\\n                    $btn.parents('.popove\";\n  builder.string += \"r').hide();\\r\\n                }\\r\\n\\r\\n                if ($.isFunction($.materialnote.pluginEvents[eventName])) {\\r\\n                    $.materialnote.pluginEvents[eventName](event, modules.editor, layoutInfo, value);\\r\\n                } else if (modules.editor[eventName]) { // on command\\r\\n                    var $editable = layoutInfo.editable();\\r\\n                    $editable.focus();\\r\\n                    modules.editor[eventName]($editable, value, $target);\\r\\n                    event.preventDefault();\\r\\n                } else if (commands[eventName]) {\\r\\n                    commands[eventName].call(this, layoutInfo);\\r\\n                    event.preventDefault();\\r\\n                }\\r\\n\\r\\n                // after command\\r\\n                if ($.inArray(eventName, ['backColor', 'foreColor']) !== -1) {\\r\\n                    var options = layoutInfo.editor().data('options', options);\\r\\n                    var module = options.airMode ? modules.popover : modules.toolbar;\\r\\n                    module.updateRecentColor(list.head($btn), eventName, value);\\r\\n                }\\r\\n\\r\\n                hToolbarAndPopoverUpdate(event);\\r\\n            }\\r\\n        };\\r\\n\\r\\n        var gridUnit = 26;\\r\\n        var hDimensionPickerMove = function(event, options) {\\r\\n            var $picker = $(event.target.parentNode); // target is mousecatcher\\r\\n            var $dropdown = $picker.parent();\\r\\n            var $dimensionDisplay = $picker.next();\\r\\n            var $catcher = $picker.find('.note-dimension-picker-mousecatcher');\\r\\n            var $highlighted = $picker.find('.note-dimension-picker-highlighted');\\r\\n            var $unhighlighted = $picker.find('.note-dimension-picker-unhighlighted');\\r\\n            var $hoverableOption = $dropdown.find(\\\"[id$='-hoverable']\\\");\\r\\n            var $borderedOption = $dropdown.find(\\\"[id$='-bordered']\\\");\\r\\n            var $stripedOption = $dropdown.find(\\\"[id$='-striped']\\\");\\r\\n            var $responsiveOption = $dropdown.find(\\\"[id$='-responsive']\\\");\\r\\n\\r\\n            var posOffset;\\r\\n            // HTML5 with jQuery - e.offsetX is undefined in Firefox\\r\\n            if (event.offsetX === undefined) {\\r\\n                var posCatcher = $(event.target).offset();\\r\\n\\r\\n                posOffset = {\\r\\n                    x: event.pageX - posCatcher.left,\\r\\n                    y: event.pageY - posCatcher.top\\r\\n                };\\r\\n            } else {\\r\\n                posOffset = {\\r\\n                    x: event.offsetX,\\r\\n                    y: event.offsetY\\r\\n                };\\r\\n            }\\r\\n\\r\\n            var dim = {\\r\\n                c: Math.ceil(posOffset.x / gridUnit) || 1,\\r\\n                r: Math.ceil(posOffset.y / gridUnit) || 1\\r\\n            };\\r\\n\\r\\n            var tableOptions = [];\\r\\n            if ($hoverableOption.is(':checked')) tableOptions.push('hoverable');\\r\\n            if ($borderedOption.is(':checked')) tableOptions.push('bordered');\\r\\n            if ($stripedOption.is(':checked')) tableOptions.push('striped');\\r\\n            if ($responsiveOption.is(':checked')) tableOptions.push('responsive-table');\\r\\n\\r\\n            $highlighted.css({ width: (dim.c * gridUnit) + 'px', height: (dim.r * gridUnit) + 'px' });\\r\\n            $catcher.attr('data-value', dim.c + 'x' + dim.r + 'x' + tableOptions.join('x'));\\r\\n\\r\\n            //if (3 < dim.c && dim.c < options.insertTableMaxSize.col) {\\r\\n            $unhighlighted.css({ width: (options.insertTableMaxSize * gridUnit) + 'px'});\\r\\n            //}\\r\\n\\r\\n            if (3 < dim.r && dim.r < options.insertTableMaxSize.row) {\\r\\n                $unhighlighted.css({ height: ((dim.r + 1) * gridUnit) + 'px'});\\r\\n            }\\r\\n\\r\\n            $dimensionDisplay.html(dim.c + ' x ' + dim.r);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * bind KeyMap on keydown\\r\\n         *\\r\\n         * @param {Object} layoutInfo\\r\\n         * @param {Object} keyMap\\r\\n         */\\r\\n        this.bindKeyMap = function(layoutInfo, keyMap) {\\r\\n            var $editor = layoutInfo.editor();\\r\\n            var $editable = layoutInfo.editable();\\r\\n\\r\\n            $editable.on('keydown', function(event) {\\r\\n                var keys = [];\\r\\n\\r\\n                // modifier\\r\\n                if (event.metaKey) { keys.push('CMD'); }\\r\\n                if (event.ctrlKey && !event.altKey) { keys.push('CTRL'); }\\r\\n                if (event.shiftKey) { keys.push('SHIFT'); }\\r\\n\\r\\n                // keycode\\r\\n                var keyName = key.nameFromCode[event.keyCode];\\r\\n                if (keyName) {\\r\\n                    keys.push(keyName);\\r\\n                }\\r\\n\\r\\n                var pluginEvent;\\r\\n                var keyString = keys.join('+');\\r\\n                var eventName = keyMap[keyString];\\r\\n                if (eventName) {\\r\\n                    // FIXME materialnote doesn't support event pipeline yet.\\r\\n                    //  - Plugin -> Base Code\\r\\n                    pluginEvent = $.materialnote.pluginEvents[keyString];\\r\\n                    if ($.isFunction(pluginEvent)) {\\r\\n                        if (pluginEvent(event, modules.editor, layoutInfo)) {\\r\\n                            return false;\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    pluginEvent = $.materialnote.pluginEvents[eventName];\\r\\n\\r\\n                    if ($.isFunction(pluginEvent)) {\\r\\n                        pluginEvent(event, modules.editor, layoutInfo);\\r\\n                    } else if (modules.editor[eventName]) {\\r\\n                        modules.editor[eventName]($editable, $editor.data('options'));\\r\\n                        event.preventDefault();\\r\\n                    } else if (commands[eventName]) {\\r\\n                        commands[eventName].call(this, layoutInfo);\\r\\n                        event.preventDefault();\\r\\n                    }\\r\\n                } else if (key.isEdit(event.keyCode)) {\\r\\n                    modules.editor.afterCommand($editable);\\r\\n                }\\r\\n            });\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * attach eventhandler\\r\\n         *\\r\\n         * @param {Object} layoutInfo - layout Informations\\r\\n         * @param {Object} options - user options include custom event handlers\\r\\n         */\\r\\n        this.attach = function(layoutInfo, options) {\\r\\n            // handlers for editable\\r\\n            if (options.shortcuts) {\\r\\n                this.bindKeyMap(layoutInfo, options.keyMap[agent.isMac ? 'mac' : 'pc']);\\r\\n            }\\r\\n            layoutInfo.editable().on('mousedown', hMousedown);\\r\\n            layoutInfo.editable().on('keyup mouseup', hKeyupAndMouseup);\\r\\n            layoutInfo.editable().on('scroll', hScroll);\\r\\n\\r\\n            // handler for clipboard\\r\\n            modules.clipboard.attach(layoutInfo, options);\\r\\n\\r\\n            // handler for handle and popover\\r\\n            modules.handle.attach(layoutInfo, options);\\r\\n            layoutInfo.popover().on('click', hToolbarAndPopoverClick);\\r\\n            layoutInfo.popover().on('mousedown', hToolbarAndPopoverMousedown);\\r\\n\\r\\n            // handler for drag and drop\\r\\n            modules.dragAndDrop.attach(layoutInfo, options);\\r\\n\\r\\n            // handlers for frame mode (toolbar, statusbar)\\r\\n            if (!options.airMode) {\\r\\n                // handler for toolbar\\r\\n                layoutInfo.toolbar().on('click', hToolbarAndPopoverClick);\\r\\n                layoutInfo.toolbar().on('mousedown', hToolbarAndPopoverMousedown);\\r\\n\\r\\n                // handler for statusbar\\r\\n                modules.statusbar.attach(layoutInfo, options);\\r\\n            }\\r\\n\\r\\n            // handler for table dimension\\r\\n            var $catcherContainer = options.airMode ? layoutInfo.popover() :\\r\\n                layoutInfo.toolbar();\\r\\n            var $catcher = $catcherContainer.find('.note-dimension-picker-mousecatcher');\\r\\n            $catcher.css({\\r\\n                width: options.insertTableMaxSize.col * gridUnit + 'px',\\r\\n                height: options.insertTableMaxSize.row * gridUnit + 'px'\\r\\n            }).on('mousemove', function(event) {\\r\\n                hDimensionPickerMove(event, options);\\r\\n            });\\r\\n\\r\\n            // save options on editor\\r\\n            layoutInfo.editor().data('options', options);\\r\\n\\r\\n            // ret styleWithCSS for backColor / foreColor clearing with 'inherit'.\\r\\n            if (!agent.isMSIE) {\\r\\n                // [workaround] for Firefox\\r\\n                //  - protect FF Error: NS_ERROR_FAILURE: Failure\\r\\n                setTimeout(function() {\\r\\n                    document.execCommand('styleWithCSS', 0, options.styleWithSpan);\\r\\n                }, 0);\\r\\n            }\\r\\n\\r\\n            // History\\r\\n            var history = new History(layoutInfo.editable());\\r\\n            layoutInfo.editable().data('NoteHistory', history);\\r\\n\\r\\n            // All editor status will be saved on editable with jquery's data\\r\\n            // for support multiple editor with singleton object.\\r\\n            layoutInfo.editable().data('callbacks', {\\r\\n                onInit: options.onInit,\\r\\n                onFocus: options.onFocus,\\r\\n                onBlur: options.onBlur,\\r\\n                onKeydown: options.onKeydown,\\r\\n                onKeyup: options.onKeyup,\\r\\n                onMousedown: options.onMousedown,\\r\\n                onEnter: options.onEnter,\\r\\n                onPaste: options.onPaste,\\r\\n                onBeforeCommand: options.onBeforeCommand,\\r\\n                onChange: options.onChange,\\r\\n                onImageUpload: options.onImageUpload,\\r\\n                onImageUploadError: options.onImageUploadError,\\r\\n                onMediaDelete: options.onMediaDelete,\\r\\n                onToolbarClick: options.onToolbarClick\\r\\n            });\\r\\n\\r\\n            // Textarea: auto filling the code before form submit.\\r\\n            if (dom.isTextarea(list.head(layoutInfo.holder()))) {\\r\\n                layoutInfo.holder().closest('form').submit(function() {\\r\\n                    layoutInfo.holder().val(layoutInfo.holder().code());\\r\\n                });\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * attach jquery custom event\\r\\n         *\\r\\n         * @param {Object} layoutInfo - layout Informations\\r\\n         */\\r\\n        this.attachCustomEvent = function(layoutInfo, options) {\\r\\n            var $holder = layoutInfo.holder();\\r\\n            var $editable = layoutInfo.editable();\\r\\n            var callbacks = $editable.data('callbacks');\\r\\n\\r\\n            $editable.focus(bindCustomEvent($holder, callbacks, 'focus'));\\r\\n            $editable.blur(bindCustomEvent($holder, callbacks, 'blur'));\\r\\n\\r\\n            $editable.keydown(function(event) {\\r\\n                if (event.keyCode === key.code.ENTER) {\\r\\n                    bindCustomEvent($holder, callbacks, 'enter').call(this, event);\\r\\n                }\\r\\n                bindCustomEvent($holder, callbacks, 'keydown').call(this, event);\\r\\n            });\\r\\n            $editable.keyup(bindCustomEvent($holder, callbacks, 'keyup'));\\r\\n\\r\\n            $editable.on('mousedown', bindCustomEvent($holder, callbacks, 'mousedown'));\\r\\n            $editable.on('mouseup', bindCustomEvent($holder, callbacks, 'mouseup'));\\r\\n            $editable.on('scroll', bindCustomEvent($holder, callbacks, 'scroll'));\\r\\n\\r\\n            $editable.on('paste', bindCustomEvent($holder, callbacks, 'paste'));\\r\\n\\r\\n            // [workaround] for old IE - IE8 don't have input events\\r\\n            //  - TODO check IE version\\r\\n            var changeEventName = agent.isMSIE ? 'DOMCharacterDataModified DOMSubtreeModified DOMNodeInserted' : 'input';\\r\\n            $editable.on(changeEventName, function() {\\r\\n                bindCustomEvent($holder, callbacks, 'change')($editable.html(), $editable);\\r\\n            });\\r\\n\\r\\n            if (!options.airMode) {\\r\\n                layoutInfo.toolbar().click(bindCustomEvent($holder, callbacks, 'toolbar.click'));\\r\\n                layoutInfo.popover().click(bindCustomEvent($holder, callbacks, 'popover.click'));\\r\\n            }\\r\\n\\r\\n            // Textarea: auto filling the code before form submit.\\r\\n            if (dom.isTextarea(list.head($holder))) {\\r\\n                $holder.closest('form').submit(function(e) {\\r\\n                    bindCustomEvent($holder, callbacks, 'submit').call(this, e, $holder.code());\\r\\n                });\\r\\n            }\\r\\n\\r\\n            // fire init event\\r\\n            bindCustomEvent($holder, callbacks, 'init')(layoutInfo);\\r\\n\\r\\n            // fire plugin init event\\r\\n            for (var i = 0, len = $.materialnote.plugins.length; i < len; i++) {\\r\\n                if ($.isFunction($.materialnote.plugins[i].init)) {\\r\\n                    $.materialnote.plugins[i].init(layoutInfo);\\r\\n                }\\r\\n            }\\r\\n        };\\r\\n\\r\\n        this.detach = function(layoutInfo, options) {\\r\\n            layoutInfo.holder().off();\\r\\n            layoutInfo.editable().off();\\r\\n\\r\\n            layoutInfo.popover().off();\\r\\n            layoutInfo.handle().off();\\r\\n            layoutInfo.dialog().off();\\r\\n\\r\\n            if (!options.airMode) {\\r\\n                layoutInfo.dropzone().off();\\r\\n                layoutInfo.toolbar().off();\\r\\n                layoutInfo.statusbar().off();\\r\\n            }\\r\\n        };\\r\\n    };\\r\\n\\r\\n    /**\\r\\n     * @class Renderer\\r\\n     *\\r\\n     * renderer\\r\\n     *\\r\\n     * rendering toolbar and editable\\r\\n     */\\r\\n    var Renderer = function() {\\r\\n\\r\\n        /**\\r\\n         * bootstrap button template\\r\\n         * @private\\r\\n         * @param {String} label button name\\r\\n         * @param {Object} [options] button options\\r\\n         * @param {String} [options.event] data-event\\r\\n         * @param {String} [options.className] button's class name\\r\\n         * @param {String} [options.value] data-value\\r\\n         * @param {String} [options.title] button's title for popup\\r\\n         * @param {String} [options.dropdown] dropdown html\\r\\n         * @param {String} [options.hide] data-hide\\r\\n         */\\r\\n\\r\\n        // >>>>>>> CK altered\\r\\n        var tplButton = function(label, options) {\\r\\n            var event = options.event;\\r\\n            var value = options.value;\\r\\n            var title = options.title;\\r\\n            var style = options.style;\\r\\n            var btnClassName = options.btnClassName;\\r\\n            var className = options.className;\\r\\n            var dropdown = options.dropdown;\\r\\n            var hide = options.hide;\\r\\n\\r\\n            if (!dropdown) {\\r\\n                var button = [\\r\\n                    '<div class=\\\"waves-effect waves-light btn',\\r\\n                    (className ? \\\" \\\" + className : '') + '\\\"',\\r\\n                    (title ? ' title=\\\"' + title + '\\\"' : ''),\\r\\n                    (style ? ' style=\\\"' + style + '\\\"' : ''),\\r\\n                    (event ? ' data-event=\\\"' + event + '\\\"' : ''),\\r\\n                    (value ? ' data-value=\\\\'' + value + '\\\\'' : ''),\\r\\n                    (hide ? ' data-hide=\\\\'' + hide + '\\\\'' : ''),\\r\\n                    ' tabindex=\\\"-1\\\">' + label + '<\\/div>'\\r\\n                ].join('');\\r\\n\\r\\n                return button;\\r\\n            } else {\\r\\n                var list = [\\r\\n                    '<div class=\\\"btn-group',\\r\\n                    (className ? \\\" \\\" + className : '') + '\\\">',\\r\\n                    '<button class=\\\"waves-effect waves-light btn dropdown ' + (btnClassName ? btnClassName : '') + '\\\"',\\r\\n                    (title ? ' title=\\\"' + title + '\\\"' : ''),\\r\\n                    (event ? ' data-event=\\\"' + event + '\\\"' : ''),\\r\\n                    (value ? ' data-value=\\\\'' + value + '\\\\'' : ''),\\r\\n                    (hide ? ' data-hide=\\\\'' + hide + '\\\\'' : ''),\\r\\n                    '><i class=\\\"material-icons left\\\">arrow_drop_down<\\/i>' + label + '<\\/button>',\\r\\n                    dropdown,\\r\\n                    '<\\/div>'\\r\\n                ].join('');\\r\\n\\r\\n                return list;\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * bootstrap icon button template\\r\\n         * @private\\r\\n         * @param {String} iconClassName\\r\\n         * @param {Object} [options]\\r\\n         * @param {String} [options.event]\\r\\n         * @param {String} [options.value]\\r\\n         * @param {String} [options.title]\\r\\n         * @param {String} [options.dropdown]\\r\\n         */\\r\\n        // >>>>>>> CK\\r\\n        var tplIconButton = function(iconClassName, options) {\\r\\n            var label = '<i class=\\\"material-icons\\\">' + iconClassName + '<\\/i>';\\r\\n            return tplButton(label, options);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * bootstrap popover template\\r\\n         * @private\\r\\n         * @param {String} className\\r\\n         * @param {String} content\\r\\n         */\\r\\n        var tplPopover = function(className, content) {\\r\\n            var $popover = $('<div class=\\\"' + className + ' popover bottom in\\\" style=\\\"display: none;\\\">' +\\r\\n       \";\n  builder.string += \"         '<div class=\\\"arrow\\\"><\\/div>' +\\r\\n                '<div class=\\\"popover-content\\\">' +\\r\\n                '<\\/div>' +\\r\\n                '<\\/div>');\\r\\n\\r\\n            $popover.find('.popover-content').append(content);\\r\\n            return $popover;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * bootstrap dialog template\\r\\n         *\\r\\n         * @param {String} className\\r\\n         * @param {String} [title='']\\r\\n         * @param {String} body\\r\\n         * @param {String} [footer='']\\r\\n         */\\r\\n        // >>>>>>> CK dialog\\r\\n        var tplDialog = function(className, title, body, footer) {\\r\\n\\r\\n            var modal = [\\r\\n                '<div class=\\\"' + className + ' modal modal-fixed-footer\\\">',\\r\\n                '<div class=\\\"modal-content\\\">',\\r\\n                (title ? '<h4>' + title + '<\\/h4>' : ''),\\r\\n                '<p>' + body + '<\\/p>',\\r\\n                '<\\/div>',\\r\\n                (footer ? '<div class=\\\"modal-footer\\\">' + footer + '<\\/div>' : ''),\\r\\n                '<\\/div>'\\r\\n            ].join('');\\r\\n\\r\\n            return modal;\\r\\n        };\\r\\n\\r\\n        var tplButtonInfo = {\\r\\n            picture: function(lang, options) {\\r\\n                return tplIconButton(options.iconPrefix + options.icons.image.image, {\\r\\n                    event: 'showImageDialog',\\r\\n                    title: lang.image.image,\\r\\n                    hide: true\\r\\n                });\\r\\n            },\\r\\n            link: function(lang, options) {\\r\\n                return tplIconButton(options.iconPrefix + options.icons.link.link, {\\r\\n                    event: 'showLinkDialog',\\r\\n                    title: lang.link.link,\\r\\n                    hide: true\\r\\n                });\\r\\n            },\\r\\n            table: function(lang, options) {\\r\\n                var dropdown = '<ul class=\\\"note-table dropdown-menu\\\">' +\\r\\n                    '<div class=\\\"row\\\">' +\\r\\n                    '<div class=\\\"col s6 preventDropClose\\\"><input type=\\\"checkbox\\\" id=\\\"' + materialUniqueId + '-bordered\\\" checked=\\\"checked\\\" /><label for=\\\"' + materialUniqueId + '-bordered\\\">' + lang.table.bordered + '<\\/label><\\/div>' +\\r\\n                    '<div class=\\\"col s6 preventDropClose\\\"><input type=\\\"checkbox\\\" id=\\\"' + materialUniqueId + '-striped\\\" checked=\\\"checked\\\" /><label for=\\\"' + materialUniqueId + '-striped\\\">' + lang.table.striped + '<\\/label><\\/div>' +\\r\\n                    '<\\/div>' +\\r\\n                    '<div class=\\\"row\\\">' +\\r\\n                    '<div class=\\\"col s6 preventDropClose\\\"><input type=\\\"checkbox\\\" id=\\\"' + materialUniqueId + '-hoverable\\\" checked=\\\"checked\\\" /><label for=\\\"' + materialUniqueId + '-hoverable\\\">' + lang.table.hoverable + '<\\/label><\\/div>' +\\r\\n                    '<div class=\\\"col s6 preventDropClose\\\"><input type=\\\"checkbox\\\" id=\\\"' + materialUniqueId + '-responsive\\\" checked=\\\"checked\\\" /><label for=\\\"' + materialUniqueId + '-responsive\\\">' + lang.table.responsive + '<\\/label><\\/div>' +\\r\\n                    '<\\/div>' +\\r\\n                    '<div class=\\\"note-dimension-picker\\\">' +\\r\\n                    '<div class=\\\"note-dimension-picker-mousecatcher\\\" data-event=\\\"insertTable\\\" data-value=\\\"1x1\\\"><\\/div>' +\\r\\n                    '<div class=\\\"note-dimension-picker-highlighted\\\"><\\/div>' +\\r\\n                    '<div class=\\\"note-dimension-picker-unhighlighted\\\"><\\/div>' +\\r\\n                    '<\\/div>' +\\r\\n                    '<div class=\\\"note-dimension-display\\\"> 1 x 1 <\\/div>' +\\r\\n                    '<\\/ul>';\\r\\n                return tplIconButton(options.iconPrefix + options.icons.table.table, {\\r\\n                    title: lang.table.table,\\r\\n                    dropdown: dropdown\\r\\n                });\\r\\n            },\\r\\n            style: function(lang, options) {\\r\\n                var items = options.styleTags.reduce(function(memo, v) {\\r\\n                    var label = lang.style[v === 'p' ? 'normal' : v];\\r\\n\\r\\n                    return memo + '<li><div data-event=\\\"formatBlock\\\" data-value=\\\"' + v + '\\\">' +\\r\\n                        ((v === 'p' || v === 'pre') ? label : '<' + v + '>' + label + '<\\/' + v + '>') +\\r\\n                        '<\\/div><\\/li>';\\r\\n                }, '');\\r\\n\\r\\n                return tplIconButton(options.iconPrefix + options.icons.style.style, {\\r\\n                    title: lang.style.style,\\r\\n                    dropdown: '<ul class=\\\"dropdown-menu largeDropdown\\\">' + items + '<\\/ul>'\\r\\n                });\\r\\n            },\\r\\n            fontname: function(lang, options) {\\r\\n                var realFontList = [];\\r\\n                var items = options.fontNames.reduce(function(memo, v) {\\r\\n                    if (!agent.isFontInstalled(v) && options.fontNamesIgnoreCheck.indexOf(v) === -1) {\\r\\n                        return memo;\\r\\n                    }\\r\\n                    realFontList.push(v);\\r\\n                    return memo + '<li><div data-event=\\\"fontName\\\" href=\\\"#\\\" data-value=\\\"' + v + '\\\" style=\\\"font-family:\\\\'' + v + '\\\\'\\\">' +\\r\\n                        '<i class=\\\"material-icons tiny transparent\\\">' + options.iconPrefix + options.icons.misc.check + '<\\/i> ' + v + '<\\/div><\\/li>';\\r\\n                }, '');\\r\\n\\r\\n                var hasDefaultFont = agent.isFontInstalled(options.defaultFontName);\\r\\n                var defaultFontName = (hasDefaultFont) ? options.defaultFontName : realFontList[0];\\r\\n                var label = '<div class=\\\"note-current-fontname\\\">' + defaultFontName + '<\\/div>';\\r\\n\\r\\n                return tplButton(label, {\\r\\n                    title: lang.font.name,\\r\\n                    className: 'note-fontname',\\r\\n                    dropdown: '<ul class=\\\"dropdown-menu note-check\\\">' + items + '<\\/ul>'\\r\\n                });\\r\\n            },\\r\\n            fontsize: function(lang, options) {\\r\\n                var items = options.fontSizes.reduce(function(memo, v) {\\r\\n                    return memo + '<li><div data-event=\\\"fontSize\\\" href=\\\"#\\\" data-value=\\\"' + v + '\\\">' +\\r\\n                        '<i class=\\\"material-icons tiny transparent\\\">' + options.iconPrefix + options.icons.misc.check + '<\\/i> ' + v +\\r\\n                        '<\\/div><\\/li>';\\r\\n                }, '');\\r\\n\\r\\n                var label = '<span class=\\\"note-current-fontsize\\\">15<\\/span>';\\r\\n                return tplButton(label, {\\r\\n                    title: lang.font.size,\\r\\n                    className: 'note-fontsize',\\r\\n                    dropdown: '<ul class=\\\"dropdown-menu note-check\\\">' + items + '<\\/ul>'\\r\\n                });\\r\\n            },\\r\\n            color: function(lang, options) {\\r\\n                // >>>>>>> CK\\r\\n                var colorButtonLabel = '<i class=\\\"material-icons\\\">' + options.icons.color.recent + '<\\/i>',\\r\\n                    colorButton = tplButton(colorButtonLabel, {\\r\\n                        className: 'note-recent-color',\\r\\n                        title: lang.color.recent,\\r\\n                        style: \\\"color: \\\" + options.defaultTextColor + \\\"; background-color: \\\" + options.defaultBackColor + \\\";\\\",\\r\\n                        event: 'color',\\r\\n                        value: '{\\\"backColor\\\": \\\"' + options.defaultBackColor + '\\\"}'\\r\\n                    });\\r\\n\\r\\n                var dropdown = '<ul id=\\\"colors\\\" class=\\\"dropdown-menu\\\">' +\\r\\n                    '<li>' +\\r\\n                    '<div class=\\\"col s12\\\">' +\\r\\n                    '<ul class=\\\"tabs\\\">' +\\r\\n                    '<li class=\\\"tab\\\"><a href=\\\"#' + materialUniqueId + '-foreColor\\\" class=\\\"active\\\">' + lang.color.foreground + '<\\/a><\\/li>' +\\r\\n                    '<li class=\\\"tab\\\"><a href=\\\"#' + materialUniqueId + '-backColor\\\">' + lang.color.background + '<\\/a><\\/li>' +\\r\\n                    '<\\/ul>' +\\r\\n                    '<\\/div>' +\\r\\n                    '<div class=\\\"col s12 colorTable\\\">' +\\r\\n                    '<div id=\\\"' + materialUniqueId + '-foreColor\\\">' +\\r\\n                    '<div class=\\\"note-color-reset waves-effect waves-light btn\\\" data-event=\\\"foreColor\\\" data-value=\\\"' + options.defaultTextColor + '\\\" title=\\\"' + lang.color.reset + '\\\">' +\\r\\n                    lang.color.resetToDefault +\\r\\n                    '<\\/div>' +\\r\\n                    '<div class=\\\"colorName\\\"><\\/div>' +\\r\\n                    '<div class=\\\"note-color-palette\\\" data-target-event=\\\"foreColor\\\"><\\/div>' +\\r\\n                    '<\\/div>' +\\r\\n                    '<div id=\\\"' + materialUniqueId + '-backColor\\\">' +\\r\\n                    '<div class=\\\"note-color-reset waves-effect waves-light btn\\\" data-event=\\\"backColor\\\"' + ' data-value=\\\"' + options.defaultBackColor + '\\\" title=\\\"' + lang.color.transparent + '\\\">' +\\r\\n                    lang.color.setTransparent +\\r\\n                    '<\\/div>' +\\r\\n                    '<div class=\\\"colorName\\\"><\\/div>' +\\r\\n                    '<div class=\\\"note-color-palette\\\" data-target-event=\\\"backColor\\\"><\\/div>' +\\r\\n                    '<\\/div>' +\\r\\n                    '<\\/div>' +\\r\\n                    '<\\/li>' +\\r\\n                    '<\\/ul>';\\r\\n\\r\\n                var moreButton = tplButton('', {\\r\\n                    title: lang.color.more,\\r\\n                    className: 'closeLeft',\\r\\n                    dropdown: dropdown\\r\\n                });\\r\\n\\r\\n                return moreButton + colorButton;\\r\\n            },\\r\\n            bold: function(lang, options) {\\r\\n                return tplIconButton(options.iconPrefix + options.icons.font.bold, {\\r\\n                    event: 'bold',\\r\\n                    title: lang.font.bold\\r\\n                });\\r\\n            },\\r\\n            italic: function(lang, options) {\\r\\n                return tplIconButton(options.iconPrefix + options.icons.font.italic, {\\r\\n                    event: 'italic',\\r\\n                    title: lang.font.italic\\r\\n                });\\r\\n            },\\r\\n            underline: function(lang, options) {\\r\\n                return tplIconButton(options.iconPrefix + options.icons.font.underline, {\\r\\n                    event: 'underline',\\r\\n                    title: lang.font.underline\\r\\n                });\\r\\n            },\\r\\n            strikethrough: function(lang, options) {\\r\\n                return tplIconButton(options.iconPrefix + options.icons.font.strikethrough, {\\r\\n                    event: 'strikethrough',\\r\\n                    title: lang.font.strikethrough\\r\\n                });\\r\\n            },\\r\\n            superscript: function(lang, options) {\\r\\n                return tplIconButton(options.iconPrefix + options.icons.font.superscript, {\\r\\n                    event: 'superscript',\\r\\n                    title: lang.font.superscript\\r\\n                });\\r\\n            },\\r\\n            subscript: function(lang, options) {\\r\\n                return tplIconButton(options.iconPrefix + options.icons.font.subscript, {\\r\\n                    event: 'subscript',\\r\\n                    title: lang.font.subscript\\r\\n                });\\r\\n            },\\r\\n            clear: function(lang, options) {\\r\\n                return tplIconButton(options.iconPrefix + options.icons.font.clear, {\\r\\n                    event: 'removeFormat',\\r\\n                    title: lang.font.clear\\r\\n                });\\r\\n            },\\r\\n            ul: function(lang, options) {\\r\\n                return tplIconButton(options.iconPrefix + options.icons.lists.unordered, {\\r\\n                    event: 'insertUnorderedList',\\r\\n                    title: lang.lists.unordered\\r\\n                });\\r\\n            },\\r\\n            ol: function(lang, options) {\\r\\n                return tplIconButton(options.iconPrefix + options.icons.lists.ordered, {\\r\\n                    event: 'insertOrderedList',\\r\\n                    title: lang.lists.ordered\\r\\n                });\\r\\n            },\\r\\n            //>>>>>>> CK paragraph single buttons\\r\\n            leftButton: function(lang, options) {\\r\\n                return tplIconButton(options.iconPrefix + options.icons.paragraph.left, {\\r\\n                    title: lang.paragraph.left,\\r\\n                    event: 'justifyLeft'\\r\\n                });\\r\\n            },\\r\\n            centerButton: function(lang, options) {\\r\\n                return tplIconButton(options.iconPrefix + options.icons.paragraph.center, {\\r\\n                    title: lang.paragraph.center,\\r\\n                    event: 'justifyCenter'\\r\\n                });\\r\\n            },\\r\\n            rightButton: function(lang, options) {\\r\\n                return tplIconButton(options.iconPrefix + options.icons.paragraph.right, {\\r\\n                    title: lang.paragraph.right,\\r\\n                    event: 'justifyRight'\\r\\n                });\\r\\n            },\\r\\n            justifyButton: function(lang, options) {\\r\\n                return tplIconButton(options.iconPrefix + options.icons.paragraph.justify, {\\r\\n                    title: lang.paragraph.justify,\\r\\n                    event: 'justifyFull'\\r\\n                });\\r\\n            },\\r\\n            outdentButton: function(lang, options) {\\r\\n                return tplIconButton(options.iconPrefix + options.icons.paragraph.outdent, {\\r\\n                    title: lang.paragraph.outdent,\\r\\n                    event: 'outdent'\\r\\n                });\\r\\n            },\\r\\n            indentButton: function(lang, options) {\\r\\n                return tplIconButton(options.iconPrefix + options.icons.paragraph.indent, {\\r\\n                    title: lang.paragraph.indent,\\r\\n                    event: 'indent'\\r\\n                });\\r\\n            },\\r\\n\\r\\n            paragraph: function(lang, options) {\\r\\n                var leftButton = tplIconButton(options.iconPrefix + options.icons.paragraph.left, {\\r\\n                    title: lang.paragraph.left,\\r\\n                    event: 'justifyLeft'\\r\\n                });\\r\\n                var centerButton = tplIconButton(options.iconPrefix + options.icons.paragraph.center, {\\r\\n                    title: lang.paragraph.center,\\r\\n                    event: 'justifyCenter'\\r\\n                });\\r\\n                var rightButton = tplIconButton(options.iconPrefix + options.icons.paragraph.right, {\\r\\n                    title: lang.paragraph.right,\\r\\n                    event: 'justifyRight'\\r\\n                });\\r\\n                var justifyButton = tplIconButton(options.iconPrefix + options.icons.paragraph.justify, {\\r\\n                    title: lang.paragraph.justify,\\r\\n                    event: 'justifyFull'\\r\\n                });\\r\\n\\r\\n                var outdentButton = tplIconButton(options.iconPrefix + options.icons.paragraph.outdent, {\\r\\n                    title: lang.paragraph.outdent,\\r\\n                    event: 'outdent'\\r\\n                });\\r\\n                var indentButton = tplIconButton(options.iconPrefix + options.icons.paragraph.indent, {\\r\\n                    title: lang.paragraph.indent,\\r\\n                    event: 'indent'\\r\\n                });\\r\\n\\r\\n                var dropdown = '<ul class=\\\"dropdown-menu\\\">' +\\r\\n                    '<div class=\\\"note-align btn-group\\\">' +\\r\\n                    leftButton + centerButton + rightButton + justifyButton +\\r\\n                    '<\\/div>' +\\r\\n                    '<div class=\\\"note-list btn-group\\\">' +\\r\\n                    indentButton + outdentButton +\\r\\n                    '<\\/div>' +\\r\\n                    '<\\/ul>';\\r\\n\\r\\n                return tplIconButton(options.iconPrefix + options.icons.paragraph.paragraph, {\\r\\n                    title: lang.paragraph.paragraph,\\r\\n                    dropdown: dropdown\\r\\n                });\\r\\n            },\\r\\n            lineheight: function(lang, options) {\\r\\n                var items = options.lineHeights.reduce(function(memo, v) {\\r\\n                    return memo + '<li><div data-event=\\\"lineHeight\\\" href=\\\"#\\\" data-value=\\\"' + parseFloat(v) + '\\\">' +\\r\\n                        '<i class=\\\"material-icons tiny transparent\\\">' + options.iconPrefix + options.icons.misc.check + '<\\/i> ' + v +\\r\\n                        '<\\/div><\\/li>';\\r\\n                }, '');\\r\\n\\r\\n                return tplIconButton(options.iconPrefix + options.icons.font.height, {\\r\\n                    title: lang.font.height,\\r\\n                    className: 'note-height',\\r\\n                    dropdown: '<ul class=\\\"dropdown-menu note-check\\\">' + items + '<\\/ul>'\\r\\n                });\\r\\n\\r\\n            },\\r\\n            help: function(lang, options) {\\r\\n                return tplIconButton(options.iconPrefix + options.icons.options.help, {\\r\\n                    event: 'showHelpDialog',\\r\\n                    title: lang.options.help,\\r\\n                    hide: true\\r\\n                });\\r\\n            },\\r\\n            fullscreen: function(lang, options) {\\r\\n                return tplIconButton(options.iconPrefix + options.icons.options.fullscreen, {\\r\\n                    event: 'fullscreen',\\r\\n                    title: lang.options.fullscreen\\r\\n                });\\r\\n            },\\r\\n            codeview: function(lang, options) {\\r\\n    \";\n  builder.string += \"            return tplIconButton(options.iconPrefix + options.icons.options.codeview, {\\r\\n                    event: 'codeview',\\r\\n                    title: lang.options.codeview\\r\\n                });\\r\\n            },\\r\\n            undo: function(lang, options) {\\r\\n                return tplIconButton(options.iconPrefix + options.icons.history.undo, {\\r\\n                    event: 'undo',\\r\\n                    title: lang.history.undo\\r\\n                });\\r\\n            },\\r\\n            redo: function(lang, options) {\\r\\n                return tplIconButton(options.iconPrefix + options.icons.history.redo, {\\r\\n                    event: 'redo',\\r\\n                    title: lang.history.redo\\r\\n                });\\r\\n            },\\r\\n            hr: function(lang, options) {\\r\\n                return tplIconButton(options.iconPrefix + options.icons.hr.insert, {\\r\\n                    event: 'insertHorizontalRule',\\r\\n                    title: lang.hr.insert\\r\\n                });\\r\\n            }\\r\\n        };\\r\\n\\r\\n        var tplPopovers = function(lang, options) {\\r\\n            var tplLinkPopover = function() {\\r\\n                var linkButton = tplIconButton(options.iconPrefix + options.icons.link.edit, {\\r\\n                    title: lang.link.edit,\\r\\n                    event: 'showLinkDialog',\\r\\n                    hide: true\\r\\n                });\\r\\n                var unlinkButton = tplIconButton(options.iconPrefix + options.icons.link.unlink, {\\r\\n                    title: lang.link.unlink,\\r\\n                    event: 'unlink'\\r\\n                });\\r\\n                var content = '<a href=\\\"http://www.google.com\\\" target=\\\"_blank\\\">www.google.com<\\/a>&nbsp;&nbsp;' +\\r\\n                    '<div class=\\\"note-insert btn-group\\\">' +\\r\\n                    linkButton + unlinkButton +\\r\\n                    '<\\/div>';\\r\\n                return tplPopover('note-link-popover', content);\\r\\n            };\\r\\n\\r\\n            var tplImagePopover = function() {\\r\\n                var fullButton = tplButton('<span class=\\\"note-fontsize-10\\\">100%<\\/span>', {\\r\\n                    title: lang.image.resizeFull,\\r\\n                    event: 'resize',\\r\\n                    value: '1'\\r\\n                });\\r\\n                var halfButton = tplButton('<span class=\\\"note-fontsize-10\\\">50%<\\/span>', {\\r\\n                    title: lang.image.resizeHalf,\\r\\n                    event: 'resize',\\r\\n                    value: '0.5'\\r\\n                });\\r\\n                var quarterButton = tplButton('<span class=\\\"note-fontsize-10\\\">25%<\\/span>', {\\r\\n                    title: lang.image.resizeQuarter,\\r\\n                    event: 'resize',\\r\\n                    value: '0.25'\\r\\n                });\\r\\n\\r\\n                var leftButton = tplIconButton(options.iconPrefix + options.icons.image.floatLeft, {\\r\\n                    title: lang.image.floatLeft,\\r\\n                    event: 'floatMe',\\r\\n                    value: 'left'\\r\\n                });\\r\\n                var rightButton = tplIconButton(options.iconPrefix + options.icons.image.floatRight, {\\r\\n                    title: lang.image.floatRight,\\r\\n                    event: 'floatMe',\\r\\n                    value: 'right'\\r\\n                });\\r\\n                var justifyButton = tplIconButton(options.iconPrefix + options.icons.image.floatNone, {\\r\\n                    title: lang.image.floatNone,\\r\\n                    event: 'floatMe',\\r\\n                    value: 'none'\\r\\n                });\\r\\n\\r\\n                var roundedButton = tplIconButton(options.iconPrefix + options.icons.image.shapeRounded, {\\r\\n                    title: lang.image.shapeRounded,\\r\\n                    event: 'imageClass',\\r\\n                    value: 'img-rounded'\\r\\n                });\\r\\n                var circleButton = tplIconButton(options.iconPrefix + options.icons.image.shapeCircle, {\\r\\n                    title: lang.image.shapeCircle,\\r\\n                    event: 'imageClass',\\r\\n                    value: 'img-circle'\\r\\n                });\\r\\n                var thumbnailButton = tplIconButton(options.iconPrefix + options.icons.image.shapeThumbnail, {\\r\\n                    title: lang.image.shapeThumbnail,\\r\\n                    event: 'imageClass',\\r\\n                    value: 'img-thumbnail'\\r\\n                });\\r\\n                var borderedButton = tplIconButton(options.iconPrefix + options.icons.image.bordered, {\\r\\n                    title: lang.image.bordered,\\r\\n                    event: 'imageClass',\\r\\n                    value: 'img-bordered'\\r\\n                });\\r\\n                var noneButton = tplIconButton(options.iconPrefix + options.icons.image.shapeNone, {\\r\\n                    title: lang.image.shapeNone,\\r\\n                    event: 'imageShape',\\r\\n                    value: ''\\r\\n                });\\r\\n\\r\\n                var removeButton = tplIconButton(options.iconPrefix + options.icons.image.remove, {\\r\\n                    title: lang.image.remove,\\r\\n                    event: 'removeMedia',\\r\\n                    value: 'none'\\r\\n                });\\r\\n\\r\\n                var content = //'<div class=\\\"btn-group\\\">' + fullButton + halfButton + quarterButton + '<\\/div>' +\\r\\n                    '<div class=\\\"btn-group\\\">' + leftButton + rightButton + justifyButton + '<\\/div>' +\\r\\n                    '<div class=\\\"btn-group\\\">' + roundedButton + circleButton + thumbnailButton + borderedButton + noneButton + '<\\/div>' +\\r\\n                    '<div class=\\\"btn-group\\\">' + removeButton + '<\\/div>';\\r\\n                return tplPopover('note-image-popover', content);\\r\\n            };\\r\\n\\r\\n            var tplAirPopover = function() {\\r\\n                var $content = $('<div />');\\r\\n                for (var idx = 0, len = options.airPopover.length; idx < len; idx ++) {\\r\\n                    var group = options.airPopover[idx];\\r\\n\\r\\n                    var $group = $('<div class=\\\"note-' + group[0] + ' btn-group\\\">');\\r\\n                    for (var i = 0, lenGroup = group[1].length; i < lenGroup; i++) {\\r\\n                        var $button = $(tplButtonInfo[group[1][i]](lang, options));\\r\\n\\r\\n                        $button.attr('data-name', group[1][i]);\\r\\n\\r\\n                        $group.append($button);\\r\\n                    }\\r\\n                    $content.append($group);\\r\\n                }\\r\\n\\r\\n                return tplPopover('note-air-popover', $content.children());\\r\\n            };\\r\\n\\r\\n            var $notePopover = $('<div class=\\\"note-popover\\\" />');\\r\\n\\r\\n            $notePopover.append(tplLinkPopover());\\r\\n            $notePopover.append(tplImagePopover());\\r\\n\\r\\n            if (options.airMode) {\\r\\n                $notePopover.append(tplAirPopover());\\r\\n            }\\r\\n\\r\\n            return $notePopover;\\r\\n        };\\r\\n\\r\\n        var tplHandles = function() {\\r\\n            return '<div class=\\\"note-handle\\\">' +\\r\\n                '<div class=\\\"note-control-selection\\\">' +\\r\\n                '<div class=\\\"note-control-selection-bg\\\"><\\/div>' +\\r\\n                '<div class=\\\"note-control-sizing note-control-se\\\"><\\/div>' +\\r\\n                '<div class=\\\"note-control-selection-info\\\"><\\/div>' +\\r\\n                '<\\/div>' +\\r\\n                '<\\/div>';\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * shortcut table template\\r\\n         * @param {String} title\\r\\n         * @param {String} body\\r\\n         */\\r\\n        var tplShortcut = function(title, keys) {\\r\\n            var keyClass = 'note-shortcut-col col-xs-6 note-shortcut-';\\r\\n            var body = [];\\r\\n\\r\\n            for (var i in keys) {\\r\\n                if (keys.hasOwnProperty(i)) {\\r\\n                    body.push(\\r\\n                        '<tr><td>' + keys[i].kbd + '<\\/td><td>' + keys[i].text + '<\\/td><\\/tr>'\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return '<thead><tr><th>' + title + '<\\/th><th>' + '(keys)' + '<\\/th><\\/tr><\\/thead>' +\\r\\n                '<tbody>' + body.join('') + '<\\/tbody>';\\r\\n        };\\r\\n\\r\\n        var tplShortcutText = function(lang) {\\r\\n            var keys = [\\r\\n                { kbd: '\\u2318 + B', text: lang.font.bold },\\r\\n                { kbd: '\\u2318 + I', text: lang.font.italic },\\r\\n                { kbd: '\\u2318 + U', text: lang.font.underline },\\r\\n                { kbd: '\\u2318 + \\\\\\\\', text: lang.font.clear }\\r\\n            ];\\r\\n\\r\\n            return tplShortcut(lang.shortcut.textFormatting, keys);\\r\\n        };\\r\\n\\r\\n        var tplShortcutAction = function(lang) {\\r\\n            var keys = [\\r\\n                { kbd: '\\u2318 + Z', text: lang.history.undo },\\r\\n                { kbd: '\\u2318 + \\u21E7 + Z', text: lang.history.redo },\\r\\n                { kbd: '\\u2318 + ]', text: lang.paragraph.indent },\\r\\n                { kbd: '\\u2318 + [', text: lang.paragraph.outdent },\\r\\n                { kbd: '\\u2318 + ENTER', text: lang.hr.insert }\\r\\n            ];\\r\\n\\r\\n            return tplShortcut(lang.shortcut.action, keys);\\r\\n        };\\r\\n\\r\\n        var tplShortcutPara = function(lang) {\\r\\n            var keys = [\\r\\n                { kbd: '\\u2318 + \\u21E7 + L', text: lang.paragraph.left },\\r\\n                { kbd: '\\u2318 + \\u21E7 + E', text: lang.paragraph.center },\\r\\n                { kbd: '\\u2318 + \\u21E7 + R', text: lang.paragraph.right },\\r\\n                { kbd: '\\u2318 + \\u21E7 + J', text: lang.paragraph.justify },\\r\\n                { kbd: '\\u2318 + \\u21E7 + NUM7', text: lang.lists.ordered },\\r\\n                { kbd: '\\u2318 + \\u21E7 + NUM8', text: lang.lists.unordered }\\r\\n            ];\\r\\n\\r\\n            return tplShortcut(lang.shortcut.paragraphFormatting, keys);\\r\\n        };\\r\\n\\r\\n        var tplShortcutStyle = function(lang) {\\r\\n            var keys = [\\r\\n                { kbd: '\\u2318 + NUM0', text: lang.style.normal },\\r\\n                { kbd: '\\u2318 + NUM1', text: lang.style.h1 },\\r\\n                { kbd: '\\u2318 + NUM2', text: lang.style.h2 },\\r\\n                { kbd: '\\u2318 + NUM3', text: lang.style.h3 },\\r\\n                { kbd: '\\u2318 + NUM4', text: lang.style.h4 },\\r\\n                { kbd: '\\u2318 + NUM5', text: lang.style.h5 },\\r\\n                { kbd: '\\u2318 + NUM6', text: lang.style.h6 }\\r\\n            ];\\r\\n\\r\\n            return tplShortcut(lang.shortcut.documentStyle, keys);\\r\\n        };\\r\\n\\r\\n        var tplExtraShortcuts = function(lang, options) {\\r\\n            var extraKeys = options.extraKeys;\\r\\n            var keys = [];\\r\\n\\r\\n            for (var key in extraKeys) {\\r\\n                if (extraKeys.hasOwnProperty(key)) {\\r\\n                    keys.push({ kbd: key, text: extraKeys[key] });\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return tplShortcut(lang.shortcut.extraKeys, keys);\\r\\n        };\\r\\n\\r\\n        var tplShortcutTable = function(lang, options) {\\r\\n            var template = [\\r\\n                '<table class=\\\"striped hoverable\\\">' + tplShortcutAction(lang, options) + '<\\/table>',\\r\\n                '<table class=\\\"striped hoverable\\\">' + tplShortcutStyle(lang, options) + '<\\/table>',\\r\\n                '<table class=\\\"striped hoverable\\\">' + tplShortcutText(lang, options) + '<\\/table>',\\r\\n                '<table class=\\\"striped hoverable\\\">' + tplShortcutPara(lang, options) + '<\\/table>'\\r\\n            ].join('<br>');\\r\\n\\r\\n            if (options.extraKeys) {\\r\\n                //template.push('<table class=\\\"striped hoverable\\\">' + tplExtraShortcuts(lang, options) + '<\\/table>');\\r\\n            }\\r\\n            return template;\\r\\n        };\\r\\n\\r\\n        var replaceMacKeys = function(sHtml) {\\r\\n            return sHtml.replace(/\\u2318/g, 'Ctrl').replace(/\\u21E7/g, 'Shift');\\r\\n        };\\r\\n\\r\\n        var tplDialogInfo = {\\r\\n            image: function(lang, options) {\\r\\n                var imageLimitation = '';\\r\\n\\r\\n                if (options.maximumImageFileSize) {\\r\\n                    var unit = Math.floor(Math.log(options.maximumImageFileSize) / Math.log(1024));\\r\\n                    var readableSize = (options.maximumImageFileSize / Math.pow(1024, unit)).toFixed(2) * 1 + ' ' + ' KMGTP'[unit] + 'B';\\r\\n\\r\\n                    imageLimitation = '<small>' + lang.image.maximumFileSize + ' : ' + readableSize + '<\\/small>';\\r\\n                }\\r\\n\\r\\n                var body = '<div class=\\\"row\\\">' +\\r\\n                    '<div class=\\\"col s12\\\">' +\\r\\n                    '<div class=\\\"file-field input-field\\\">' +\\r\\n                    '<div class=\\\"btn\\\">' +\\r\\n                    '<span>' + lang.image.image + '<\\/span>' +\\r\\n                    '<input class=\\\"note-image-input\\\" name=\\\"files\\\" type=\\\"file\\\" />' +\\r\\n                    '<\\/div>' +\\r\\n                    '<div class=\\\"file-path-wrapper\\\">' +\\r\\n                    '<input class=\\\"file-path\\\" type=\\\"text\\\" />' +\\r\\n                    '<\\/div>' +\\r\\n                    '<\\/div>' +\\r\\n                    '<\\/div>' +\\r\\n                    '<\\/div>' +\\r\\n                    '<div class=\\\"row\\\">' +\\r\\n                    '<div class=\\\"input-field col s12\\\">' +\\r\\n                    '<input class=\\\"note-image-url\\\" type=\\\"text\\\" />' +\\r\\n                    '<label>' + lang.image.url + '<\\/label>' +\\r\\n                    '<\\/div>' +\\r\\n                    '<\\/div>';\\r\\n\\r\\n                var footer = '<button href=\\\"#\\\" class=\\\"waves-effect waves-light btn note-image-btn disabled\\\" disabled>' + lang.image.insert + '<\\/button>' +\\r\\n                    '<button class=\\\"waves-effect waves-light btn btnClose\\\">' + lang.shortcut.close + '<\\/button>';\\r\\n                return tplDialog('note-image-dialog', lang.image.insert, body, footer);\\r\\n            },\\r\\n\\r\\n            link: function(lang, options) {\\r\\n                var body = '<div class=\\\"row\\\">' +\\r\\n                    '<div class=\\\"input-field col s12\\\">' +\\r\\n                    '<input class=\\\"note-link-text\\\" type=\\\"text\\\" />' +\\r\\n                    '<label>' + lang.link.textToDisplay + '<\\/label>' +\\r\\n                    '<\\/div>' +\\r\\n                    '<\\/div>' +\\r\\n                    '<div class=\\\"row\\\">' +\\r\\n                    '<div class=\\\"input-field col s12\\\">' +\\r\\n                    '<input class=\\\"note-link-url\\\" type=\\\"text\\\" value=\\\"http://\\\" />' +\\r\\n                    '<label class=\\\"active\\\">' + lang.link.url + '<\\/label>' +\\r\\n                    '<\\/div>' +\\r\\n                    '<\\/div>' +\\r\\n                    (!options.disableLinkTarget ?\\r\\n                        '<div class=\\\"row\\\">' +\\r\\n                        '<div class=\\\"col s12\\\">' +\\r\\n                        '<input type=\\\"checkbox\\\" id=\\\"' + materialUniqueId + '-noteInsertLinkNewWindow\\\" checked=\\\"checked\\\" />' +\\r\\n                        '<label for=\\\"' + materialUniqueId + '-noteInsertLinkNewWindow\\\">' + lang.link.openInNewWindow + '<\\/label>' +\\r\\n                        '<\\/div>' +\\r\\n                        '<\\/div>'\\r\\n                            : ''\\r\\n                    );\\r\\n\\r\\n                var footer = '<button href=\\\"#\\\" class=\\\"waves-effect waves-light btn note-link-btn disabled\\\" disabled>' + lang.link.insert + '<\\/button>' +\\r\\n                    '<button class=\\\"waves-effect waves-light btn btnClose\\\">' + lang.shortcut.close + '<\\/button>';\\r\\n                return tplDialog('note-link-dialog', lang.link.insert, body, footer);\\r\\n            },\\r\\n\\r\\n            help: function(lang, options) {\\r\\n                var body = (agent.isMac ? tplShortcutTable(lang, options) : replaceMacKeys(tplShortcutTable(lang, options)));\\r\\n                var footer = '<button href=\\\"#\\\" class=\\\"waves-effect waves-light btn modal-close\\\">' + lang.shortcut.close + '<\\/button>';\\r\\n\\r\\n                return tplDialog('note-help-dialog', lang.shortcut.shortcuts, body, footer);\\r\\n            }\\r\\n        };\\r\\n\\r\\n        var tplDialogs = function(lang, options) {\\r\\n            var dialogs = '';\\r\\n\\r\\n            $.each(tplDialogInfo, function(idx, tplDialog) {\\r\\n                dialogs += tplDialog(lang, options);\\r\\n            });\\r\\n\\r\\n            return '<div class=\\\"note-dialog\\\">' + dialogs + '<\\/div>';\\r\\n        };\\r\\n\\r\\n        var tplStatusbar = function() {\\r\\n            return '<div class=\\\"note-resizebar\\\">' +\\r\\n                '<div class=\\\"note-icon-bar\\\"><\\/div>' +\\r\\n                '<div class=\\\"note-icon-bar\\\"><\\/div>' +\\r\\n                '<div class=\\\"note-icon-bar\\\"><\\/div>' +\\r\\n                '<\\/div>';\\r\\n        };\\r\\n\\r\\n        var representShortcut = function(str) {\\r\\n            if (agent.isMac) {\\r\\n                str = str.replace('CMD', '\\u2318').replace('SHIFT', '\\u21E7');\\r\\n            }\\r\\n\\r\\n            return str.replace('BACKSLASH', '\\\\\\\\')\\r\\n                .replace('SLASH', '/')\\r\\n                .replace('LEFTBRACKET', '[')\\r\\n                .replace('RIGHTBRACKET', ']');\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * createTooltip\\r\\n         * @param {jQuery} $container\\r\\n         * @param {Object} keyMap\\r\\n         * @param {String} [sPlacement]\\r\\n         */\\r\\n        // >>>>>>> CK\\r\\n        var createTooltip = function($container, keyMap, sPlacement) {\\r\\n            $(document).ready(function() {\\r\\n                var invertedKeyMap = func.invertObject(keyMap);\\r\\n                var $buttons = $container.fi\";\n  builder.string += \"nd('.btn');\\r\\n\\r\\n                $buttons.each(function(i, elBtn) {\\r\\n                    var $btn = $(elBtn);\\r\\n                    var sShortcut = invertedKeyMap[$btn.data('event')];\\r\\n                    var text = $btn.attr('title');\\r\\n\\r\\n                    if (sShortcut) {\\r\\n                        $btn.attr('data-tooltip', function(i, v) {\\r\\n                            text = text + ' (' + representShortcut(sShortcut) + ')';\\r\\n\\r\\n                            $(this).removeAttr('title');\\r\\n                            return text;\\r\\n                        });\\r\\n                    }\\r\\n                    $btn.attr('data-position', 'bottom');\\r\\n                    $btn.attr('data-tooltip', text);\\r\\n                    $btn.removeAttr('title');\\r\\n                }).ckTooltip({\\r\\n                    container: $container,\\r\\n                    position: 'top',\\r\\n                    delay: 30\\r\\n                });\\r\\n            });\\r\\n        };\\r\\n\\r\\n        // >>>>>>> CK\\r\\n        // createPalette\\r\\n        var createPalette = function($container, options) {\\r\\n            var colorInfo = options.colors;\\r\\n            var colorTitles = options.colorTitles;\\r\\n\\r\\n            $container.find('.note-color-palette').each(function() {\\r\\n                var $palette = $(this), eventName = $palette.attr('data-target-event');\\r\\n                var paletteContents = [];\\r\\n\\r\\n                for (var row = 0, lenRow = colorInfo.length; row < lenRow; row++) {\\r\\n                    var colors = colorInfo[row];\\r\\n                    var titles = colorTitles[row];\\r\\n                    var buttons = [];\\r\\n\\r\\n                    for (var col = 0, lenCol = colors.length; col < lenCol; col++) {\\r\\n                        var color = colors[col];\\r\\n                        var title = titles[col];\\r\\n\\r\\n                        buttons.push(['<button type=\\\"button\\\" class=\\\"note-color-btn\\\" style=\\\"background-color:', color,\\r\\n                            ';\\\" data-event=\\\"', eventName,\\r\\n                            '\\\" data-value=\\\"', color,\\r\\n                            '\\\" data-description=\\\"', title,\\r\\n                            '\\\" data-toggle=\\\"button\\\" tabindex=\\\"-1\\\"><\\/button>'].join(''));\\r\\n                    }\\r\\n                    paletteContents.push('<div class=\\\"note-color-row\\\">' + buttons.join('') + '<\\/div>');\\r\\n                }\\r\\n                $palette.html(paletteContents.join(''));\\r\\n\\r\\n                $palette.find('button').mouseenter(function() {\\r\\n                    $palette.siblings('.colorName').html($(this).data('description'));\\r\\n                });\\r\\n                $palette.mouseleave(function() {\\r\\n                    $(this).siblings('.colorName').html('');\\r\\n                });\\r\\n            });\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * create materialnote layout (air mode)\\r\\n         *\\r\\n         * @param {jQuery} $holder\\r\\n         * @param {Object} options\\r\\n         */\\r\\n        this.createLayoutByAirMode = function($holder, options) {\\r\\n            var langInfo = options.langInfo;\\r\\n            var keyMap = options.keyMap[agent.isMac ? 'mac' : 'pc'];\\r\\n            var id = func.uniqueId();\\r\\n\\r\\n            $holder.addClass('note-air-editor note-editable');\\r\\n            $holder.attr({\\r\\n                'id': 'note-editor-' + id,\\r\\n                'contentEditable': true\\r\\n            });\\r\\n\\r\\n            var body = document.body;\\r\\n\\r\\n            // create Popover\\r\\n            var $popover = $(tplPopovers(langInfo, options));\\r\\n            $popover.addClass('note-air-layout');\\r\\n            $popover.attr('id', 'note-popover-' + id);\\r\\n            $popover.appendTo(body);\\r\\n            createTooltip($popover, keyMap);\\r\\n            createPalette($popover, options);\\r\\n\\r\\n            // create Handle\\r\\n            var $handle = $(tplHandles());\\r\\n            $handle.addClass('note-air-layout');\\r\\n            $handle.attr('id', 'note-handle-' + id);\\r\\n            $handle.appendTo(body);\\r\\n\\r\\n            // create Dialog\\r\\n            var $dialog = $(tplDialogs(langInfo, options));\\r\\n            $dialog.addClass('note-air-layout');\\r\\n            $dialog.attr('id', 'note-dialog-' + id);\\r\\n            $dialog.find('button.close, a.modal-close').click(function() {\\r\\n                $(this).closest('.modal').closeModal();\\r\\n            });\\r\\n            $dialog.appendTo(body);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * create materialnote layout (normal mode)\\r\\n         *\\r\\n         * @param {jQuery} $holder\\r\\n         * @param {Object} options\\r\\n         */\\r\\n        this.createLayoutByFrame = function($holder, options) {\\r\\n            var langInfo = options.langInfo;\\r\\n\\r\\n            //01. create Editor\\r\\n            var $editor = $('<div class=\\\"note-editor\\\"><\\/div>');\\r\\n            if (options.width) {\\r\\n                $editor.width(options.width);\\r\\n            }\\r\\n\\r\\n            //02. statusbar (resizebar)\\r\\n            if (options.height > 0) {\\r\\n                $('<div class=\\\"note-statusbar\\\">' + (options.disableResizeEditor ? '' : tplStatusbar()) + '<\\/div>').prependTo($editor);\\r\\n            }\\r\\n\\r\\n            //03. create Editable\\r\\n            var isContentEditable = !$holder.is(':disabled');\\r\\n            var $editable = $('<div class=\\\"note-editable\\\" contentEditable=\\\"' + isContentEditable + '\\\"><\\/div>')\\r\\n                .prependTo($editor);\\r\\n            if (options.height) {\\r\\n                $editable.height(options.height);\\r\\n            }\\r\\n            if (options.direction) {\\r\\n                $editable.attr('dir', options.direction);\\r\\n            }\\r\\n            var placeholder = $holder.attr('placeholder') || options.placeholder;\\r\\n            if (placeholder) {\\r\\n                $editable.attr('data-placeholder', placeholder);\\r\\n            }\\r\\n\\r\\n            $editable.html(dom.html($holder));\\r\\n\\r\\n            //031. create codable\\r\\n            $('<textarea class=\\\"note-codable\\\"><\\/textarea>').prependTo($editor);\\r\\n\\r\\n            //04. create Toolbar\\r\\n            var $toolbar = $('<div class=\\\"note-toolbar btn-toolbar\\\" />');\\r\\n            for (var idx = 0, len = options.toolbar.length; idx < len; idx ++) {\\r\\n                var groupName = options.toolbar[idx][0];\\r\\n                var groupButtons = options.toolbar[idx][1];\\r\\n\\r\\n                var $group = $('<div class=\\\"note-' + groupName + ' btn-group\\\" />');\\r\\n                for (var i = 0, btnLength = groupButtons.length; i < btnLength; i++) {\\r\\n                    var buttonInfo = tplButtonInfo[groupButtons[i]];\\r\\n                    // continue creating toolbar even if a button doesn't exist\\r\\n                    if (!$.isFunction(buttonInfo)) { continue; }\\r\\n\\r\\n                    var $button = $(buttonInfo(langInfo, options));\\r\\n                    $button.attr('data-name', groupButtons[i]);  // set button's alias, becuase to get button element from $toolbar\\r\\n                    $group.append($button);\\r\\n                }\\r\\n                $toolbar.append($group);\\r\\n            }\\r\\n\\r\\n            $toolbar.prependTo($editor);\\r\\n            var keyMap = options.keyMap[agent.isMac ? 'mac' : 'pc'];\\r\\n            createPalette($toolbar, options);\\r\\n            createTooltip($toolbar, keyMap, 'bottom');\\r\\n\\r\\n\\r\\n            // >>>>>>> CK - following toolbar\\r\\n            // following toolbar\\r\\n            function followingBar() {\\r\\n                $(window).scroll(function() {\\r\\n                    var isFullscreen = $editor.hasClass('fullscreen');\\r\\n\\r\\n                    if (isFullscreen) {\\r\\n                        return false;\\r\\n                    }\\r\\n\\r\\n                    var toolbar = $editor.children('.note-toolbar');\\r\\n                    var toolbarHeight = toolbar.outerHeight();\\r\\n                    var editable = $editor.children('.note-editable');\\r\\n                    var editableHeight = editable.outerHeight();\\r\\n                    var editorWidth = $editor.width;\\r\\n                    var toolbarOffset, editorOffsetTop, editorOffsetBottom;\\r\\n                    var activateOffset, deactivateOffsetTop, deactivateOffsetBottom;\\r\\n                    var currentOffset;\\r\\n                    var relativeOffset;\\r\\n                    var otherBarHeight;\\r\\n\\r\\n                    // check if the web app is currently using another static bar\\r\\n                    otherBarHeight = $(\\\".\\\" + options.otherStaticBarClass).outerHeight();\\r\\n                    if (!otherBarHeight) otherBarHeight = 0;\\r\\n\\r\\n                    currentOffset = $(document).scrollTop();\\r\\n                    toolbarOffset = toolbar.offset().top;\\r\\n                    editorOffsetTop = $editor.offset().top;\\r\\n                    editorOffsetBottom = editorOffsetTop + editableHeight;\\r\\n                    activateOffset = toolbarOffset - otherBarHeight;\\r\\n                    deactivateOffsetBottom = editorOffsetBottom - otherBarHeight;\\r\\n                    deactivateOffsetTop = editorOffsetTop - otherBarHeight;\\r\\n\\r\\n                    if ((currentOffset > activateOffset) && (currentOffset < deactivateOffsetBottom)) {\\r\\n                        relativeOffset = currentOffset - $editor.offset().top + otherBarHeight;\\r\\n                        toolbar.css({'top': relativeOffset + 'px', 'z-index': 2000});\\r\\n                    } else {\\r\\n                        if ((currentOffset < toolbarOffset) && (currentOffset < deactivateOffsetBottom)) {\\r\\n                            toolbar.css({'top': 0, 'z-index': 1052});\\r\\n\\r\\n                            if (currentOffset > deactivateOffsetTop) {\\r\\n                                relativeOffset = currentOffset - $editor.offset().top + otherBarHeight;\\r\\n                                toolbar.css({'top': relativeOffset + 'px', 'z-index': 2000});\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                });\\r\\n            }\\r\\n            if (options.followingToolbar) {\\r\\n                followingBar();\\r\\n            }\\r\\n\\r\\n            //05. create Popover\\r\\n            var $popover = $(tplPopovers(langInfo, options)).prependTo($editor);\\r\\n            createPalette($popover, options);\\r\\n            createTooltip($popover, keyMap);\\r\\n\\r\\n            //06. handle(control selection, ...)\\r\\n            $(tplHandles()).prependTo($editor);\\r\\n\\r\\n            //07. create Dialog\\r\\n            var $dialog = $(tplDialogs(langInfo, options)).prependTo($editor);\\r\\n            $dialog.find('button.close, a.modal-close').click(function() {\\r\\n                $(this).closest('.modal').closeModal();\\r\\n            });\\r\\n\\r\\n            //08. create Dropzone\\r\\n            $('<div class=\\\"note-dropzone\\\"><div class=\\\"note-dropzone-message\\\"><\\/div><\\/div>').prependTo($editor);\\r\\n\\r\\n            //09. Editor/Holder switch\\r\\n            $editor.insertAfter($holder);\\r\\n            $holder.hide();\\r\\n        };\\r\\n\\r\\n        this.hasNoteEditor = function($holder) {\\r\\n            return this.noteEditorFromHolder($holder).length > 0;\\r\\n        };\\r\\n\\r\\n        this.noteEditorFromHolder = function($holder) {\\r\\n            if ($holder.hasClass('note-air-editor')) {\\r\\n                return $holder;\\r\\n            } else if ($holder.next().hasClass('note-editor')) {\\r\\n                return $holder.next();\\r\\n            } else {\\r\\n                return $();\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * create materialnote layout\\r\\n         *\\r\\n         * @param {jQuery} $holder\\r\\n         * @param {Object} options\\r\\n         */\\r\\n        this.createLayout = function($holder, options) {\\r\\n            if (options.airMode) {\\r\\n                this.createLayoutByAirMode($holder, options);\\r\\n            } else {\\r\\n                this.createLayoutByFrame($holder, options);\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * returns layoutInfo from holder\\r\\n         *\\r\\n         * @param {jQuery} $holder - placeholder\\r\\n         * @return {Object}\\r\\n         */\\r\\n        this.layoutInfoFromHolder = function($holder) {\\r\\n            var $editor = this.noteEditorFromHolder($holder);\\r\\n            if (!$editor.length) {\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            // connect $holder to $editor\\r\\n            $editor.data('holder', $holder);\\r\\n\\r\\n            return dom.buildLayoutInfo($editor);\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * removeLayout\\r\\n         *\\r\\n         * @param {jQuery} $holder - placeholder\\r\\n         * @param {Object} layoutInfo\\r\\n         * @param {Object} options\\r\\n         *\\r\\n         */\\r\\n        this.removeLayout = function($holder, layoutInfo, options) {\\r\\n            if (options.airMode) {\\r\\n                $holder.removeClass('note-air-editor note-editable')\\r\\n                    .removeAttr('id contentEditable');\\r\\n\\r\\n                layoutInfo.popover().remove();\\r\\n                layoutInfo.handle().remove();\\r\\n                layoutInfo.dialog().remove();\\r\\n            } else {\\r\\n                $holder.html(layoutInfo.editable().html());\\r\\n\\r\\n                layoutInfo.editor().remove();\\r\\n                $holder.show();\\r\\n            }\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         *\\r\\n         * @return {Object}\\r\\n         * @return {function(label, options=):string} return.button {@link #tplButton function to make text button}\\r\\n         * @return {function(iconClass, options=):string} return.iconButton {@link #tplIconButton function to make icon button}\\r\\n         * @return {function(className, title=, body=, footer=):string} return.dialog {@link #tplDialog function to make dialog}\\r\\n         */\\r\\n        this.getTemplate = function() {\\r\\n            return {\\r\\n                button: tplButton,\\r\\n                iconButton: tplIconButton,\\r\\n                dialog: tplDialog\\r\\n            };\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         * add button information\\r\\n         *\\r\\n         * @param {String} name button name\\r\\n         * @param {Function} buttonInfo function to make button, reference to {@link #tplButton},{@link #tplIconButton}\\r\\n         */\\r\\n        this.addButtonInfo = function(name, buttonInfo) {\\r\\n            tplButtonInfo[name] = buttonInfo;\\r\\n        };\\r\\n\\r\\n        /**\\r\\n         *\\r\\n         * @param {String} name\\r\\n         * @param {Function} dialogInfo function to make dialog, reference to {@link #tplDialog}\\r\\n         */\\r\\n        this.addDialogInfo = function(name, dialogInfo) {\\r\\n            tplDialogInfo[name] = dialogInfo;\\r\\n        };\\r\\n    };\\r\\n\\r\\n\\r\\n    // jQuery namespace for materialnote\\r\\n    /**\\r\\n     * @class $.materialnote\\r\\n     *\\r\\n     * materialnote attribute\\r\\n     *\\r\\n     * @mixin defaults\\r\\n     * @singleton\\r\\n     *\\r\\n     */\\r\\n    $.materialnote = $.materialnote || {};\\r\\n\\r\\n    // extends default settings\\r\\n    //  - $.materialnote.version\\r\\n    //  - $.materialnote.options\\r\\n    //  - $.materialnote.lang\\r\\n    $.extend($.materialnote, defaults);\\r\\n\\r\\n    var renderer = new Renderer();\\r\\n    var eventHandler = new EventHandler();\\r\\n\\r\\n    $.extend($.materialnote, {\\r\\n        /** @property {Renderer} */\\r\\n        renderer: renderer,\\r\\n        /** @property {EventHandler} */\\r\\n        eventHandler: eventHandler,\\r\\n        /**\\r\\n         * @property {Object} core\\r\\n         * @property {core.agent} core.agent\\r\\n         * @property {core.dom} core.dom\\r\\n         * @property {core.range} core.range\\r\\n         */\\r\\n        core: {\\r\\n            agent: agent,\\r\\n            list : list,\\r\\n            dom: dom,\\r\\n            range: range\\r\\n        },\\r\\n        /**\\r\\n         * @property {Object}\\r\\n         * pluginEvents event list for plugins\\r\\n         * event has name and callback function.\\r\\n         *\\r\\n         * ```\\r\\n         * $.materialnote.addPlugin({\\r\\n     *     events : {\\r\\n     *          'hello' : function(layoutInfo, value, $target) {\\r\\n     *              console.log('event name is hello, value is ' + value );\\r\\n     *          }\\r\\n     *     }\\r\\n     * })\\r\\n         * ```\\r\\n         *\\r\\n         * * event name is data-event property.\\r\\n         * * layoutInfo is a materialnote layout information.\\r\\n         * * value is data-value property.\\r\\n         */\\r\\n        pluginEvents: {},\\r\\n\\r\\n        plugins : []\\r\\n    });\\r\\n\\r\\n    /**\\r\\n     * @method addPlugin\\r\\n     *\\r\\n     * add Plugin in materialnote\\r\\n     *\\r\\n     * materialnote can make a own plugin.\\r\\n     *\\r\\n     * ### Define plugin\\r\\n     * ```\\r\\n     * // get template function\\r\\n     * var tmpl = $.materialnote.renderer.getTemplate();\\r\\n     *\\r\\n     * // add a button\\r\\n     * $.materialnote.addPlugin({\\r\\n   *     buttons : {\\r\\n   *        // \\\"hello\\\"  is button's namespace.\\r\\n   *        \\\"hello\\\" : function(lang, options) {\\r\\n   *            // make icon button by template function\\r\\n   *            return tmpl.iconButton(options.iconPrefix + 'header', {\\r\\n   *                // callback function name when button clicked\\r\\n   *                e\";\n  builder.string += \"vent : 'hello',\\r\\n   *                // set data-value property\\r\\n   *                value : 'hello',\\r\\n   *                hide : true\\r\\n   *            });\\r\\n   *        }\\r\\n   *\\r\\n   *     },\\r\\n   *\\r\\n   *     events : {\\r\\n   *        \\\"hello\\\" : function(layoutInfo, value) {\\r\\n   *            // here is event code\\r\\n   *        }\\r\\n   *     }\\r\\n   * });\\r\\n     * ```\\r\\n     * ### Use a plugin in toolbar\\r\\n     *\\r\\n     * ```\\r\\n     *    $(\\\"#editor\\\").materialnote({\\r\\n   *    ...\\r\\n   *    toolbar : [\\r\\n   *        // display hello plugin in toolbar\\r\\n   *        ['group', [ 'hello' ]]\\r\\n   *    ]\\r\\n   *    ...\\r\\n   *    });\\r\\n     * ```\\r\\n     *\\r\\n     *\\r\\n     * @param {Object} plugin\\r\\n     * @param {Object} [plugin.buttons] define plugin button. for detail, see to Renderer.addButtonInfo\\r\\n     * @param {Object} [plugin.dialogs] define plugin dialog. for detail, see to Renderer.addDialogInfo\\r\\n     * @param {Object} [plugin.events] add event in $.materialnote.pluginEvents\\r\\n     * @param {Object} [plugin.langs] update $.materialnote.lang\\r\\n     * @param {Object} [plugin.options] update $.materialnote.options\\r\\n     */\\r\\n    $.materialnote.addPlugin = function(plugin) {\\r\\n\\r\\n        // save plugin list\\r\\n        $.materialnote.plugins.push(plugin);\\r\\n\\r\\n        if (plugin.buttons) {\\r\\n            $.each(plugin.buttons, function(name, button) {\\r\\n                renderer.addButtonInfo(name, button);\\r\\n            });\\r\\n        }\\r\\n\\r\\n        if (plugin.dialogs) {\\r\\n            $.each(plugin.dialogs, function(name, dialog) {\\r\\n                renderer.addDialogInfo(name, dialog);\\r\\n            });\\r\\n        }\\r\\n\\r\\n        if (plugin.events) {\\r\\n            $.each(plugin.events, function(name, event) {\\r\\n                $.materialnote.pluginEvents[name] = event;\\r\\n            });\\r\\n        }\\r\\n\\r\\n        if (plugin.langs) {\\r\\n            $.each(plugin.langs, function(locale, lang) {\\r\\n                if ($.materialnote.lang[locale]) {\\r\\n                    $.extend($.materialnote.lang[locale], lang);\\r\\n                }\\r\\n            });\\r\\n        }\\r\\n\\r\\n        if (plugin.options) {\\r\\n            $.extend($.materialnote.options, plugin.options);\\r\\n        }\\r\\n    };\\r\\n\\r\\n    /*\\r\\n     * extend $.fn\\r\\n     */\\r\\n    $.fn.extend({\\r\\n        /**\\r\\n         * @method\\r\\n         * Initialize materialnote\\r\\n         *  - create editor layout and attach Mouse and keyboard events.\\r\\n         *\\r\\n         * ```\\r\\n         * $(\\\"#materialnote\\\").materialnote( { options ..} );\\r\\n         * ```\\r\\n         *\\r\\n         * @member $.fn\\r\\n         * @param {Object|String} options reference to $.materialnote.options\\r\\n         * @return {this}\\r\\n         */\\r\\n        materialnote: function() {\\r\\n\\r\\n            // check first argument's type\\r\\n            //  - {String}: External API call {{module}}.{{method}}\\r\\n            //  - {Object}: init options\\r\\n            var type = $.type(list.head(arguments));\\r\\n            var isExternalAPICalled = type === 'string';\\r\\n            var hasInitOptions = type === 'object';\\r\\n\\r\\n            // extend default options with custom user options\\r\\n            var options = hasInitOptions ? list.head(arguments) : {};\\r\\n\\r\\n            options = $.extend({}, $.materialnote.options, options);\\r\\n            options.icons = $.extend({}, $.materialnote.options.icons, options.icons);\\r\\n\\r\\n            // Include langInfo in options for later use, e.g. for image drag-n-drop\\r\\n            // Setup language info with en-US as default\\r\\n            options.langInfo = $.extend(true, {}, $.materialnote.lang['en-US'], $.materialnote.lang[options.lang]);\\r\\n\\r\\n            // override plugin options\\r\\n            if (!isExternalAPICalled && hasInitOptions) {\\r\\n                for (var i = 0, len = $.materialnote.plugins.length; i < len; i++) {\\r\\n                    var plugin = $.materialnote.plugins[i];\\r\\n\\r\\n                    if (options.plugin[plugin.name]) {\\r\\n                        $.materialnote.plugins[i] = $.extend(true, plugin, options.plugin[plugin.name]);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            this.each(function(idx, holder) {\\r\\n                // >>>>>>> CK set id for this editor\\r\\n                materialUniqueId = 'note-editor-' + func.uniqueId();\\r\\n\\r\\n                var $holder = $(holder);\\r\\n\\r\\n                // if layout isn't created yet, createLayout and attach events\\r\\n                if (!renderer.hasNoteEditor($holder)) {\\r\\n                    renderer.createLayout($holder, options);\\r\\n\\r\\n                    var layoutInfo = renderer.layoutInfoFromHolder($holder);\\r\\n                    $holder.data('layoutInfo', layoutInfo);\\r\\n\\r\\n                    eventHandler.attach(layoutInfo, options);\\r\\n                    eventHandler.attachCustomEvent(layoutInfo, options);\\r\\n\\r\\n                }\\r\\n            });\\r\\n\\r\\n            var $first = this.first();\\r\\n            if ($first.length) {\\r\\n                var layoutInfo = renderer.layoutInfoFromHolder($first);\\r\\n\\r\\n                // external API\\r\\n                if (isExternalAPICalled) {\\r\\n                    var moduleAndMethod = list.head(list.from(arguments));\\r\\n                    var args = list.tail(list.from(arguments));\\r\\n\\r\\n                    // TODO now external API only works for editor\\r\\n                    var params = [moduleAndMethod, layoutInfo.editable()].concat(args);\\r\\n                    return eventHandler.invoke.apply(eventHandler, params);\\r\\n                } else if (options.focus) {\\r\\n                    // focus on first editable element for initialize editor\\r\\n                    layoutInfo.editable().focus();\\r\\n                }\\r\\n            }\\r\\n\\r\\n\\r\\n\\r\\n            // >>>>>>> CK dropdowns - tabs activation\\r\\n            $(this).each(function(index, editor) {\\r\\n                var tabs;\\r\\n                var tabContainer;\\r\\n                var toolbar;\\r\\n                var isAir = false;\\r\\n\\r\\n                if ($(editor).hasClass('note-air-editor')) {\\r\\n                    var id = $(this).attr('id');\\r\\n                    if (id) id = id.substring(id.lastIndexOf('-') + 1, id.length);\\r\\n\\r\\n                    editor = $('#note-popover-' + id).find('.note-air-popover');\\r\\n                    tabContainer = editor.find('ul.tabs');\\r\\n                    tabs = editor.find('li.tab a');\\r\\n                    toolbar = $(editor).find('.popover-content button.dropdown');\\r\\n                    isAir = true;\\r\\n                } else {\\r\\n                    editor = $(editor).next('.note-editor');\\r\\n                    tabContainer = editor.find('ul.tabs');\\r\\n                    tabs = editor.find('li.tab a');\\r\\n                    toolbar = $(editor).find('.note-toolbar button.dropdown');\\r\\n                }\\r\\n                var go = true;\\r\\n\\r\\n                function handleDropdowns(select, bar) {\\r\\n                    var list = $(select).next('ul.dropdown-menu');\\r\\n                    var container = $(select).parent('.btn-group');\\r\\n\\r\\n                    list.slideUp(0);\\r\\n\\r\\n                    $('.preventDropClose').click(function(event) {\\r\\n                        event.stopPropagation();\\r\\n                    });\\r\\n\\r\\n                    $(select).click(function(event) {\\r\\n                        // calculate dropdown open position to avoid overflow from editor\\r\\n                        var btnOffset = Math.round($(select).parent('.btn-group').offset().left - toolbar.offset().left);\\r\\n                        var listBorderWidth = parseInt(list.css(\\\"border-left-width\\\"));\\r\\n                        var editorWidth = editor.outerWidth();\\r\\n                        var listOffset = listBorderWidth;\\r\\n\\r\\n                        list.css({'max-width': editorWidth + 'px'});\\r\\n\\r\\n                        var listWidth = list.outerWidth();\\r\\n                        var th = listWidth + btnOffset;\\r\\n\\r\\n                        if (th >= editorWidth) {\\r\\n                            listOffset = th - editorWidth;\\r\\n\\r\\n                            if (!isAir) {\\r\\n                                listOffset = listOffset + listBorderWidth;\\r\\n                            }\\r\\n                        }\\r\\n\\r\\n                        list.css({'left': '-' + listOffset + 'px'});\\r\\n\\r\\n                        var reopen = true;\\r\\n\\r\\n                        if (list.is(':visible')) reopen = false;\\r\\n\\r\\n                        bar.find('ul.dropdown-menu').slideUp(200);\\r\\n\\r\\n                        if (reopen) {\\r\\n                            list.slideToggle(200);\\r\\n                        }\\r\\n                        event.stopPropagation();\\r\\n                    });\\r\\n\\r\\n                    tabs.unbind().click(function(event) {\\r\\n                        go = false;\\r\\n                    });\\r\\n                }\\r\\n\\r\\n                $(window).click(function(event) {\\r\\n                    if (go) editor.find('ul.dropdown-menu').slideUp(200);\\r\\n                    go = true;\\r\\n                    event.stopPropagation();\\r\\n                });\\r\\n\\r\\n                // dropdowns\\r\\n                toolbar.each(function(index, select) {\\r\\n                    handleDropdowns(select, editor);\\r\\n                });\\r\\n\\r\\n                // activate tabs\\r\\n                tabContainer.tabs();\\r\\n            });\\r\\n\\r\\n            return this;\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * @method\\r\\n         *\\r\\n         * get the HTML contents of note or set the HTML contents of note.\\r\\n         *\\r\\n         * * get contents\\r\\n         * ```\\r\\n         * var content = $(\\\"#materialnote\\\").code();\\r\\n         * ```\\r\\n         * * set contents\\r\\n         *\\r\\n         * ```\\r\\n         * $(\\\"#materialnote\\\").code(html);\\r\\n         * ```\\r\\n         *\\r\\n         * @member $.fn\\r\\n         * @param {String} [html] - HTML contents(optional, set)\\r\\n         * @return {this|String} - context(set) or HTML contents of note(get).\\r\\n         */\\r\\n        code: function(html) {\\r\\n            // get the HTML contents of note\\r\\n            if (html === undefined) {\\r\\n                var $holder = this.first();\\r\\n                if (!$holder.length) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                var layoutInfo = renderer.layoutInfoFromHolder($holder);\\r\\n                var $editable = layoutInfo && layoutInfo.editable();\\r\\n\\r\\n                if ($editable && $editable.length) {\\r\\n                    var isCodeview = eventHandler.invoke('codeview.isActivated', layoutInfo);\\r\\n                    eventHandler.invoke('codeview.sync', layoutInfo);\\r\\n                    return isCodeview ? layoutInfo.codable().val() :\\r\\n                        layoutInfo.editable().html();\\r\\n                }\\r\\n                return dom.value($holder);\\r\\n            }\\r\\n\\r\\n            // set the HTML contents of note\\r\\n            this.each(function(i, holder) {\\r\\n                var layoutInfo = renderer.layoutInfoFromHolder($(holder));\\r\\n                var $editable = layoutInfo && layoutInfo.editable();\\r\\n                if ($editable) {\\r\\n                    $editable.html(html);\\r\\n                }\\r\\n            });\\r\\n\\r\\n            return this;\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * @method\\r\\n         *\\r\\n         * destroy Editor Layout and detach Key and Mouse Event\\r\\n         *\\r\\n         * @member $.fn\\r\\n         * @return {this}\\r\\n         */\\r\\n        destroy: function() {\\r\\n            this.each(function(idx, holder) {\\r\\n                var $holder = $(holder);\\r\\n\\r\\n                if (!renderer.hasNoteEditor($holder)) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                var info = renderer.layoutInfoFromHolder($holder);\\r\\n                var options = info.editor().data('options');\\r\\n\\r\\n                eventHandler.detach(info, options);\\r\\n                renderer.removeLayout($holder, info, options);\\r\\n            });\\r\\n\\r\\n            return this;\\r\\n        }\\r\\n\\r\\n    });\\r\\n}));\\r\\n\\r\\n(function ($) {\\r\\n    $.fn.ckTooltip = function (options) {\\r\\n        var timeout = null,\\r\\n            counter = null,\\r\\n            started = false,\\r\\n            counterInterval = null,\\r\\n            margin = 5;\\r\\n\\r\\n        // Defaults\\r\\n        var defaults = {\\r\\n            delay: 350\\r\\n        };\\r\\n        options = $.extend(defaults, options);\\r\\n\\r\\n        return this.each(function(){\\r\\n            var origin = $(this);\\r\\n\\r\\n            // Create Text span\\r\\n            var tooltip_text = $('<span><\\/span>').text(origin.attr('data-tooltip'));\\r\\n\\r\\n            // Create tooltip\\r\\n            var newTooltip = $('<div><\\/div>');\\r\\n            newTooltip.addClass('material-tooltip').append(tooltip_text);\\r\\n            newTooltip.appendTo($('body'));\\r\\n\\r\\n            var backdrop = $('<div><\\/div>').addClass('backdrop');\\r\\n            backdrop.appendTo(newTooltip);\\r\\n            backdrop.css({ top: 0, left:0 });\\r\\n\\r\\n            //Destroy previously binded events\\r\\n            //$(this).off('mouseenter mouseleave');\\r\\n\\r\\n            $.event.special.destroyed = {\\r\\n                remove: function(o) {\\r\\n                    if (o.handler) {\\r\\n                        o.handler();\\r\\n                    }\\r\\n                }\\r\\n            };\\r\\n            $(this).bind('destroyed', function() {\\r\\n                newTooltip.remove();\\r\\n            });\\r\\n\\r\\n            // Mouse In\\r\\n            $(this).on({\\r\\n                mouseenter: function(e) {\\r\\n                    var tooltip_delay = origin.data(\\\"delay\\\");\\r\\n\\r\\n                    tooltip_delay = (tooltip_delay === undefined || tooltip_delay === '') ? options.delay : tooltip_delay;\\r\\n                    counter = 0;\\r\\n                    counterInterval = setInterval(function(){\\r\\n                        counter += 10;\\r\\n\\r\\n                        if (counter >= tooltip_delay && started === false) {\\r\\n                            started = true;\\r\\n                            newTooltip.css({ display: 'block', left: '0px', top: '0px' });\\r\\n\\r\\n                            // Set Tooltip text\\r\\n                            newTooltip.children('span').text(origin.attr('data-tooltip'));\\r\\n\\r\\n                            // Tooltip positioning\\r\\n                            var originWidth = origin.outerWidth();\\r\\n                            var originHeight = origin.outerHeight();\\r\\n                            var tooltipPosition =  origin.attr('data-position');\\r\\n                            var tooltipHeight = newTooltip.outerHeight();\\r\\n                            var tooltipWidth = newTooltip.outerWidth();\\r\\n                            var tooltipVerticalMovement = '0px';\\r\\n                            var tooltipHorizontalMovement = '0px';\\r\\n                            var scale_factor = 8;\\r\\n\\r\\n                            if (tooltipPosition === \\\"top\\\") {\\r\\n                                // Top Position\\r\\n                                newTooltip.css({\\r\\n                                    top: origin.offset().top - tooltipHeight - margin,\\r\\n                                    left: origin.offset().left + originWidth/2 - tooltipWidth/2\\r\\n                                });\\r\\n                                tooltipVerticalMovement = '-10px';\\r\\n                                backdrop.css({\\r\\n                                    borderRadius: '14px 14px 0 0',\\r\\n                                    transformOrigin: '50% 90%',\\r\\n                                    marginTop: tooltipHeight,\\r\\n                                    marginLeft: (tooltipWidth/2) - (backdrop.width()/2)\\r\\n\\r\\n                                });\\r\\n                            }\\r\\n                            // Left Position\\r\\n                            else if (tooltipPosition === \\\"left\\\") {\\r\\n                                newTooltip.css({\\r\\n                                    top: origin.offset().top + originHeight/2 - tooltipHeight/2,\\r\\n                                    left: origin.offset().left - tooltipWidth - margin\\r\\n                                });\\r\\n                                tooltipHorizontalMovement = '-10px';\\r\\n                                backdrop.css({\\r\\n                                    width: '14px',\\r\\n                                    height: '14px',\\r\\n                                    borderRadius: '14px 0 0 14px',\\r\\n                                    transformOrigin: '95% 50%',\\r\\n                                    marginTop: tooltipHeight/2,\\r\\n                                    marginLeft: tooltipWidth\\r\\n                                });\\r\\n                            }\\r\\n                            // Right Position\\r\\n                            else if (tooltipPosition === \\\"right\\\") {\\r\\n                                newTooltip.css({\\r\\n                                    top: origin.offset().top + originHeight/2 - tooltipHeight/2,\\r\\n               \";\n  builder.string += \"                     left: origin.offset().left + originWidth + margin\\r\\n                                });\\r\\n                                tooltipHorizontalMovement = '+10px';\\r\\n                                backdrop.css({\\r\\n                                    width: '14px',\\r\\n                                    height: '14px',\\r\\n                                    borderRadius: '0 14px 14px 0',\\r\\n                                    transformOrigin: '5% 50%',\\r\\n                                    marginTop: tooltipHeight/2,\\r\\n                                    marginLeft: '0px'\\r\\n                                });\\r\\n                            }\\r\\n                            else {\\r\\n                                // Bottom Position\\r\\n                                newTooltip.css({\\r\\n                                    top: origin.offset().top + origin.outerHeight() + margin,\\r\\n                                    left: origin.offset().left + originWidth/2 - tooltipWidth/2\\r\\n                                });\\r\\n                                tooltipVerticalMovement = '+10px';\\r\\n                                backdrop.css({\\r\\n                                    marginLeft: (tooltipWidth/2) - (backdrop.width()/2)\\r\\n                                });\\r\\n                            }\\r\\n\\r\\n                            // Calculate Scale to fill\\r\\n                            scale_factor = tooltipWidth / 8;\\r\\n                            if (scale_factor < 8) {\\r\\n                                scale_factor = 8;\\r\\n                            }\\r\\n                            if (tooltipPosition === \\\"right\\\" || tooltipPosition === \\\"left\\\") {\\r\\n                                scale_factor = tooltipWidth / 10;\\r\\n                                if (scale_factor < 6)\\r\\n                                    scale_factor = 6;\\r\\n                            }\\r\\n\\r\\n                            newTooltip.velocity({ opacity: 1, marginTop: tooltipVerticalMovement, marginLeft: tooltipHorizontalMovement}, { duration: 150, queue: false });\\r\\n                            backdrop.css({ display: 'block' })\\r\\n                                .velocity({opacity:1},{duration: 50, delay: 0, queue: false})\\r\\n                                .velocity({scale: scale_factor}, {duration: 150, delay: 0, queue: false, easing: 'easeInOutQuad'});\\r\\n                        }\\r\\n                    }, 10); // End Interval\\r\\n\\r\\n                    // Mouse Out\\r\\n                },\\r\\n                mouseleave: function(){\\r\\n                    // Reset State\\r\\n                    clearInterval(counterInterval);\\r\\n                    counter = 0;\\r\\n\\r\\n                    // Animate back\\r\\n                    newTooltip.velocity({\\r\\n                        opacity: 0, marginTop: 0, marginLeft: 0}, { duration: 150, queue: false, delay: 50 }\\r\\n                    );\\r\\n                    backdrop.velocity({opacity: 0, scale: 1}, {\\r\\n                        duration:150,\\r\\n                        delay: 50, queue: false,\\r\\n                        complete: function(){\\r\\n                            backdrop.css('display', 'none');\\r\\n                            newTooltip.css('display', 'none');\\r\\n                            started = false;}\\r\\n                    });\\r\\n                }\\r\\n            });\\r\\n        });\\r\\n    };\\r\\n\\r\\n}(jQuery));\\r\\n\";\n  return builder.string;\n}\n;\nvar Lgwt_material_design_addins_client_richeditor_MaterialRichEditorDebugClientBundle_1default_1InlineClientBundleGenerator$2_2_classLit = createForClass('gwt.material.design.addins.client.richeditor', 'MaterialRichEditorDebugClientBundle_default_InlineClientBundleGenerator/2', 2283);\nfunction $clinit_MaterialRichEditorDebugClientBundle_default_InlineClientBundleGenerator$richEditorDebugCssInitializer(){\n  $clinit_MaterialRichEditorDebugClientBundle_default_InlineClientBundleGenerator$richEditorDebugCssInitializer = emptyMethod;\n  richEditorDebugCss = new MaterialRichEditorDebugClientBundle_default_InlineClientBundleGenerator$1;\n}\n\nfunction $clinit_MaterialRichEditorDebugClientBundle_default_InlineClientBundleGenerator$richEditorDebugJsInitializer(){\n  $clinit_MaterialRichEditorDebugClientBundle_default_InlineClientBundleGenerator$richEditorDebugJsInitializer = emptyMethod;\n  richEditorDebugJs = new MaterialRichEditorDebugClientBundle_default_InlineClientBundleGenerator$2;\n}\n\nfunction MaterialRichEditorBase$lambda$0$Type($$outer_0, html_1){\n  this.$$outer_0 = $$outer_0;\n  this.html_1 = html_1;\n}\n\ndefineClass(1714, 1, $intern_59, MaterialRichEditorBase$lambda$0$Type);\n_.onAttachOrDetach = function onAttachOrDetach_5(arg0){\n  $lambda$0_8(this.$$outer_0, this.html_1);\n}\n;\nvar Lgwt_material_design_addins_client_richeditor_base_MaterialRichEditorBase$lambda$0$Type_2_classLit = createForClass('gwt.material.design.addins.client.richeditor.base', 'MaterialRichEditorBase/lambda$0$Type', 1714);\nfunction $clinit_ToolbarButton(){\n  $clinit_ToolbarButton = emptyMethod;\n  STYLE = new ToolbarButton('STYLE', 0, 'style');\n  BOLD_0 = new ToolbarButton('BOLD', 1, 'bold');\n  ITALIC = new ToolbarButton('ITALIC', 2, 'italic');\n  UNDERLINE = new ToolbarButton('UNDERLINE', 3, 'underline');\n  STRIKETHROUGH = new ToolbarButton('STRIKETHROUGH', 4, 'strikethrough');\n  CLEAR = new ToolbarButton('CLEAR', 5, 'clear');\n  SUPERSCRIPT = new ToolbarButton('SUPERSCRIPT', 6, 'superscript');\n  SUBSCRIPT = new ToolbarButton('SUBSCRIPT', 7, 'subscript');\n  FONT_SIZE = new ToolbarButton('FONT_SIZE', 8, 'fontsize');\n  FONT_NAME = new ToolbarButton('FONT_NAME', 9, 'fontname');\n  COLOR = new ToolbarButton('COLOR', 10, 'color');\n  UNDO = new ToolbarButton('UNDO', 11, 'undo');\n  REDO = new ToolbarButton('REDO', 12, 'redo');\n  HELP_0 = new ToolbarButton('HELP', 13, 'help');\n  CK_IMAGE_UPLOAD = new ToolbarButton('CK_IMAGE_UPLOAD', 14, 'ckImageUploader');\n  CK_IMAGE_VIDEO = new ToolbarButton('CK_IMAGE_VIDEO', 15, 'ckVideoEmbeeder');\n  LINK_0 = new ToolbarButton('LINK', 16, 'link');\n  PICTURE = new ToolbarButton('PICTURE', 17, 'picture');\n  TABLE_1 = new ToolbarButton('TABLE', 18, 'table');\n  HR = new ToolbarButton('HR', 19, 'hr');\n  CODE_VIEW = new ToolbarButton('CODE_VIEW', 20, 'codeview');\n  FULLSCREEN = new ToolbarButton('FULLSCREEN', 21, 'fullscreen');\n  UL = new ToolbarButton('UL', 22, 'ul');\n  OL = new ToolbarButton('OL', 23, 'ol');\n  PARAGRAPH = new ToolbarButton('PARAGRAPH', 24, 'paragraph');\n  LEFT_2 = new ToolbarButton('LEFT', 25, 'leftButton');\n  CENTER_3 = new ToolbarButton('CENTER', 26, 'centerButton');\n  RIGHT_3 = new ToolbarButton('RIGHT', 27, 'rightButton');\n  JUSTIFY_1 = new ToolbarButton('JUSTIFY', 28, 'justifyButton');\n  OUTDENT = new ToolbarButton('OUTDENT', 29, 'outdentButton');\n  INDENT = new ToolbarButton('INDENT', 30, 'indentButton');\n  LINE_HEIGHT = new ToolbarButton('LINE_HEIGHT', 31, 'lineheight');\n}\n\nfunction ToolbarButton(enum$name, enum$ordinal, id_0){\n  Enum.call(this, enum$name, enum$ordinal);\n  this.id_0 = id_0;\n}\n\nfunction values_25(){\n  $clinit_ToolbarButton();\n  return stampJavaTypeInfo(getClassLiteralForArray(Lgwt_material_design_addins_client_richeditor_base_constants_ToolbarButton_2_classLit, 1), $intern_9, 78, 0, [STYLE, BOLD_0, ITALIC, UNDERLINE, STRIKETHROUGH, CLEAR, SUPERSCRIPT, SUBSCRIPT, FONT_SIZE, FONT_NAME, COLOR, UNDO, REDO, HELP_0, CK_IMAGE_UPLOAD, CK_IMAGE_VIDEO, LINK_0, PICTURE, TABLE_1, HR, CODE_VIEW, FULLSCREEN, UL, OL, PARAGRAPH, LEFT_2, CENTER_3, RIGHT_3, JUSTIFY_1, OUTDENT, INDENT, LINE_HEIGHT]);\n}\n\ndefineClass(78, 26, {78:1, 4:1, 32:1, 26:1}, ToolbarButton);\nvar BOLD_0, CENTER_3, CK_IMAGE_UPLOAD, CK_IMAGE_VIDEO, CLEAR, CODE_VIEW, COLOR, FONT_NAME, FONT_SIZE, FULLSCREEN, HELP_0, HR, INDENT, ITALIC, JUSTIFY_1, LEFT_2, LINE_HEIGHT, LINK_0, OL, OUTDENT, PARAGRAPH, PICTURE, REDO, RIGHT_3, STRIKETHROUGH, STYLE, SUBSCRIPT, SUPERSCRIPT, TABLE_1, UL, UNDERLINE, UNDO;\nvar Lgwt_material_design_addins_client_richeditor_base_constants_ToolbarButton_2_classLit = createForEnum('gwt.material.design.addins.client.richeditor.base.constants', 'ToolbarButton', 78, Ljava_lang_Enum_2_classLit, values_25);\nfunction MaterialWidget$lambda$24$Type($$outer_0, handler_1){\n  this.$$outer_0 = $$outer_0;\n  this.handler_1 = handler_1;\n}\n\ndefineClass(1596, 1, $intern_68, MaterialWidget$lambda$24$Type);\n_.onKeyDown = function onKeyDown_1(arg0){\n  $lambda$24(this.$$outer_0, this.handler_1);\n}\n;\nvar Lgwt_material_design_client_base_MaterialWidget$lambda$24$Type_2_classLit = createForClass('gwt.material.design.client.base', 'MaterialWidget/lambda$24$Type', 1596);\nfunction MaterialWidget$lambda$26$Type($$outer_0, handler_1){\n  this.$$outer_0 = $$outer_0;\n  this.handler_1 = handler_1;\n}\n\ndefineClass(1597, 1, $intern_101, MaterialWidget$lambda$26$Type);\n_.onKeyUp = function onKeyUp_0(arg0){\n  $lambda$26(this.$$outer_0, this.handler_1);\n}\n;\nvar Lgwt_material_design_client_base_MaterialWidget$lambda$26$Type_2_classLit = createForClass('gwt.material.design.client.base', 'MaterialWidget/lambda$26$Type', 1597);\nfunction MaterialWidget$lambda$28$Type($$outer_0, handler_1){\n  this.$$outer_0 = $$outer_0;\n  this.handler_1 = handler_1;\n}\n\ndefineClass(1599, 1, $intern_130, MaterialWidget$lambda$28$Type);\n_.onFocus = function onFocus(arg0){\n  $lambda$28(this.$$outer_0, this.handler_1);\n}\n;\nvar Lgwt_material_design_client_base_MaterialWidget$lambda$28$Type_2_classLit = createForClass('gwt.material.design.client.base', 'MaterialWidget/lambda$28$Type', 1599);\nfunction RichEditorPresenter(eventBus, view, proxy){\n  $clinit_PresenterWidget();\n  Presenter.call(this, eventBus, view, proxy, ($clinit_ApplicationPresenter() , SLOT_MAIN));\n}\n\ndefineClass(820, 60, $intern_57, RichEditorPresenter);\n_.onReveal = function onReveal_18(){\n  $clinit_SetPageTitleEvent();\n  $fireEvent_1(this, new SetPageTitleEvent('Rich Editor', 'Provides a great Rich Editor with amazing options built with Material Design Look and Feel.', 'addins/richeditor/RichEditorView'));\n}\n;\nvar Lgwt_material_design_demo_client_application_addins_richeditor_RichEditorPresenter_2_classLit = createForClass('gwt.material.design.demo.client.application.addins.richeditor', 'RichEditorPresenter', 820);\nfunction $onSetHTML(this$static){\n  $setHTML(this$static.richEditor, $getText(this$static.txtHTML.valueBoxBase));\n}\n\nfunction RichEditorView(){\n  ViewImpl.call(this);\n  $initWidget_0(this, $build_f_HTMLPanel1_15(new RichEditorView_BinderImpl$Widgets(this)));\n  $setHTML(this.richEditor, '<h2 style=\"text-align: center; \"> <span style=\"color: rgb(101, 31, 255);\"> I Love Material Design <\\/span> <\\/h2> <p style=\"text-align: center;\"> <span style=\"font-size: 17px;\"> Using <\\/span> <span style=\"font-weight: bold; font-size: 17px; text-decoration: underline;\"> Airmode <\\/span> <span style=\"font-size: 17px;\"> you can directly modify this html. <\\/span> <\\/p> <p style=\"text-align: center;\"> <br> <\\/p> <table class=\"hoverable bordered striped responsive-table\"> <thead> <tr> <th> State <\\/th> <th> Capital <\\/th> <th> Currency <\\/th> <\\/tr> <\\/thead> <tbody> <tr> <td> Philippines <\\/td> <td> Manila <\\/td> <td> Peso <\\/td> <\\/tr> <tr> <td> Japan <\\/td> <td> Tokyo <\\/td> <td> Yen <\\/td> <\\/tr> <\\/tbody> <\\/table> <p> <\\/p>');\n  $setHTML(this.airmodeRichEditor, '<h2 style=\"text-align: center; \"> <span style=\"color: rgb(101, 31, 255);\"> I Love Material Design <\\/span> <\\/h2> <p style=\"text-align: center;\"> <span style=\"font-size: 17px;\"> Using <\\/span> <span style=\"font-weight: bold; font-size: 17px; text-decoration: underline;\"> Airmode <\\/span> <span style=\"font-size: 17px;\"> you can directly modify this html. <\\/span> <\\/p> <p style=\"text-align: center;\"> <br> <\\/p> <table class=\"hoverable bordered striped responsive-table\"> <thead> <tr> <th> State <\\/th> <th> Capital <\\/th> <th> Currency <\\/th> <\\/tr> <\\/thead> <tbody> <tr> <td> Philippines <\\/td> <td> Manila <\\/td> <td> Peso <\\/td> <\\/tr> <tr> <td> Japan <\\/td> <td> Tokyo <\\/td> <td> Yen <\\/td> <\\/tr> <\\/tbody> <\\/table> <p> <\\/p>');\n  $setStyleOptions(this.optionRichEditor, stampJavaTypeInfo(getClassLiteralForArray(Lgwt_material_design_addins_client_richeditor_base_constants_ToolbarButton_2_classLit, 1), $intern_9, 78, 0, [($clinit_ToolbarButton() , STYLE), BOLD_0, ITALIC]));\n  $setParaOptions(this.optionRichEditor, stampJavaTypeInfo(getClassLiteralForArray(Lgwt_material_design_addins_client_richeditor_base_constants_ToolbarButton_2_classLit, 1), $intern_9, 78, 0, [LEFT_2, RIGHT_3, JUSTIFY_1]));\n  $setMiscOptions(this.optionRichEditor, stampJavaTypeInfo(getClassLiteralForArray(Lgwt_material_design_addins_client_richeditor_base_constants_ToolbarButton_2_classLit, 1), $intern_9, 78, 0, [CODE_VIEW, FULLSCREEN]));\n  $setUndoOptions(this.optionRichEditor, stampJavaTypeInfo(getClassLiteralForArray(Lgwt_material_design_addins_client_richeditor_base_constants_ToolbarButton_2_classLit, 1), $intern_9, 78, 0, []));\n  $setHTML(this.optionRichEditor, '<div style=\"text-align: left;\"> <span style=\"font-size: 37px; font-weight: bold;\"> Options <\\/span> <\\/div> <div style=\"text-align: left;\"> <ul> <li> <span style=\"line-height: 1.5;\"> optionRichEditor.setStyleOptions(ToolbarButton. <span style=\"font-weight: bold;\"> STYLE <\\/span> , ToolbarButton. <span style=\"font-weight: bold;\"> BOLD <\\/span> , ToolbarButton. <span style=\"font-weight: bold;\"> ITALIC <\\/span> ); <\\/span> <br> <\\/li> <li> optionRichEditor.setParaOptions(ToolbarButton. <span style=\"font-weight: bold;\"> LEFT <\\/span> ,&nbsp;ToolbarButton. <span style=\"font-weight: bold;\"> RIGHT <\\/span> , ToolbarButton. <span style=\"font-weight: bold;\"> JUSTIFY <\\/span> ); <\\/li> <li> optionRichEditor.setMiscOptions(ToolbarButton. <span style=\"font-weight: bold;\"> CODE_VIEW <\\/span> , ToolbarButton. <span style=\"font-weight: bold;\"> FULLSCREEN <\\/span> ); <\\/li> <li> optionRichEditor.setUndoOptions(); <\\/li> <\\/ul> <\\/div>');\n  $setHTML(this.clearRichEditor, '<h2>I Love <\\/h2>');\n}\n\ndefineClass(1083, 63, $intern_58, RichEditorView);\nvar Lgwt_material_design_demo_client_application_addins_richeditor_RichEditorView_2_classLit = createForClass('gwt.material.design.demo.client.application.addins.richeditor', 'RichEditorView', 1083);\nfunction $build_f_HTMLPanel1_15(this$static){\n  var __attachRecord__, f_HTMLPanel1, f_MaterialRow2, f_MaterialRow6, f_MaterialRow11, f_MaterialRow14, f_MaterialRow18, f_MaterialRow21, f_MaterialRow24, f_MaterialTitle3, f_PrettyPre4, sb, f_richeditor$MaterialRichEditor5, f_MaterialTitle7, f_MaterialRow8, txtHTML, f_MaterialColumn9, btnSetHTML, btnGetHTML, richEditor, f_PrettyPre10, sb_0, f_MaterialTitle12, airmodeRichEditor, f_PrettyPre13, sb_1, f_MaterialTitle15, f_richeditor$MaterialRichEditor16, f_PrettyPre17, sb_2, f_MaterialTitle19, optionRichEditor, f_PrettyPre20, sb_3, f_MaterialTitle22, btnClear, btnInsertText, clearRichEditor, f_PrettyPre23, sb_4, f_MaterialTitle25, eventRichEditor, f_PrettyPre26, sb_5, f_PrettyPre27, sb_6, f_PrettyPre28, sb_7, f_PrettyPre29, sb_8;\n  f_HTMLPanel1 = new HTMLPanel($html11_0(this$static.domId0, this$static.domId1, this$static.domId2, this$static.domId3, this$static.domId4, this$static.domId5, this$static.domId6).html_0);\n  __attachRecord__ = attachToDom(($clinit_DOM() , f_HTMLPanel1.element_0));\n  $get_0(this$static.domId0Element);\n  $get_0(this$static.domId1Element);\n  $get_0(this$static.domId2Element);\n  $get_0(this$static.domId3Element);\n  $get_0(this$static.domId4Element);\n  $get_0(this$static.domId5Element);\n  $get_0(this$static.domId6Element);\n  __attachRecord__.origParent?$insertBefore(__attachRecord__.origParent, __attachRecord__.element, __attachRecord__.origSibling):orphan(__attachRecord__.element);\n  $addAndReplaceElement(f_HTMLPanel1, (f_MaterialRow2 = new MaterialRow , $add_14(f_MaterialRow2, (f_MaterialTitle3 = new MaterialTitle , $setInnerHTML($getElement(f_MaterialTitle3.header), ($clinit_SafeHtmlUtils() , (new SafeHtmlString(htmlEscape('Usage'))).html_0)) , f_MaterialTitle3)) , $add_14(f_MaterialRow2, (f_PrettyPre4 = new PrettyPre , $setHTML_0(f_PrettyPre4, (sb = new StringBuilder , sb.string += '\\u2003&lt;!-- Addin Import --&gt;<br> xmlns:ma=\"urn:import:gwt.material.design.addins.client\"<br><br> &lt;!-- Addin Usage --&gt;<br> \\u2003&lt;ma:richeditor.MaterialRichEditor placeholder=\"Type everything about Material Design\"/&gt;' , new OnlyToBeUsedInGeneratedCodeStringBlessedAsSafeHtml(sb.string)).html_0) , setStyleName(f_PrettyPre4.element_0, 'lang-xml', true) , f_PrettyPre4)) , $add_14(f_MaterialRow2, (f_richeditor$MaterialRichEditor5 = new MaterialRichEditor , f_richeditor$MaterialRichEditor5.placeholder = 'Type everything about Material Design' , f_richeditor$MaterialRichEditor5)) , setStyleName(f_MaterialRow2.element_0, 'code', true) , f_MaterialRow2), $get_0(this$static.domId0Element));\n  $addAndReplaceElement(f_HTMLPanel1, (f_MaterialRow6 = new MaterialRow , $add_14(f_MaterialRow6, (f_MaterialTitle7 = new MaterialTitle , $setText_13(f_MaterialTitle7.paragraph, 'We provided a method to easily set the html content of the rich editor component') , $setInnerHTML($getElement(f_MaterialTitle7.header), (new SafeHtmlString(htmlEscape('Set/Get HTML'))).html_0) , f_MaterialTitle7)) , $add_14(f_MaterialRow6, (f_MaterialRow8 = new MaterialRow , $add_14(f_MaterialRow8, (txtHTML = new MaterialTextBox , $setGrid_0((!txtHTML.gridMixin && (txtHTML.gridMixin = new GridMixin(txtHTML)) , txtHTML.gridMixin), 's12 l3 m3') , $getElement(txtHTML.valueBoxBase).setAttribute('placeholder', 'Any HTML') , $getText_0(txtHTML.label_1).length == 0 || $setStyleName(txtHTML.label_1, 'active') , this$static.owner.txtHTML = txtHTML , txtHTML)) , $add_14(f_MaterialRow8, (f_MaterialColumn9 = new MaterialColumn , $add_14(f_MaterialColumn9, (btnSetHTML = new MaterialButton , $setWaves(btnSetHTML, ($clinit_WavesType() , DEFAULT_8)) , btnSetHTML.element_0.style['margin'] = ($clinit_Style$Unit() , '8.0px') , $setText_7(btnSetHTML.span_1, 'Set HTML') , btnSetHTML.span_1.attached || $add_14(btnSetHTML, btnSetHTML.span_1) , $addClickHandler(btnSetHTML, this$static.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames3) , btnSetHTML)) , $add_14(f_MaterialColumn9, (btnGetHTML = new MaterialButton , $setWaves(btnGetHTML, DEFAULT_8) , btnGetHTML.element_0.style['margin'] = '8.0px' , $setText_7(btnGetHTML.span_1, 'Get HTML') , btnGetHTML.span_1.attached || $add_14(btnGetHTML, btnGetHTML.span_1) , $addClickHandler(btnGetHTML, this$static.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames4) , btnGetHTML)) , $setGrid_0((!f_MaterialColumn9.gridMixin && (f_MaterialColumn9.gridMixin = new GridMixin(f_MaterialColumn9)) , f_MaterialColumn9.gridMixin), 's12 m4 l4') , f_MaterialColumn9)) , f_MaterialRow8)) , $add_14(f_MaterialRow6, (richEditor = new MaterialRichEditor , this$static.owner.richEditor = richEditor , richEditor)) , $add_14(f_MaterialRow6, (f_PrettyPre10 = new PrettyPre , $setHTML_0(f_PrettyPre10, (sb_0 = new StringBuilder , sb_0.string += '\\u2003richEditor.setHTML(\"&lt;b&gt;I Love Material Design&lt;/b&gt;\");<br> richEditor.getHTML();' , new OnlyToBeUsedInGeneratedCodeStringBlessedAsSafeHtml(sb_0.string)).html_0) , setStyleName(f_PrettyPre10.element_0, 'lang-java', true) , f_PrettyPre10)) , setStyleName(f_MaterialRow6.element_0, 'code', true) , f_MaterialRow6), $get_0(this$static.domId1Element));\n  $addAndReplaceElement(f_HTMLPanel1, (f_MaterialRow11 = new MaterialRow , $add_14(f_MaterialRow11, (f_MaterialTitle12 = new MaterialTitle , $setText_13(f_MaterialTitle12.paragraph, 'Air-mode gives clearer interface with hiddened toolbar. To reveal toolbar, select a text where you want to shape up. Simply turn on airMode and just focus on text.') , $setInnerHTML($getElement(f_MaterialTitle12.header), (new SafeHtmlString(htmlEscape('Air mode'))).html_0) , f_MaterialTitle12)) , $add_14(f_MaterialRow11, (airmodeRichEditor = new MaterialRichEditor , airmodeRichEditor.airMode = true , this$static.owner.airmodeRichEditor = airmodeRichEditor , airmodeRichEditor)) , $add_14(f_MaterialRow11, (f_PrettyPre13 = new PrettyPre , $setHTML_0(f_PrettyPre13, (sb_1 = new StringBuilder , sb_1.string += '&lt;ma:richeditor.MaterialRichEditor ui:field=\"airmodeRichEditor\" airMode=\"true\" /&gt;' , new OnlyToBeUsedInGeneratedCodeStringBlessedAsSafeHtml(sb_1.string)).html_0) , setStyleName(f_PrettyPre13.element_0, 'lang-xml', true) , f_PrettyPre13)) , setStyleName(f_MaterialRow11.element_0, 'code', true) , f_MaterialRow11), $get_0(this$static.domId2Element));\n  $addAndReplaceElement(f_HTMLPanel1, (f_MaterialRow14 = new MaterialRow , $add_14(f_MaterialRow14, (f_MaterialTitle15 = new MaterialTitle , $setText_13(f_MaterialTitle15.paragraph, \"The height param applied to Editor's zone\") , $setInnerHTML($getElement(f_MaterialTitle15.header), (new SafeHtmlString(htmlEscape('Height'))).html_0) , f_MaterialTitle15)) , $add_14(f_MaterialRow14, (f_richeditor$MaterialRichEditor16 = new MaterialRichEditor , f_richeditor$MaterialRichEditor16.element_0.style['height'] = '200px' , f_richeditor$MaterialRichEditor16)) , $add_14(f_MaterialRow14, (f_PrettyPre17 = new PrettyPre , $setHTML_0(f_PrettyPre17, (sb_2 = new StringBuilder , sb_2.string += '&lt;ma:richeditor.MaterialRichEditor height=\"200px\"/&gt;' , new OnlyToBeUsedInGeneratedCodeStringBlessedAsSafeHtml(sb_2.string)).html_0) , setStyleName(f_PrettyPre17.element_0, 'lang-xml', true) , f_PrettyPre17)) , setStyleName(f_MaterialRow14.element_0, 'code', true) , f_MaterialRow14), $get_0(this$static.domId3Element));\n  $addAndReplaceElement(f_HTMLPanel1, (f_MaterialRow18 = new MaterialRow , $add_14(f_MaterialRow18, (f_MaterialTitle19 = new MaterialTitle , $setText_13(f_MaterialTitle19.paragraph, 'You can set Options and remove what you want or even place it. Options style, fonts, colors, undo, ckMedia, misc, para and height are placed respectively.') , $setInnerHTML($getElement(f_MaterialTitle19.header), (new SafeHtmlString(htmlEscape('Controlling Options'))).html_0) , f_MaterialTitle19)) , $add_14(f_MaterialRow18, (optionRichEditor = new MaterialRichEditor , this$static.owner.optionRichEditor = optionRichEditor , optionRichEditor)) , $add_14(f_MaterialRow18, (f_PrettyPre20 = new PrettyPre , $setHTML_0(f_PrettyPre20, (sb_3 = new StringBuilder , sb_3.string += '\\u2003optionRichEditor.setStyleOptions(ToolbarButton.STYLE, ToolbarButton.BOLD, ToolbarButton.ITALIC);<br> optionRichEditor.setParaOptions(ToolbarButton.LEFT, ToolbarButton.RIGHT, ToolbarButton.JUSTIFY);<br> optionRichEditor.setMiscOptions(ToolbarButton.CODE_VIEW, ToolbarButton.FULLSCREEN);<br> // Without undo options<br> optionRichEditor.setUndoOptions();<br>' , new OnlyToBeUsedInGeneratedCodeStringBlessedAsSafeHtml(sb_3.string)).html_0) , setStyleName(f_PrettyPre20.element_0, 'lang-java', true) , f_PrettyPre20)) , setStyleName(f_MaterialRow18.element_0, 'code', true) , f_MaterialRow18), $get_0(this$static.domId4Element));\n  $addAndReplaceElement(f_HTMLPanel1, (f_MaterialRow21 = new MaterialRow , $add_14(f_MaterialRow21, (f_MaterialTitle22 = new MaterialTitle , $setInnerHTML($getElement(f_MaterialTitle22.header), (new SafeHtmlString(htmlEscape('Clear and Insert Text'))).html_0) , f_MaterialTitle22)) , $add_14(f_MaterialRow21, (btnClear = new MaterialButton , $setWaves(btnClear, DEFAULT_8) , $setText_7(btnClear.span_1, 'Clear') , btnClear.span_1.attached || $add_14(btnClear, btnClear.span_1) , $addClickHandler(btnClear, this$static.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames1) , btnClear)) , $add_14(f_MaterialRow21, (btnInsertText = new MaterialButton , $setWaves(btnInsertText, DEFAULT_8) , $setText_7(btnInsertText.span_1, 'Insert Material Design') , btnInsertText.span_1.attached || $add_14(btnInsertText, btnInsertText.span_1) , $addClickHandler(btnInsertText, this$static.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames2) , btnInsertText)) , $add_14(f_MaterialRow21, (clearRichEditor = new MaterialRichEditor , this$static.owner.clearRichEditor = clearRichEditor , clearRichEditor)) , $add_14(f_MaterialRow21, (f_PrettyPre23 = new PrettyPre , $setHTML_0(f_PrettyPre23, (sb_4 = new StringBuilder , sb_4.string += '\\u2003richEditor.clear(); // Clearing the rich editor <br> richEditor.insertText(\"Material Design\"); // Inserting text into rich editor <br>' , new OnlyToBeUsedInGeneratedCodeStringBlessedAsSafeHtml(sb_4.string)).html_0) , setStyleName(f_PrettyPre23.element_0, 'lang-java', true) , f_PrettyPre23)) , setStyleName(f_MaterialRow21.element_0, 'code', true) , f_MaterialRow21), $get_0(this$static.domId5Element));\n  $addAndReplaceElement(f_HTMLPanel1, (f_MaterialRow24 = new MaterialRow , $add_14(f_MaterialRow24, (f_MaterialTitle25 = new MaterialTitle , $setText_13(f_MaterialTitle25.paragraph, 'We have provided Value Change, Key Up, Blur and Focus events on rich editor.') , $setInnerHTML($getElement(f_MaterialTitle25.header), (new SafeHtmlString(htmlEscape('Events'))).html_0) , f_MaterialTitle25)) , $add_14(f_MaterialRow24, (eventRichEditor = new MaterialRichEditor , $addHandler_0(eventRichEditor, this$static.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames5, (!TYPE_20 && (TYPE_20 = new GwtEvent$Type) , TYPE_20)) , $addFocusHandler(eventRichEditor, this$static.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames6) , $addBlurHandler(eventRichEditor, this$static.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames7) , $addKeyUpHandler(eventRichEditor, this$static.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames8) , $addKeyDownHandler(eventRichEditor, this$static.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames9) , $addHandler_0(eventRichEditor, this$static.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames10, ($clinit_PasteEvent() , TYPE_52)) , this$static.owner.eventRichEditor = eventRichEditor , eventRichEditor)) , $add_14(f_MaterialRow24, (f_PrettyPre26 = new PrettyPre , $setHTML_0(f_PrettyPre26, (sb_5 = new StringBuilder , sb_5.string += '\\u2003// Value Change Event<br> @UiHandler(\"eventRichEditor\")<br> void onValueChange(ValueChangeEvent&lt;String&gt; e) {<br> \\u2003GWT.log(\"Value Change Event : \" + eventRichEditor.getHTML());<br> }' , new OnlyToBeUsedInGeneratedCodeStringBlessedAsSafeHtml(sb_5.string)).html_0) , setStyleName(f_PrettyPre26.element_0, 'lang-java', true) , f_PrettyPre26.element_0.style['marginTop'] = '40.0px' , f_PrettyPre26)) , $add_14(f_MaterialRow24, (f_PrettyPre27 = new PrettyPre , $setHTML_0(f_PrettyPre27, (sb_6 = new StringBuilder , sb_6.string += '\\u2003// Key Up and Down Events<br> @UiHandler(\"eventRichEditor\")<br> void onKeyUp(KeyUpEvent e) {<br> \\u2003GWT.log(\"Key Up : \" + eventRichEditor.getHTML());<br> }<br><br>  @UiHandler(\"eventRichEditor\")<br> void onKeyDown(KeyDownEvent e) {<br> \\u2003GWT.log(\"Key Down : \" + eventRichEditor.getHTML());<br> }' , new OnlyToBeUsedInGeneratedCodeStringBlessedAsSafeHtml(sb_6.string)).html_0) , setStyleName(f_PrettyPre27.element_0, 'lang-java', true) , f_PrettyPre27)) , $add_14(f_MaterialRow24, (f_PrettyPre28 = new PrettyPre , $setHTML_0(f_PrettyPre28, (sb_7 = new StringBuilder , sb_7.string += '\\u2003// Focus and Blur Events<br> @UiHandler(\"eventRichEditor\")<br> void onFocus(FocusEvent e) {<br> \\u2003GWT.log(\"Focus Event : \" + eventRichEditor.getHTML());<br> }<br><br>  @UiHandler(\"eventRichEditor\")<br> void onBlur(BlurEvent event) {<br> \\u2003GWT.log(\"Blur Event : \" + eventRichEditor.getHTML());<br> }' , new OnlyToBeUsedInGeneratedCodeStringBlessedAsSafeHtml(sb_7.string)).html_0) , setStyleName(f_PrettyPre28.element_0, 'lang-java', true) , f_PrettyPre28)) , $add_14(f_MaterialRow24, (f_PrettyPre29 = new PrettyPre , $setHTML_0(f_PrettyPre29, (sb_8 = new StringBuilder , sb_8.string += '\\u2003// Paste Event<br> @UiHandler(\"eventRichEditor\")<br> void onPaste(PasteEvent e) {<br> \\u2003GWT.log(\"Paste : \" + eventRichEditor.getHTML());<br> }' , new OnlyToBeUsedInGeneratedCodeStringBlessedAsSafeHtml(sb_8.string)).html_0) , setStyleName(f_PrettyPre29.element_0, 'lang-java', true) , f_PrettyPre29)) , setStyleName(f_MaterialRow24.element_0, 'code', true) , f_MaterialRow24), $get_0(this$static.domId6Element));\n  return f_HTMLPanel1;\n}\n\nfunction RichEditorView_BinderImpl$Widgets(owner){\n  var style;\n  this.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames1 = new RichEditorView_BinderImpl$Widgets$1(this);\n  this.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames2 = new RichEditorView_BinderImpl$Widgets$2(this);\n  this.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames3 = new RichEditorView_BinderImpl$Widgets$3(this);\n  this.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames4 = new RichEditorView_BinderImpl$Widgets$4(this);\n  this.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames5 = new RichEditorView_BinderImpl$Widgets$5(this);\n  this.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames6 = new RichEditorView_BinderImpl$Widgets$6(this);\n  this.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames7 = new RichEditorView_BinderImpl$Widgets$7(this);\n  this.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames8 = new RichEditorView_BinderImpl$Widgets$8(this);\n  this.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames9 = new RichEditorView_BinderImpl$Widgets$9(this);\n  this.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames10 = new RichEditorView_BinderImpl$Widgets$10(this);\n  this.owner = owner;\n  style = ($clinit_RichEditorView_BinderImpl_GenBundle_default_InlineClientBundleGenerator$styleInitializer() , style_3);\n  $ensureInjected_9(style);\n  this.domId0 = $createUniqueId($doc);\n  this.domId1 = $createUniqueId($doc);\n  this.domId2 = $createUniqueId($doc);\n  this.domId3 = $createUniqueId($doc);\n  this.domId4 = $createUniqueId($doc);\n  this.domId5 = $createUniqueId($doc);\n  this.domId6 = $createUniqueId($doc);\n  this.domId0Element = new LazyDomElement(this.domId0);\n  this.domId1Element = new LazyDomElement(this.domId1);\n  this.domId2Element = new LazyDomElement(this.domId2);\n  this.domId3Element = new LazyDomElement(this.domId3);\n  this.domId4Element = new LazyDomElement(this.domId4);\n  this.domId5Element = new LazyDomElement(this.domId5);\n  this.domId6Element = new LazyDomElement(this.domId6);\n}\n\ndefineClass(1392, 1, {}, RichEditorView_BinderImpl$Widgets);\nvar Lgwt_material_design_demo_client_application_addins_richeditor_RichEditorView_1BinderImpl$Widgets_2_classLit = createForClass('gwt.material.design.demo.client.application.addins.richeditor', 'RichEditorView_BinderImpl/Widgets', 1392);\nfunction RichEditorView_BinderImpl$Widgets$1(this$1){\n  this.this$11 = this$1;\n}\n\ndefineClass(1393, 1, $intern_67, RichEditorView_BinderImpl$Widgets$1);\n_.onClick = function onClick_83(event_0){\n  $wnd.$($getElement(this.this$11.owner.clearRichEditor)).materialnote('reset');\n}\n;\nvar Lgwt_material_design_demo_client_application_addins_richeditor_RichEditorView_1BinderImpl$Widgets$1_2_classLit = createForClass('gwt.material.design.demo.client.application.addins.richeditor', 'RichEditorView_BinderImpl/Widgets/1', 1393);\nfunction RichEditorView_BinderImpl$Widgets$10(this$1){\n  this.this$11 = this$1;\n}\n\ndefineClass(1402, 1, {14:1, 2464:1}, RichEditorView_BinderImpl$Widgets$10);\nvar Lgwt_material_design_demo_client_application_addins_richeditor_RichEditorView_1BinderImpl$Widgets$10_2_classLit = createForClass('gwt.material.design.demo.client.application.addins.richeditor', 'RichEditorView_BinderImpl/Widgets/10', 1402);\nfunction RichEditorView_BinderImpl$Widgets$2(this$1){\n  this.this$11 = this$1;\n}\n\ndefineClass(1394, 1, $intern_67, RichEditorView_BinderImpl$Widgets$2);\n_.onClick = function onClick_84(event_0){\n  $insertText(this.this$11.owner.clearRichEditor);\n}\n;\nvar Lgwt_material_design_demo_client_application_addins_richeditor_RichEditorView_1BinderImpl$Widgets$2_2_classLit = createForClass('gwt.material.design.demo.client.application.addins.richeditor', 'RichEditorView_BinderImpl/Widgets/2', 1394);\nfunction RichEditorView_BinderImpl$Widgets$3(this$1){\n  this.this$11 = this$1;\n}\n\ndefineClass(1395, 1, $intern_67, RichEditorView_BinderImpl$Widgets$3);\n_.onClick = function onClick_85(event_0){\n  $onSetHTML(this.this$11.owner);\n}\n;\nvar Lgwt_material_design_demo_client_application_addins_richeditor_RichEditorView_1BinderImpl$Widgets$3_2_classLit = createForClass('gwt.material.design.demo.client.application.addins.richeditor', 'RichEditorView_BinderImpl/Widgets/3', 1395);\nfunction RichEditorView_BinderImpl$Widgets$4(this$1){\n  this.this$11 = this$1;\n}\n\ndefineClass(1396, 1, $intern_67, RichEditorView_BinderImpl$Widgets$4);\n_.onClick = function onClick_86(event_0){\n  fireToast($getHTML(this.this$11.owner.richEditor));\n}\n;\nvar Lgwt_material_design_demo_client_application_addins_richeditor_RichEditorView_1BinderImpl$Widgets$4_2_classLit = createForClass('gwt.material.design.demo.client.application.addins.richeditor', 'RichEditorView_BinderImpl/Widgets/4', 1396);\nfunction RichEditorView_BinderImpl$Widgets$5(this$1){\n  this.this$11 = this$1;\n}\n\ndefineClass(1397, 1, $intern_48, RichEditorView_BinderImpl$Widgets$5);\n_.onValueChange = function onValueChange_26(event_0){\n  fireToast('Value Change Event : ' + $getHTML(this.this$11.owner.eventRichEditor));\n}\n;\nvar Lgwt_material_design_demo_client_application_addins_richeditor_RichEditorView_1BinderImpl$Widgets$5_2_classLit = createForClass('gwt.material.design.demo.client.application.addins.richeditor', 'RichEditorView_BinderImpl/Widgets/5', 1397);\nfunction RichEditorView_BinderImpl$Widgets$6(this$1){\n  this.this$11 = this$1;\n}\n\ndefineClass(1398, 1, $intern_130, RichEditorView_BinderImpl$Widgets$6);\n_.onFocus = function onFocus_2(event_0){\n  fireToast('Focus Event : ' + $getHTML(this.this$11.owner.eventRichEditor));\n}\n;\nvar Lgwt_material_design_demo_client_application_addins_richeditor_RichEditorView_1BinderImpl$Widgets$6_2_classLit = createForClass('gwt.material.design.demo.client.application.addins.richeditor', 'RichEditorView_BinderImpl/Widgets/6', 1398);\nfunction RichEditorView_BinderImpl$Widgets$7(this$1){\n  this.this$11 = this$1;\n}\n\ndefineClass(1399, 1, $intern_45, RichEditorView_BinderImpl$Widgets$7);\n_.onBlur = function onBlur_7(event_0){\n  fireToast('Blur Event : ' + $getHTML(this.this$11.owner.eventRichEditor));\n}\n;\nvar Lgwt_material_design_demo_client_application_addins_richeditor_RichEditorView_1BinderImpl$Widgets$7_2_classLit = createForClass('gwt.material.design.demo.client.application.addins.richeditor', 'RichEditorView_BinderImpl/Widgets/7', 1399);\nfunction RichEditorView_BinderImpl$Widgets$8(this$1){\n  this.this$11 = this$1;\n}\n\ndefineClass(1400, 1, $intern_101, RichEditorView_BinderImpl$Widgets$8);\n_.onKeyUp = function onKeyUp_4(event_0){\n  fireToast('Key Up : ' + $getHTML(this.this$11.owner.eventRichEditor));\n}\n;\nvar Lgwt_material_design_demo_client_application_addins_richeditor_RichEditorView_1BinderImpl$Widgets$8_2_classLit = createForClass('gwt.material.design.demo.client.application.addins.richeditor', 'RichEditorView_BinderImpl/Widgets/8', 1400);\nfunction RichEditorView_BinderImpl$Widgets$9(this$1){\n  this.this$11 = this$1;\n}\n\ndefineClass(1401, 1, $intern_68, RichEditorView_BinderImpl$Widgets$9);\n_.onKeyDown = function onKeyDown_2(event_0){\n  fireToast('Key Down : ' + $getHTML(this.this$11.owner.eventRichEditor));\n}\n;\nvar Lgwt_material_design_demo_client_application_addins_richeditor_RichEditorView_1BinderImpl$Widgets$9_2_classLit = createForClass('gwt.material.design.demo.client.application.addins.richeditor', 'RichEditorView_BinderImpl/Widgets/9', 1401);\nvar style_3;\nfunction $ensureInjected_9(this$static){\n  if (!this$static.injected) {\n    this$static.injected = true;\n    $clinit_StyleInjector();\n    $push_0(toInject, '');\n    schedule();\n    return true;\n  }\n  return false;\n}\n\nfunction RichEditorView_BinderImpl_GenBundle_default_InlineClientBundleGenerator$1(){\n}\n\ndefineClass(2058, 1, {}, RichEditorView_BinderImpl_GenBundle_default_InlineClientBundleGenerator$1);\n_.getName = function getName_124(){\n  return 'style';\n}\n;\n_.injected = false;\nvar Lgwt_material_design_demo_client_application_addins_richeditor_RichEditorView_1BinderImpl_1GenBundle_1default_1InlineClientBundleGenerator$1_2_classLit = createForClass('gwt.material.design.demo.client.application.addins.richeditor', 'RichEditorView_BinderImpl_GenBundle_default_InlineClientBundleGenerator/1', 2058);\nfunction $clinit_RichEditorView_BinderImpl_GenBundle_default_InlineClientBundleGenerator$styleInitializer(){\n  $clinit_RichEditorView_BinderImpl_GenBundle_default_InlineClientBundleGenerator$styleInitializer = emptyMethod;\n  style_3 = new RichEditorView_BinderImpl_GenBundle_default_InlineClientBundleGenerator$1;\n}\n\nfunction $html11_0(arg0, arg1, arg2, arg3, arg4, arg5, arg6){\n  var sb;\n  sb = new StringBuilder;\n  sb.string += \"<span id='\";\n  $append_4(sb, htmlEscape(arg0));\n  sb.string += \"'><\\/span>  <span id='\";\n  $append_4(sb, htmlEscape(arg1));\n  sb.string += \"'><\\/span>  <span id='\";\n  $append_4(sb, htmlEscape(arg2));\n  sb.string += \"'><\\/span>  <span id='\";\n  $append_4(sb, htmlEscape(arg3));\n  sb.string += \"'><\\/span>  <span id='\";\n  $append_4(sb, htmlEscape(arg4));\n  sb.string += \"'><\\/span>  <span id='\";\n  $append_4(sb, htmlEscape(arg5));\n  sb.string += \"'><\\/span>  <span id='\";\n  $append_4(sb, htmlEscape(arg6));\n  sb.string += \"'><\\/span>\";\n  return new OnlyToBeUsedInGeneratedCodeStringBlessedAsSafeHtml(sb.string);\n}\n\nfunction $get_Key$type$gwt$material$design$demo$client$application$addins$richeditor$RichEditorPresenter$_annotation$$none$$(this$static){\n  var result, result0;\n  if (!this$static.singleton_Key$type$gwt$material$design$demo$client$application$addins$richeditor$RichEditorPresenter$_annotation$$none$$) {\n    result0 = new RichEditorPresenter($get_Key$type$com$google$web$bindery$event$shared$EventBus$_annotation$$none$$($getFragment_com_google_web_bindery_event_shared(this$static.injector)), (result = $get_Key$type$gwt$material$design$demo$client$application$addins$richeditor$RichEditorView$_annotation$$none$$(this$static) , result), $get_Key$type$gwt$material$design$demo$client$application$addins$richeditor$RichEditorPresenter$MyProxy$_annotation$$none$$(this$static));\n    $automaticBind(($getFragment_com_gwtplatform_mvp_client(this$static.injector) , result0), $get_Key$type$com$gwtplatform$mvp$client$AutobindDisable$_annotation$$none$$($getFragment_com_gwtplatform_mvp_client(this$static.injector)));\n    this$static.singleton_Key$type$gwt$material$design$demo$client$application$addins$richeditor$RichEditorPresenter$_annotation$$none$$ = result0;\n  }\n  return this$static.singleton_Key$type$gwt$material$design$demo$client$application$addins$richeditor$RichEditorPresenter$_annotation$$none$$;\n}\n\nfunction $get_Key$type$gwt$material$design$demo$client$application$addins$richeditor$RichEditorView$_annotation$$none$$(this$static){\n  var result;\n  if (!this$static.singleton_Key$type$gwt$material$design$demo$client$application$addins$richeditor$RichEditorView$_annotation$$none$$) {\n    result = new RichEditorView;\n    this$static.singleton_Key$type$gwt$material$design$demo$client$application$addins$richeditor$RichEditorView$_annotation$$none$$ = result;\n  }\n  return this$static.singleton_Key$type$gwt$material$design$demo$client$application$addins$richeditor$RichEditorView$_annotation$$none$$;\n}\n\ndefineClass(718, 1, $intern_108);\n_.onSuccess_0 = function onSuccess_12(){\n  $onSuccess(this.val$callback2, $get_Key$type$gwt$material$design$demo$client$application$addins$richeditor$RichEditorPresenter$_annotation$$none$$(this.this$11.this$01));\n}\n;\n$entry(onLoad_0)(11);\n\n//# sourceURL=gwtmaterialdemo-11.js\n")
